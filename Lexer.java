// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

/* JFlex example: partial Java language lexer specification */
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\3\u1f00\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\3\u1f00\1\u3e00\1\u3f00\4\u1f00"+
    "\1\u4000\11\u1f00\3\u0100\1\u4100\1\u4200\13\u1f00\4\u0100\1\u4300"+
    "\63\u1f00\2\u0100\1\u4400\4\u1f00\1\u4500\100\u1f00\1\u4600\40\u1f00"+
    "\1\u4700\1\u4800\1\u1f00\1\u4900\1\u4a00\1\u4b00\1\u4c00\26\u1f00"+
    "\1\u4d00\21\u1f00\246\u0100\1\u4e00\20\u0100\1\u4f00\1\u5000\77\u1f00"+
    "\2\u0100\1\u5000\u0b05\u1f00\1\u5100\1\u5200\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\3\1\7\1\10\1\11\1\3"+
    "\2\10\1\12\1\5\1\10\1\5\1\10\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\23\2\10\1\25\1\26\1\27\1\10\1\3\32\7"+
    "\1\10\1\30\2\10\1\7\1\3\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\7\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\7\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\10"+
    "\1\61\2\10\41\0\2\3\4\7\4\3\1\7\2\3"+
    "\1\0\7\3\1\7\4\3\1\7\5\3\27\7\1\3"+
    "\37\7\1\3\u01ca\7\4\3\14\7\16\3\5\7\7\3"+
    "\1\7\1\3\1\7\21\3\160\0\5\7\1\3\2\7"+
    "\2\3\4\7\10\3\1\7\1\3\3\7\1\3\1\7"+
    "\1\3\24\7\1\3\123\7\1\3\213\7\1\3\5\0"+
    "\2\3\236\7\11\3\46\7\2\3\1\7\7\3\47\7"+
    "\7\3\1\7\1\3\55\0\1\3\1\0\1\3\2\0"+
    "\1\3\2\0\1\3\1\0\10\3\33\7\5\3\3\7"+
    "\15\3\5\0\6\3\1\7\4\3\13\0\5\3\53\7"+
    "\37\0\4\3\2\7\1\0\143\7\1\3\1\7\10\0"+
    "\1\3\6\0\2\7\2\0\1\3\4\0\2\7\12\0"+
    "\3\7\2\3\1\7\17\3\1\0\1\7\1\0\36\7"+
    "\33\0\2\3\131\7\13\0\1\7\16\3\12\0\41\7"+
    "\11\0\2\7\4\3\1\7\5\3\26\7\4\0\1\7"+
    "\11\0\1\7\3\0\1\7\5\0\22\3\31\7\3\0"+
    "\104\3\1\7\1\3\13\7\67\3\33\0\1\3\4\0"+
    "\66\7\3\0\1\7\22\0\1\7\7\0\12\7\2\0"+
    "\2\3\12\0\1\3\7\7\1\3\7\7\1\3\3\0"+
    "\1\3\10\7\2\3\2\7\2\3\26\7\1\3\7\7"+
    "\1\3\1\7\3\3\4\7\2\3\1\0\1\7\7\0"+
    "\2\3\2\0\2\3\3\0\1\7\10\3\1\0\4\3"+
    "\2\7\1\3\3\7\2\0\2\3\12\0\4\7\7\3"+
    "\1\7\5\3\3\0\1\3\6\7\4\3\2\7\2\3"+
    "\26\7\1\3\7\7\1\3\2\7\1\3\2\7\1\3"+
    "\2\7\2\3\1\0\1\3\5\0\4\3\2\0\2\3"+
    "\3\0\3\3\1\0\7\3\4\7\1\3\1\7\7\3"+
    "\14\0\3\7\1\0\13\3\3\0\1\3\11\7\1\3"+
    "\3\7\1\3\26\7\1\3\7\7\1\3\2\7\1\3"+
    "\5\7\2\3\1\0\1\7\10\0\1\3\3\0\1\3"+
    "\3\0\2\3\1\7\17\3\2\7\2\0\2\3\12\0"+
    "\1\3\1\7\17\3\3\0\1\3\10\7\2\3\2\7"+
    "\2\3\26\7\1\3\7\7\1\3\2\7\1\3\5\7"+
    "\2\3\1\0\1\7\7\0\2\3\2\0\2\3\3\0"+
    "\10\3\2\0\4\3\2\7\1\3\3\7\2\0\2\3"+
    "\12\0\1\3\1\7\20\3\1\0\1\7\1\3\6\7"+
    "\3\3\3\7\1\3\4\7\3\3\2\7\1\3\1\7"+
    "\1\3\2\7\3\3\2\7\3\3\3\7\3\3\14\7"+
    "\4\3\5\0\3\3\3\0\1\3\4\0\2\3\1\7"+
    "\6\3\1\0\16\3\12\0\11\3\1\7\7\3\3\0"+
    "\1\3\10\7\1\3\3\7\1\3\27\7\1\3\12\7"+
    "\1\3\5\7\3\3\1\7\7\0\1\3\3\0\1\3"+
    "\4\0\7\3\2\0\1\3\2\7\6\3\2\7\2\0"+
    "\2\3\12\0\22\3\2\0\1\3\10\7\1\3\3\7"+
    "\1\3\27\7\1\3\12\7\1\3\5\7\2\3\1\0"+
    "\1\7\7\0\1\3\3\0\1\3\4\0\7\3\2\0"+
    "\7\3\1\7\1\3\2\7\2\0\2\3\12\0\1\3"+
    "\2\7\17\3\2\0\1\3\10\7\1\3\3\7\1\3"+
    "\51\7\2\3\1\7\7\0\1\3\3\0\1\3\4\0"+
    "\1\7\10\3\1\0\10\3\2\7\2\0\2\3\12\0"+
    "\12\3\6\7\2\3\2\0\1\3\22\7\3\3\30\7"+
    "\1\3\11\7\1\3\1\7\2\3\7\7\3\3\1\0"+
    "\4\3\6\0\1\3\1\0\1\3\10\0\22\3\2\0"+
    "\15\3\60\7\1\0\2\7\7\0\4\3\10\7\10\0"+
    "\1\3\12\0\47\3\2\7\1\3\1\7\2\3\2\7"+
    "\1\3\1\7\2\3\1\7\6\3\4\7\1\3\7\7"+
    "\1\3\3\7\1\3\1\7\1\3\1\7\2\3\2\7"+
    "\1\3\4\7\1\0\2\7\6\0\1\3\2\0\1\7"+
    "\2\3\5\7\1\3\1\7\1\3\6\0\2\3\12\0"+
    "\2\3\4\7\40\3\1\7\27\3\2\0\6\3\12\0"+
    "\13\3\1\0\1\3\1\0\1\3\1\0\4\3\2\0"+
    "\10\7\1\3\44\7\4\3\24\0\1\3\2\0\5\7"+
    "\13\0\1\3\44\0\11\3\1\0\71\3\53\7\24\0"+
    "\1\7\12\0\6\3\6\7\4\0\4\7\3\0\1\7"+
    "\3\0\2\7\7\0\3\7\4\0\15\7\14\0\1\7"+
    "\17\0\2\3\46\7\1\3\1\7\5\3\1\7\2\3"+
    "\53\7\1\3\115\7\1\3\4\7\2\3\7\7\1\3"+
    "\1\7\1\3\4\7\2\3\51\7\1\3\4\7\2\3"+
    "\41\7\1\3\4\7\2\3\7\7\1\3\1\7\1\3"+
    "\4\7\2\3\17\7\1\3\71\7\1\3\4\7\2\3"+
    "\103\7\2\3\3\0\40\3\20\7\20\3\125\7\14\3"+
    "\u016c\7\2\3\21\7\1\3\32\7\5\3\113\7\3\3"+
    "\3\7\17\3\15\7\1\3\4\7\3\0\13\3\22\7"+
    "\3\0\13\3\22\7\2\0\14\3\15\7\1\3\3\7"+
    "\1\3\2\0\14\3\64\7\40\0\3\3\1\7\3\3"+
    "\2\7\1\0\2\3\12\0\41\3\3\0\2\3\12\0"+
    "\6\3\130\7\10\3\51\7\1\0\1\7\5\3\106\7"+
    "\12\3\35\7\3\3\14\0\4\3\14\0\12\3\12\0"+
    "\36\7\2\3\5\7\13\3\54\7\4\3\21\0\7\7"+
    "\2\0\6\3\12\0\46\3\27\7\5\0\4\3\65\7"+
    "\12\0\1\3\35\0\2\3\13\0\6\3\12\0\15\3"+
    "\1\7\130\3\5\0\57\7\21\0\7\7\4\3\12\0"+
    "\21\3\11\0\14\3\3\0\36\7\15\0\2\7\12\0"+
    "\54\7\16\0\14\3\44\7\24\0\10\3\12\0\3\3"+
    "\3\7\12\0\44\7\122\3\3\0\1\3\25\0\4\7"+
    "\1\0\4\7\3\0\2\7\11\3\300\7\47\0\25\3"+
    "\4\0\26\7\2\3\6\7\2\3\46\7\2\3\6\7"+
    "\2\3\10\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\37\7\2\3\65\7\1\3\7\7\1\3\1\7"+
    "\3\3\3\7\1\3\7\7\3\3\4\7\2\3\6\7"+
    "\4\3\15\7\5\3\3\7\1\3\7\7\16\3\5\0"+
    "\32\3\5\0\20\3\2\7\23\3\1\7\13\3\5\0"+
    "\5\3\6\0\1\3\1\7\15\3\1\7\20\3\15\7"+
    "\3\3\33\7\25\3\15\0\4\3\1\0\3\3\14\0"+
    "\21\3\1\7\4\3\1\7\2\3\12\7\1\3\1\7"+
    "\3\3\5\7\6\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\4\7\1\3\13\7\2\3\4\7\5\3\5\7"+
    "\4\3\1\7\21\3\51\7\u0177\3\57\7\1\3\57\7"+
    "\1\3\205\7\6\3\4\7\3\0\2\7\14\3\46\7"+
    "\1\3\1\7\5\3\1\7\2\3\70\7\7\3\1\7"+
    "\17\3\1\0\27\7\11\3\7\7\1\3\7\7\1\3"+
    "\7\7\1\3\7\7\1\3\7\7\1\3\7\7\1\3"+
    "\7\7\1\3\7\7\1\3\40\0\57\3\1\7\325\3"+
    "\3\7\31\3\11\7\6\0\1\3\5\7\2\3\5\7"+
    "\4\3\126\7\2\3\2\0\2\3\3\7\1\3\132\7"+
    "\1\3\4\7\5\3\51\7\3\3\136\7\21\3\33\7"+
    "\65\3\306\7\112\3\315\7\63\3\215\7\103\3\56\7"+
    "\2\3\15\7\3\3\20\7\12\0\2\7\24\3\57\7"+
    "\1\0\4\3\12\0\1\3\31\7\7\3\1\0\120\7"+
    "\2\0\45\3\11\7\2\3\147\7\2\3\4\7\1\3"+
    "\4\7\14\3\13\7\115\3\12\7\1\0\3\7\1\0"+
    "\4\7\1\0\27\7\5\0\20\3\1\7\7\3\64\7"+
    "\14\3\2\0\62\7\21\0\13\3\12\0\6\3\22\0"+
    "\6\7\3\3\1\7\4\3\12\0\34\7\10\0\2\3"+
    "\27\7\15\0\14\3\35\7\3\3\4\0\57\7\16\0"+
    "\16\3\1\7\12\0\46\3\51\7\16\0\11\3\3\7"+
    "\1\0\10\7\2\0\2\3\12\0\6\3\27\7\3\3"+
    "\1\7\1\0\4\3\60\7\1\0\1\7\3\0\2\7"+
    "\2\0\5\7\2\0\1\7\1\0\1\7\30\3\3\7"+
    "\2\3\13\7\5\0\2\3\3\7\2\0\12\3\6\7"+
    "\2\3\6\7\2\3\6\7\11\3\7\7\1\3\7\7"+
    "\221\3\43\7\10\0\1\3\2\0\2\3\12\0\6\3"+
    "\244\7\14\3\27\7\4\3\61\7\4\3\156\7\2\3"+
    "\152\7\46\3\7\7\14\3\5\7\5\3\1\7\1\0"+
    "\12\7\1\3\15\7\1\3\5\7\1\3\1\7\1\3"+
    "\2\7\1\3\2\7\1\3\154\7\41\3\153\7\22\3"+
    "\100\7\2\3\66\7\50\3\15\7\3\3\20\0\20\3"+
    "\7\0\14\3\2\7\30\3\3\7\31\3\1\7\6\3"+
    "\5\7\1\3\207\7\2\3\1\0\4\3\1\7\13\3"+
    "\12\0\7\3\32\7\4\3\1\7\1\3\32\7\13\3"+
    "\131\7\3\3\6\7\2\3\6\7\2\3\6\7\2\3"+
    "\3\7\3\3\2\7\3\3\2\7\22\3\3\0\4\3"+
    "\14\7\1\3\32\7\1\3\23\7\1\3\2\7\1\3"+
    "\17\7\2\3\16\7\42\3\173\7\105\3\65\7\210\3"+
    "\1\0\202\3\35\7\3\3\61\7\57\3\37\7\21\3"+
    "\33\7\65\3\36\7\2\3\44\7\4\3\10\7\1\3"+
    "\5\7\52\3\236\7\2\3\12\0\126\3\6\7\2\3"+
    "\1\7\1\3\54\7\1\3\2\7\3\3\1\7\2\3"+
    "\27\7\252\3\26\7\12\3\32\7\106\3\70\7\6\3"+
    "\2\7\100\3\1\7\3\0\1\3\2\0\5\3\4\0"+
    "\4\7\1\3\3\7\1\3\33\7\4\3\3\0\4\3"+
    "\1\0\40\3\35\7\203\3\66\7\12\3\26\7\12\3"+
    "\23\7\215\3\111\7\267\3\3\0\65\7\17\0\37\3"+
    "\12\0\20\3\3\0\55\7\13\0\2\3\1\0\22\3"+
    "\31\7\7\3\12\0\6\3\3\0\44\7\16\0\1\3"+
    "\12\0\100\3\3\0\60\7\16\0\4\7\13\3\12\0"+
    "\246\3\53\7\15\0\10\3\12\0\66\3\157\7\221\3"+
    "\143\7\235\3\57\7\321\3\71\7\307\3\105\7\13\3"+
    "\1\7\56\0\20\3\4\0\15\7\140\3\2\7\u0163\3"+
    "\5\0\3\3\26\0\2\3\7\0\36\3\4\0\224\3"+
    "\3\0\273\3\125\7\1\3\107\7\1\3\2\7\2\3"+
    "\1\7\2\3\2\7\2\3\4\7\1\3\14\7\1\3"+
    "\1\7\1\3\7\7\1\3\101\7\1\3\4\7\2\3"+
    "\10\7\1\3\7\7\1\3\34\7\1\3\4\7\1\3"+
    "\5\7\1\3\1\7\3\3\7\7\1\3\u0154\7\2\3"+
    "\31\7\1\3\31\7\1\3\37\7\1\3\31\7\1\3"+
    "\37\7\1\3\31\7\1\3\37\7\1\3\31\7\1\3"+
    "\37\7\1\3\31\7\1\3\10\7\2\3\62\0\4\7"+
    "\1\3\33\7\1\3\2\7\1\3\1\7\2\3\1\7"+
    "\1\3\12\7\1\3\4\7\1\3\1\7\1\3\1\7"+
    "\6\3\1\7\4\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\3\7\1\3\2\7\1\3\1\7\2\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\2\7\1\3\1\7\2\3\4\7\1\3\7\7"+
    "\1\3\4\7\1\3\4\7\1\3\1\7\1\3\12\7"+
    "\1\3\21\7\5\3\3\7\1\3\5\7\1\3\21\7"+
    "\104\3\327\7\51\3\65\7\13\3\336\7\343\3\1\0"+
    "\36\3\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21248];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\2\3\1\1\1\4\1\5\3\1"+
    "\2\6\2\1\21\5\1\2\1\7\1\10\21\7\1\0"+
    "\1\3\1\5\1\11\47\5\1\11\45\7\2\0\20\5"+
    "\1\11\23\5\1\12\1\5\15\7\1\11\22\7\1\12"+
    "\1\7\1\0\1\3\3\5\1\11\1\13\25\5\1\13"+
    "\6\5\1\11\1\7\1\11\1\13\26\7\1\13\6\7"+
    "\1\11\2\5\1\11\26\5\1\11\26\7\1\5\2\11"+
    "\7\5\1\11\2\5\2\11\7\7\1\11\2\7\5\5"+
    "\6\7\2\5\2\7\2\5\2\7\1\5\1\7\1\5"+
    "\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\144\0\226\0\310\0\144\0\372"+
    "\0\144\0\u012c\0\u015e\0\144\0\u0190\0\u01c2\0\u01f4\0\u0226"+
    "\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6"+
    "\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546"+
    "\0\u0578\0\u05aa\0\144\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4"+
    "\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\372"+
    "\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2"+
    "\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42"+
    "\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2"+
    "\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u05aa"+
    "\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0"+
    "\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450"+
    "\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0"+
    "\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770"+
    "\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900"+
    "\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90"+
    "\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20"+
    "\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0"+
    "\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40"+
    "\0\u1f72\0\u1fa4\0\u1fd6\0\372\0\u2008\0\u203a\0\u206c\0\u209e"+
    "\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e"+
    "\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be"+
    "\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e"+
    "\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u05aa\0\u267a\0\u26ac"+
    "\0\u189c\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a"+
    "\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a"+
    "\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a"+
    "\0\u2b5c\0\u2b8e\0\u2bc0\0\372\0\u2bf2\0\u2c24\0\u2c56\0\u2c88"+
    "\0\u2cba\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18"+
    "\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8"+
    "\0\u2fda\0\u300c\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138"+
    "\0\u316a\0\u319c\0\u31ce\0\u3200\0\u05aa\0\u3232\0\u3264\0\u3296"+
    "\0\u32c8\0\u32fa\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426"+
    "\0\u3458\0\u348a\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u3584\0\u35b6"+
    "\0\u35e8\0\u361a\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746"+
    "\0\u3778\0\u37aa\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6"+
    "\0\u3908\0\u393a\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66"+
    "\0\u3a98\0\u3aca\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6"+
    "\0\u3c28\0\u3c5a\0\u3c8c\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54\0\u3d86"+
    "\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e\0\u3e80\0\u3eb2\0\u1edc\0\u3ee4"+
    "\0\u3f16\0\u3f48\0\u3f7a\0\u3fac\0\u3fde\0\u4010\0\u4042\0\u4074"+
    "\0\u40a6\0\u40d8\0\u05dc\0\u410a\0\u413c\0\u416e\0\u41a0\0\u41d2"+
    "\0\u4204\0\u4236\0\u4268\0\u429a\0\u42cc\0\u42fe\0\u4330\0\u4362"+
    "\0\u4394\0\u43c6\0\u43f8\0\u442a\0\u445c\0\u448e\0\u44c0\0\u44f2"+
    "\0\u4524\0\u4556\0\u4588\0\u45ba";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\6\1\13\1\14\10\15\1\16\1\6\1\17"+
    "\1\3\1\20\1\21\1\22\1\23\1\24\1\25\1\10"+
    "\1\26\1\27\2\10\1\30\2\10\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\10\1\40\1\10\1\41"+
    "\2\42\1\3\1\42\1\3\1\42\1\43\21\42\1\3"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\42\1\52"+
    "\1\53\2\42\1\54\2\42\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\42\1\64\2\42\64\0\1\4"+
    "\105\0\1\11\33\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\30\10\12\0\1\11\62\0\1\65\1\66\12\0"+
    "\1\11\47\0\11\15\62\0\2\11\61\0\2\11\32\0"+
    "\1\10\6\0\1\10\4\0\11\10\4\0\3\10\1\67"+
    "\14\10\1\70\7\10\1\0\1\10\6\0\1\10\4\0"+
    "\11\10\4\0\1\71\14\10\1\72\1\10\1\73\6\10"+
    "\1\74\1\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\1\75\14\10\1\76\12\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\1\77\3\10\1\100\10\10"+
    "\1\70\12\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\12\10\1\101\1\10\1\102\4\10\1\103\6\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\1\104"+
    "\7\10\1\105\4\10\1\106\1\10\1\107\2\10\1\110"+
    "\5\10\1\0\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\4\10\1\111\10\10\1\112\12\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\5\10\1\70\5\10\1\113"+
    "\1\114\13\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\1\115\7\10\1\116\4\10\1\117\12\10\1\0"+
    "\1\10\6\0\1\10\4\0\11\10\4\0\1\120\16\10"+
    "\1\121\2\10\1\122\5\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\4\10\1\123\23\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\4\10\1\124\10\10"+
    "\1\125\3\10\1\126\5\10\1\127\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\7\10\1\130\7\10\1\131"+
    "\10\10\1\0\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\5\10\1\132\2\10\1\133\17\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\1\106\7\10\1\134\17\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\4\10"+
    "\1\135\2\10\1\136\20\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\4\10\1\137\23\10\62\0\1\11"+
    "\2\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\33\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\20\42\1\140\12\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\15\42\1\141\1\42\1\142\6\42\1\143"+
    "\4\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\1\144\14\42\1\145\15\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\4\42\1\146\10\42\1\140\15\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\12\42"+
    "\1\147\1\42\1\150\4\42\1\151\11\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\1\152\7\42\1\153"+
    "\4\42\1\154\1\42\1\155\2\42\1\156\10\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\4\42\1\157"+
    "\10\42\1\160\15\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\5\42\1\140\5\42\1\161\1\162\16\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\1\163"+
    "\7\42\1\164\4\42\1\165\15\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\1\166\16\42\1\167\2\42"+
    "\1\170\10\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\4\42\1\171\26\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\4\42\1\172\10\42\1\173\3\42"+
    "\1\174\5\42\1\175\3\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\7\42\1\176\7\42\1\177\13\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\5\42"+
    "\1\200\2\42\1\201\22\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\1\154\7\42\1\202\22\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\4\42\1\203"+
    "\2\42\1\204\23\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\4\42\1\205\24\42\12\206\1\207\47\206"+
    "\2\66\1\4\1\66\1\5\55\66\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\3\10\1\210\24\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\12\10\1\211\15\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\15\10"+
    "\1\212\12\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\4\10\1\213\23\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\21\10\1\214\6\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\12\10\1\215\15\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\14\10"+
    "\1\216\13\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\26\10\1\217\1\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\12\10\1\220\15\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\20\10\1\221\7\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\22\10"+
    "\1\222\5\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\7\10\1\223\20\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\12\10\1\101\15\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\14\10\1\224\13\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\17\10"+
    "\1\70\10\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\15\10\1\222\12\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\14\10\1\225\13\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\25\10\1\70\2\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\22\10"+
    "\1\226\5\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\16\10\1\227\11\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\21\10\1\230\6\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\16\10\1\231\11\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\14\10"+
    "\1\232\13\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\3\10\1\233\24\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\26\10\1\234\1\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\1\235\7\10\1\236"+
    "\17\10\1\0\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\1\10\1\237\26\10\1\0\1\10\6\0\1\10\4\0"+
    "\11\10\4\0\21\10\1\240\6\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\2\10\1\241\11\10\1\242"+
    "\13\10\1\0\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\12\10\1\243\15\10\1\0\1\10\6\0\1\10\4\0"+
    "\11\10\4\0\17\10\1\244\10\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\1\245\27\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\10\10\1\246\17\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\1\247"+
    "\21\10\1\221\5\10\1\0\1\10\6\0\1\10\4\0"+
    "\11\10\4\0\10\10\1\250\17\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\14\10\1\251\13\10\1\0"+
    "\1\10\6\0\1\10\4\0\11\10\4\0\4\10\1\252"+
    "\23\10\1\0\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\4\10\1\253\3\10\1\254\17\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\10\10\1\255\17\10\1\0"+
    "\1\10\6\0\1\10\4\0\11\10\4\0\1\226\27\10"+
    "\1\0\2\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\15\42\1\256\15\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\4\42\1\257\26\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\21\42\1\260\11\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\12\42"+
    "\1\261\20\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\14\42\1\262\16\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\12\42\1\263\20\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\20\42\1\264\12\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\22\42"+
    "\1\265\10\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\7\42\1\266\23\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\12\42\1\147\20\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\14\42\1\267\16\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\17\42"+
    "\1\140\13\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\15\42\1\265\15\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\14\42\1\270\16\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\25\42\1\140\5\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\22\42"+
    "\1\271\10\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\16\42\1\272\14\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\21\42\1\273\11\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\16\42\1\274\14\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\14\42"+
    "\1\275\16\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\3\42\1\276\27\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\26\42\1\277\4\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\1\300\7\42\1\301"+
    "\22\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\1\42\1\302\31\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\21\42\1\303\11\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\2\42\1\304\11\42\1\305"+
    "\16\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\12\42\1\306\20\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\17\42\1\307\13\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\1\310\32\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\10\42\1\44\22\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\1\311"+
    "\21\42\1\264\10\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\10\42\1\312\22\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\14\42\1\313\16\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\4\42\1\314"+
    "\26\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\4\42\1\315\3\42\1\316\22\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\10\42\1\317\22\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\1\271\30\42"+
    "\12\206\1\320\61\206\1\320\1\321\46\206\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\17\10\1\322\10\10\1\0"+
    "\1\10\6\0\1\10\4\0\11\10\4\0\1\323\27\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\12\10"+
    "\1\70\15\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\1\324\27\10\1\0\1\10\6\0\1\10\4\0"+
    "\11\10\4\0\4\10\1\325\23\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\12\10\1\326\15\10\1\0"+
    "\1\10\6\0\1\10\4\0\11\10\4\0\20\10\1\327"+
    "\1\330\6\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\20\10\1\254\7\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\4\10\1\331\23\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\4\10\1\70\23\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\13\10"+
    "\1\70\14\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\4\10\1\332\23\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\14\10\1\333\13\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\2\10\1\334\25\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\17\10"+
    "\1\217\10\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\15\10\1\335\12\10\1\0\1\10\6\0\1\10"+
    "\4\0\1\10\1\336\1\337\1\340\2\10\1\341\1\10"+
    "\1\70\4\0\4\10\1\342\23\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\16\10\1\343\11\10\1\0"+
    "\1\10\6\0\1\10\4\0\11\10\4\0\22\10\1\344"+
    "\5\10\1\0\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\10\10\1\345\17\10\1\0\1\10\6\0\1\10\4\0"+
    "\11\10\4\0\1\346\27\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\6\10\1\347\21\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\23\10\1\350\4\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\12\10"+
    "\1\351\15\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\22\10\1\352\5\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\15\10\1\353\12\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\3\10\1\354\24\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\10\10"+
    "\1\355\17\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\10\10\1\356\11\10\1\357\5\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\1\10\1\360\26\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\20\10"+
    "\1\70\7\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\14\10\1\361\13\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\25\10\1\362\2\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\21\10\1\363\6\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\24\10"+
    "\1\70\3\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\11\10\1\217\16\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\12\10\1\221\15\10\1\0\2\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\12\42"+
    "\1\140\20\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\1\364\32\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\4\42\1\365\26\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\12\42\1\366\20\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\20\42\1\367"+
    "\1\370\11\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\4\42\1\371\26\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\4\42\1\140\26\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\13\42\1\140\17\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\4\42"+
    "\1\372\26\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\14\42\1\373\16\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\2\42\1\374\30\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\17\42\1\375\13\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\15\42"+
    "\1\376\15\42\1\0\1\42\1\0\1\42\1\0\6\42"+
    "\1\377\1\u0100\1\u0101\2\42\1\u0102\1\42\1\140\3\42"+
    "\1\0\4\42\1\u0103\26\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\16\42\1\u0104\14\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\22\42\1\u0105\10\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\10\42"+
    "\1\u0106\22\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\1\u0107\32\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\6\42\1\u0108\24\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\23\42\1\u0109\7\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\12\42\1\u010a"+
    "\20\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\22\42\1\u010b\10\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\15\42\1\u010c\15\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\3\42\1\u010d\27\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\10\42\1\u010e"+
    "\22\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\10\42\1\u010f\11\42\1\u0110\10\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\1\42\1\u0111\31\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\14\42\1\u0112"+
    "\16\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\25\42\1\u0113\5\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\21\42\1\u0114\11\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\24\42\1\140\6\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\11\42\1\375"+
    "\21\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\12\42\1\264\16\42\12\206\1\320\1\4\46\206\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\4\10\1\u0115\23\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\14\10"+
    "\1\u0116\13\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\11\10\1\70\16\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\20\10\1\u0117\7\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\2\10\1\u0118\25\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\21\10"+
    "\1\u0119\6\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\10\10\1\u011a\6\10\1\u011b\10\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\6\10\1\u011c\12\10"+
    "\1\221\6\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\17\10\1\254\10\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\4\10\1\u011d\23\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\21\10\1\u011e\6\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\17\10"+
    "\1\u011f\10\10\1\0\1\10\6\0\1\10\4\0\2\10"+
    "\1\u0120\3\10\1\70\2\10\4\0\30\10\1\0\1\10"+
    "\6\0\1\10\4\0\5\10\1\u0121\3\10\4\0\30\10"+
    "\1\0\1\10\6\0\1\10\4\0\2\10\1\70\6\10"+
    "\4\0\30\10\1\0\1\10\6\0\1\10\4\0\4\10"+
    "\1\70\4\10\4\0\30\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\17\10\1\u0122\10\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\10\10\1\356\17\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\21\10"+
    "\1\u0123\6\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\5\10\1\u0124\22\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\1\10\1\255\26\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\13\10\1\u0125\14\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\1\u0126"+
    "\27\10\1\0\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\10\10\1\u0127\17\10\1\0\1\10\6\0\1\10\4\0"+
    "\11\10\4\0\17\10\1\u0128\10\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\14\10\1\u0129\13\10\1\0"+
    "\1\10\6\0\1\10\4\0\11\10\4\0\3\10\1\u012a"+
    "\24\10\1\0\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\14\10\1\u012b\13\10\1\0\1\10\6\0\1\10\4\0"+
    "\11\10\4\0\2\10\1\u011f\25\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\15\10\1\254\12\10\1\0"+
    "\1\10\6\0\1\10\4\0\11\10\4\0\20\10\1\u012c"+
    "\7\10\1\0\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\4\10\1\u012d\23\10\1\0\1\10\6\0\1\10\4\0"+
    "\1\10\1\336\1\337\1\340\2\10\1\341\1\10\1\70"+
    "\4\0\30\10\1\0\2\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\11\42\1\140\21\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\20\42\1\u012e\12\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\2\42"+
    "\1\u012f\30\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\21\42\1\u0130\11\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\10\42\1\u0131\6\42\1\u0132\13\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\6\42"+
    "\1\u0133\12\42\1\264\11\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\17\42\1\316\13\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\4\42\1\u0134\26\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\21\42"+
    "\1\u0135\11\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\20\42\1\316\12\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\17\42\1\u0136\13\42\1\0\1\42"+
    "\1\0\1\42\1\0\7\42\1\u0137\3\42\1\140\5\42"+
    "\1\0\33\42\1\0\1\42\1\0\1\42\1\0\12\42"+
    "\1\u0138\6\42\1\0\33\42\1\0\1\42\1\0\1\42"+
    "\1\0\7\42\1\140\11\42\1\0\33\42\1\0\1\42"+
    "\1\0\1\42\1\0\11\42\1\140\7\42\1\0\33\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\17\42"+
    "\1\u0139\13\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\10\42\1\u010f\22\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\21\42\1\u013a\11\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\5\42\1\u013b\25\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\1\42"+
    "\1\317\31\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\13\42\1\u013c\17\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\1\u013d\32\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\10\42\1\u013e\22\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\17\42\1\u013f"+
    "\13\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\14\42\1\u0140\16\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\3\42\1\u0141\27\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\14\42\1\u0142\16\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\2\42\1\u0136"+
    "\30\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\15\42\1\316\15\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\20\42\1\u0143\12\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\4\42\1\u0144\26\42\1\0"+
    "\1\42\1\0\1\42\1\0\6\42\1\377\1\u0100\1\u0101"+
    "\2\42\1\u0102\1\42\1\140\3\42\1\0\31\42\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\20\10\1\246\7\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\2\10"+
    "\1\u0145\25\10\1\0\1\10\6\0\1\10\4\0\1\10"+
    "\2\u0146\1\u0147\5\70\4\0\30\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\15\10\1\u0148\12\10\1\0"+
    "\1\10\6\0\1\10\4\0\11\10\4\0\17\10\1\u0149"+
    "\10\10\1\0\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\14\10\1\u014a\13\10\1\0\1\10\6\0\1\10\4\0"+
    "\11\10\4\0\1\357\27\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\1\u014b\27\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\26\10\1\254\1\10\1\0"+
    "\1\10\6\0\1\10\4\0\11\10\4\0\10\10\1\u014c"+
    "\17\10\1\0\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\21\10\1\70\6\10\1\0\1\10\6\0\1\10\4\0"+
    "\10\10\1\70\4\0\30\10\1\0\1\10\6\0\1\10"+
    "\4\0\6\10\1\70\2\10\4\0\30\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\14\10\1\u014d\13\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\4\10"+
    "\1\217\23\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\10\10\1\u014e\17\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\1\70\27\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\21\10\1\221\6\10\1\0"+
    "\1\10\6\0\1\10\4\0\11\10\4\0\2\10\1\70"+
    "\25\10\1\0\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\14\10\1\u014f\13\10\1\0\1\10\6\0\1\10\4\0"+
    "\11\10\4\0\3\10\1\217\24\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\10\10\1\u0150\17\10\1\0"+
    "\1\10\6\0\1\10\4\0\11\10\4\0\6\10\1\70"+
    "\21\10\1\0\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\5\10\1\u0151\22\10\1\0\1\10\6\0\1\10\4\0"+
    "\11\10\4\0\3\10\1\70\24\10\1\0\2\42\1\0"+
    "\1\42\1\0\1\42\1\0\6\42\2\u0152\1\u0153\5\140"+
    "\3\42\1\0\33\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\15\42\1\u0154\15\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\17\42\1\u0155\13\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\14\42\1\u0156"+
    "\16\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\1\u0110\32\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\1\u0157\32\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\26\42\1\316\4\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\10\42\1\u0158\22\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\21\42\1\140"+
    "\11\42\1\0\1\42\1\0\1\42\1\0\15\42\1\140"+
    "\3\42\1\0\33\42\1\0\1\42\1\0\1\42\1\0"+
    "\13\42\1\140\5\42\1\0\33\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\14\42\1\u0159\16\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\4\42\1\375"+
    "\26\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\10\42\1\u015a\22\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\1\140\32\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\21\42\1\264\11\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\2\42\1\140\30\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\14\42"+
    "\1\u015b\16\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\3\42\1\375\27\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\10\42\1\u015c\22\42\1\0\1\42"+
    "\1\0\1\42\1\0\21\42\1\0\6\42\1\140\24\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\5\42"+
    "\1\u015d\25\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\3\42\1\140\25\42\1\10\6\0\1\10\4\0"+
    "\11\10\4\0\4\10\1\354\23\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\70\4\0\30\10\1\0\1\10\6\0"+
    "\1\10\4\0\3\70\6\10\4\0\30\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\3\10\1\u0145\24\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\22\10"+
    "\1\u015e\5\10\1\0\1\10\6\0\1\10\4\0\11\10"+
    "\4\0\22\10\1\221\5\10\1\0\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\21\10\1\u015f\6\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\15\10\1\u0160\12\10"+
    "\1\0\1\10\6\0\1\10\4\0\11\10\4\0\1\212"+
    "\27\10\1\0\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\4\10\1\106\23\10\1\0\1\10\6\0\1\10\4\0"+
    "\11\10\4\0\21\10\1\u0161\6\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\4\10\1\u0162\23\10\1\0"+
    "\2\42\1\0\1\42\1\0\1\42\1\0\5\42\11\140"+
    "\3\42\1\0\33\42\1\0\1\42\1\0\1\42\1\0"+
    "\5\42\3\140\11\42\1\0\33\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\3\42\1\u0163\27\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\22\42\1\u0164"+
    "\10\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\22\42\1\264\10\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\21\42\1\u0165\11\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\15\42\1\u0166\15\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\1\256\32\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\4\42"+
    "\1\154\26\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\21\42\1\u0167\11\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\4\42\1\u0168\24\42\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\2\10\1\u0169\25\10\1\0"+
    "\1\10\6\0\1\10\4\0\11\10\4\0\4\10\1\u016a"+
    "\23\10\1\0\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\14\10\1\70\13\10\1\0\1\10\6\0\1\10\4\0"+
    "\11\10\4\0\26\10\1\70\1\10\1\0\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\17\10\1\354\10\10\1\0"+
    "\2\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\4\42\1\u010d\26\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\2\42\1\u016b\30\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\4\42\1\u016c\26\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\14\42\1\140"+
    "\16\42\1\0\1\42\1\0\1\42\1\0\21\42\1\0"+
    "\26\42\1\140\4\42\1\0\1\42\1\0\1\42\1\0"+
    "\21\42\1\0\17\42\1\u010d\11\42\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\21\10\1\u016d\6\10\1\0\1\10"+
    "\6\0\1\10\4\0\11\10\4\0\2\10\1\u016e\25\10"+
    "\1\0\2\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\21\42\1\u016f\11\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\2\42\1\u0170\26\42\1\10\6\0"+
    "\1\10\4\0\11\10\4\0\15\10\1\106\12\10\1\0"+
    "\1\10\6\0\1\10\4\0\11\10\4\0\1\u0171\27\10"+
    "\1\0\2\42\1\0\1\42\1\0\1\42\1\0\21\42"+
    "\1\0\15\42\1\154\15\42\1\0\1\42\1\0\1\42"+
    "\1\0\21\42\1\0\1\u0172\30\42\1\10\6\0\1\10"+
    "\4\0\11\10\4\0\12\10\1\u0173\15\10\1\0\2\42"+
    "\1\0\1\42\1\0\1\42\1\0\21\42\1\0\12\42"+
    "\1\u0174\16\42\1\10\6\0\1\10\4\0\11\10\4\0"+
    "\12\10\1\354\15\10\1\0\2\42\1\0\1\42\1\0"+
    "\1\42\1\0\21\42\1\0\12\42\1\u010d\16\42";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\2\11\2\1\1\11\1\1\1\11\2\1"+
    "\1\11\26\1\1\11\21\1\1\0\120\1\2\0\110\1"+
    "\1\0\244\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[372];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    public static ArrayList<Token> tokens = new ArrayList<>();  
  public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  
  public static ArrayList<Token> errores = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   for(Token t: tokens){
    t.print();
  }

  System.out.println("\nErrores\n");
  for(Token t: errores){
    t.print();
  }
  return 0;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 12: break;
          case 2:
            { throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 13: break;
          case 3:
            { /* ignore */
            }
            // fall through
          case 14: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 15: break;
          case 5:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Identificador"));
            }
            // fall through
          case 16: break;
          case 6:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Literal numerico"));
            }
            // fall through
          case 17: break;
          case 7:
            { string.append( yytext() );
            }
            // fall through
          case 18: break;
          case 8:
            { yybegin(YYINITIAL);
                                    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 19: break;
          case 9:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Parabra reservada"));
            }
            // fall through
          case 20: break;
          case 10:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 21: break;
          case 11:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 22: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
