// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

/* JFlex example: partial Java language lexer specification */
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int hexaState = 4;
  public static final int numberState = 6;
  public static final int NaturalNumbers = 8;
  public static final int Chars = 10;
  public static final int Comments = 12;
  public static final int lineComment = 14;
  public static final int indetifierState = 16;
  public static final int indetifierError = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\3\u1f00"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\3\u1f00\1\u3f00\1\u4000"+
    "\4\u1f00\1\u4100\11\u1f00\3\u0100\1\u4200\1\u4300\13\u1f00\4\u0100"+
    "\1\u4400\63\u1f00\2\u0100\1\u4500\4\u1f00\1\u4600\100\u1f00\1\u4700"+
    "\40\u1f00\1\u4800\1\u4900\1\u1f00\1\u4a00\1\u4b00\1\u4c00\1\u4d00"+
    "\26\u1f00\1\u4e00\21\u1f00\246\u0100\1\u4f00\20\u0100\1\u5000\1\u5100"+
    "\77\u1f00\2\u0100\1\u5100\u0b05\u1f00\1\u5200\1\u5300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\7\1\10\1\11\1\6\1\12\1\13\1\14\1\15"+
    "\2\13\1\16\1\10\1\13\1\10\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\30\2\13\1\32\1\33\1\34\1\13\1\6\6\35"+
    "\7\12\1\36\14\12\1\13\1\37\2\13\1\12\1\6"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\12\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\12\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\13\1\70\2\13\6\0\1\71\32\0"+
    "\2\6\4\12\4\6\1\12\2\6\1\0\7\6\1\12"+
    "\4\6\1\12\5\6\27\12\1\6\37\12\1\6\u01ca\12"+
    "\4\6\14\12\16\6\5\12\7\6\1\12\1\6\1\12"+
    "\21\6\160\0\5\12\1\6\2\12\2\6\4\12\10\6"+
    "\1\12\1\6\3\12\1\6\1\12\1\6\24\12\1\6"+
    "\123\12\1\6\213\12\1\6\5\0\2\6\236\12\11\6"+
    "\46\12\2\6\1\12\7\6\47\12\7\6\1\12\1\6"+
    "\55\0\1\6\1\0\1\6\2\0\1\6\2\0\1\6"+
    "\1\0\10\6\33\12\5\6\3\12\15\6\5\0\6\6"+
    "\1\12\4\6\13\0\5\6\53\12\37\0\4\6\2\12"+
    "\1\0\143\12\1\6\1\12\10\0\1\6\6\0\2\12"+
    "\2\0\1\6\4\0\2\12\12\0\3\12\2\6\1\12"+
    "\17\6\1\0\1\12\1\0\36\12\33\0\2\6\131\12"+
    "\13\0\1\12\16\6\12\0\41\12\11\0\2\12\4\6"+
    "\1\12\5\6\26\12\4\0\1\12\11\0\1\12\3\0"+
    "\1\12\5\0\22\6\31\12\3\0\104\6\1\12\1\6"+
    "\13\12\67\6\33\0\1\6\4\0\66\12\3\0\1\12"+
    "\22\0\1\12\7\0\12\12\2\0\2\6\12\0\1\6"+
    "\7\12\1\6\7\12\1\6\3\0\1\6\10\12\2\6"+
    "\2\12\2\6\26\12\1\6\7\12\1\6\1\12\3\6"+
    "\4\12\2\6\1\0\1\12\7\0\2\6\2\0\2\6"+
    "\3\0\1\12\10\6\1\0\4\6\2\12\1\6\3\12"+
    "\2\0\2\6\12\0\4\12\7\6\1\12\5\6\3\0"+
    "\1\6\6\12\4\6\2\12\2\6\26\12\1\6\7\12"+
    "\1\6\2\12\1\6\2\12\1\6\2\12\2\6\1\0"+
    "\1\6\5\0\4\6\2\0\2\6\3\0\3\6\1\0"+
    "\7\6\4\12\1\6\1\12\7\6\14\0\3\12\1\0"+
    "\13\6\3\0\1\6\11\12\1\6\3\12\1\6\26\12"+
    "\1\6\7\12\1\6\2\12\1\6\5\12\2\6\1\0"+
    "\1\12\10\0\1\6\3\0\1\6\3\0\2\6\1\12"+
    "\17\6\2\12\2\0\2\6\12\0\1\6\1\12\17\6"+
    "\3\0\1\6\10\12\2\6\2\12\2\6\26\12\1\6"+
    "\7\12\1\6\2\12\1\6\5\12\2\6\1\0\1\12"+
    "\7\0\2\6\2\0\2\6\3\0\10\6\2\0\4\6"+
    "\2\12\1\6\3\12\2\0\2\6\12\0\1\6\1\12"+
    "\20\6\1\0\1\12\1\6\6\12\3\6\3\12\1\6"+
    "\4\12\3\6\2\12\1\6\1\12\1\6\2\12\3\6"+
    "\2\12\3\6\3\12\3\6\14\12\4\6\5\0\3\6"+
    "\3\0\1\6\4\0\2\6\1\12\6\6\1\0\16\6"+
    "\12\0\11\6\1\12\7\6\3\0\1\6\10\12\1\6"+
    "\3\12\1\6\27\12\1\6\12\12\1\6\5\12\3\6"+
    "\1\12\7\0\1\6\3\0\1\6\4\0\7\6\2\0"+
    "\1\6\2\12\6\6\2\12\2\0\2\6\12\0\22\6"+
    "\2\0\1\6\10\12\1\6\3\12\1\6\27\12\1\6"+
    "\12\12\1\6\5\12\2\6\1\0\1\12\7\0\1\6"+
    "\3\0\1\6\4\0\7\6\2\0\7\6\1\12\1\6"+
    "\2\12\2\0\2\6\12\0\1\6\2\12\17\6\2\0"+
    "\1\6\10\12\1\6\3\12\1\6\51\12\2\6\1\12"+
    "\7\0\1\6\3\0\1\6\4\0\1\12\10\6\1\0"+
    "\10\6\2\12\2\0\2\6\12\0\12\6\6\12\2\6"+
    "\2\0\1\6\22\12\3\6\30\12\1\6\11\12\1\6"+
    "\1\12\2\6\7\12\3\6\1\0\4\6\6\0\1\6"+
    "\1\0\1\6\10\0\22\6\2\0\15\6\60\12\1\0"+
    "\2\12\7\0\4\6\10\12\10\0\1\6\12\0\47\6"+
    "\2\12\1\6\1\12\2\6\2\12\1\6\1\12\2\6"+
    "\1\12\6\6\4\12\1\6\7\12\1\6\3\12\1\6"+
    "\1\12\1\6\1\12\2\6\2\12\1\6\4\12\1\0"+
    "\2\12\6\0\1\6\2\0\1\12\2\6\5\12\1\6"+
    "\1\12\1\6\6\0\2\6\12\0\2\6\4\12\40\6"+
    "\1\12\27\6\2\0\6\6\12\0\13\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\2\0\10\12\1\6\44\12"+
    "\4\6\24\0\1\6\2\0\5\12\13\0\1\6\44\0"+
    "\11\6\1\0\71\6\53\12\24\0\1\12\12\0\6\6"+
    "\6\12\4\0\4\12\3\0\1\12\3\0\2\12\7\0"+
    "\3\12\4\0\15\12\14\0\1\12\17\0\2\6\46\12"+
    "\1\6\1\12\5\6\1\12\2\6\53\12\1\6\115\12"+
    "\1\6\4\12\2\6\7\12\1\6\1\12\1\6\4\12"+
    "\2\6\51\12\1\6\4\12\2\6\41\12\1\6\4\12"+
    "\2\6\7\12\1\6\1\12\1\6\4\12\2\6\17\12"+
    "\1\6\71\12\1\6\4\12\2\6\103\12\2\6\3\0"+
    "\40\6\20\12\20\6\125\12\14\6\u016c\12\2\6\21\12"+
    "\1\6\32\12\5\6\113\12\3\6\3\12\17\6\15\12"+
    "\1\6\4\12\3\0\13\6\22\12\3\0\13\6\22\12"+
    "\2\0\14\6\15\12\1\6\3\12\1\6\2\0\14\6"+
    "\64\12\40\0\3\6\1\12\3\6\2\12\1\0\2\6"+
    "\12\0\41\6\3\0\2\6\12\0\6\6\130\12\10\6"+
    "\51\12\1\0\1\12\5\6\106\12\12\6\35\12\3\6"+
    "\14\0\4\6\14\0\12\6\12\0\36\12\2\6\5\12"+
    "\13\6\54\12\4\6\21\0\7\12\2\0\6\6\12\0"+
    "\46\6\27\12\5\0\4\6\65\12\12\0\1\6\35\0"+
    "\2\6\13\0\6\6\12\0\15\6\1\12\130\6\5\0"+
    "\57\12\21\0\7\12\4\6\12\0\21\6\11\0\14\6"+
    "\3\0\36\12\15\0\2\12\12\0\54\12\16\0\14\6"+
    "\44\12\24\0\10\6\12\0\3\6\3\12\12\0\44\12"+
    "\122\6\3\0\1\6\25\0\4\12\1\0\4\12\3\0"+
    "\2\12\11\6\300\12\47\0\25\6\4\0\26\12\2\6"+
    "\6\12\2\6\46\12\2\6\6\12\2\6\10\12\1\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\37\12\2\6"+
    "\65\12\1\6\7\12\1\6\1\12\3\6\3\12\1\6"+
    "\7\12\3\6\4\12\2\6\6\12\4\6\15\12\5\6"+
    "\3\12\1\6\7\12\16\6\5\0\30\6\2\3\5\0"+
    "\20\6\2\12\23\6\1\12\13\6\5\0\5\6\6\0"+
    "\1\6\1\12\15\6\1\12\20\6\15\12\3\6\33\12"+
    "\25\6\15\0\4\6\1\0\3\6\14\0\21\6\1\12"+
    "\4\6\1\12\2\6\12\12\1\6\1\12\3\6\5\12"+
    "\6\6\1\12\1\6\1\12\1\6\1\12\1\6\4\12"+
    "\1\6\13\12\2\6\4\12\5\6\5\12\4\6\1\12"+
    "\21\6\51\12\u0177\6\57\12\1\6\57\12\1\6\205\12"+
    "\6\6\4\12\3\0\2\12\14\6\46\12\1\6\1\12"+
    "\5\6\1\12\2\6\70\12\7\6\1\12\17\6\1\0"+
    "\27\12\11\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\40\0\57\6\1\12\325\6\3\12\31\6"+
    "\11\12\6\0\1\6\5\12\2\6\5\12\4\6\126\12"+
    "\2\6\2\0\2\6\3\12\1\6\132\12\1\6\4\12"+
    "\5\6\51\12\3\6\136\12\21\6\33\12\65\6\306\12"+
    "\112\6\315\12\63\6\215\12\103\6\56\12\2\6\15\12"+
    "\3\6\20\12\12\0\2\12\24\6\57\12\1\0\4\6"+
    "\12\0\1\6\31\12\7\6\1\0\120\12\2\0\45\6"+
    "\11\12\2\6\147\12\2\6\4\12\1\6\4\12\14\6"+
    "\13\12\115\6\12\12\1\0\3\12\1\0\4\12\1\0"+
    "\27\12\5\0\20\6\1\12\7\6\64\12\14\6\2\0"+
    "\62\12\21\0\13\6\12\0\6\6\22\0\6\12\3\6"+
    "\1\12\4\6\12\0\34\12\10\0\2\6\27\12\15\0"+
    "\14\6\35\12\3\6\4\0\57\12\16\0\16\6\1\12"+
    "\12\0\46\6\51\12\16\0\11\6\3\12\1\0\10\12"+
    "\2\0\2\6\12\0\6\6\27\12\3\6\1\12\1\0"+
    "\4\6\60\12\1\0\1\12\3\0\2\12\2\0\5\12"+
    "\2\0\1\12\1\0\1\12\30\6\3\12\2\6\13\12"+
    "\5\0\2\6\3\12\2\0\12\6\6\12\2\6\6\12"+
    "\2\6\6\12\11\6\7\12\1\6\7\12\221\6\43\12"+
    "\10\0\1\6\2\0\2\6\12\0\6\6\244\12\14\6"+
    "\27\12\4\6\61\12\4\6\u0100\3\156\12\2\6\152\12"+
    "\46\6\7\12\14\6\5\12\5\6\1\12\1\0\12\12"+
    "\1\6\15\12\1\6\5\12\1\6\1\12\1\6\2\12"+
    "\1\6\2\12\1\6\154\12\41\6\153\12\22\6\100\12"+
    "\2\6\66\12\50\6\15\12\3\6\20\0\20\6\7\0"+
    "\14\6\2\12\30\6\3\12\31\6\1\12\6\6\5\12"+
    "\1\6\207\12\2\6\1\0\4\6\1\12\13\6\12\0"+
    "\7\6\32\12\4\6\1\12\1\6\32\12\13\6\131\12"+
    "\3\6\6\12\2\6\6\12\2\6\6\12\2\6\3\12"+
    "\3\6\2\12\3\6\2\12\22\6\3\0\4\6\14\12"+
    "\1\6\32\12\1\6\23\12\1\6\2\12\1\6\17\12"+
    "\2\6\16\12\42\6\173\12\105\6\65\12\210\6\1\0"+
    "\202\6\35\12\3\6\61\12\57\6\37\12\21\6\33\12"+
    "\65\6\36\12\2\6\44\12\4\6\10\12\1\6\5\12"+
    "\52\6\236\12\2\6\12\0\126\6\6\12\2\6\1\12"+
    "\1\6\54\12\1\6\2\12\3\6\1\12\2\6\27\12"+
    "\252\6\26\12\12\6\32\12\106\6\70\12\6\6\2\12"+
    "\100\6\1\12\3\0\1\6\2\0\5\6\4\0\4\12"+
    "\1\6\3\12\1\6\33\12\4\6\3\0\4\6\1\0"+
    "\40\6\35\12\203\6\66\12\12\6\26\12\12\6\23\12"+
    "\215\6\111\12\267\6\3\0\65\12\17\0\37\6\12\0"+
    "\20\6\3\0\55\12\13\0\2\6\1\0\22\6\31\12"+
    "\7\6\12\0\6\6\3\0\44\12\16\0\1\6\12\0"+
    "\100\6\3\0\60\12\16\0\4\12\13\6\12\0\246\6"+
    "\53\12\15\0\10\6\12\0\66\6\157\12\221\6\143\12"+
    "\235\6\57\12\321\6\71\12\307\6\105\12\13\6\1\12"+
    "\56\0\20\6\4\0\15\12\140\6\2\12\u0163\6\5\0"+
    "\3\6\26\0\2\6\7\0\36\6\4\0\224\6\3\0"+
    "\273\6\125\12\1\6\107\12\1\6\2\12\2\6\1\12"+
    "\2\6\2\12\2\6\4\12\1\6\14\12\1\6\1\12"+
    "\1\6\7\12\1\6\101\12\1\6\4\12\2\6\10\12"+
    "\1\6\7\12\1\6\34\12\1\6\4\12\1\6\5\12"+
    "\1\6\1\12\3\6\7\12\1\6\u0154\12\2\6\31\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\10\12\2\6\62\0\4\12\1\6"+
    "\33\12\1\6\2\12\1\6\1\12\2\6\1\12\1\6"+
    "\12\12\1\6\4\12\1\6\1\12\1\6\1\12\6\6"+
    "\1\12\4\6\1\12\1\6\1\12\1\6\1\12\1\6"+
    "\3\12\1\6\2\12\1\6\1\12\2\6\1\12\1\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\1\12\1\6"+
    "\2\12\1\6\1\12\2\6\4\12\1\6\7\12\1\6"+
    "\4\12\1\6\4\12\1\6\1\12\1\6\12\12\1\6"+
    "\21\12\5\6\3\12\1\6\5\12\1\6\21\12\104\6"+
    "\327\12\51\6\65\12\13\6\336\12\343\6\1\0\36\6"+
    "\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21504];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\6\0\1\2\2\0\1\3\2\4\1\5\1\6"+
    "\3\5\1\7\1\10\1\5\1\11\23\5\1\3\1\12"+
    "\1\13\1\3\15\12\1\14\2\12\15\3\4\15\2\16"+
    "\2\15\1\17\1\3\1\12\1\20\15\12\1\3\2\21"+
    "\16\3\1\2\2\22\15\2\1\23\5\1\16\16\1\24"+
    "\1\25\1\26\1\1\1\5\1\27\47\5\1\12\2\0"+
    "\2\12\1\27\26\12\2\0\1\27\26\0\2\12\1\27"+
    "\26\12\2\0\2\2\1\30\2\0\1\27\26\0\2\2"+
    "\1\27\26\2\1\0\21\5\1\27\23\5\1\31\1\5"+
    "\2\0\6\12\1\27\16\12\6\0\1\27\16\0\6\12"+
    "\1\27\16\12\6\0\1\27\16\0\6\2\1\27\16\2"+
    "\1\0\3\5\1\27\1\32\6\5\1\33\17\5\1\32"+
    "\6\5\1\27\25\12\1\27\25\0\1\27\25\12\1\27"+
    "\25\0\1\27\25\2\1\27\2\5\1\27\26\5\17\12"+
    "\17\0\17\12\17\0\17\2\1\5\2\27\7\5\1\27"+
    "\2\5\4\12\1\27\1\12\4\0\1\27\1\0\4\12"+
    "\1\27\1\12\4\0\1\27\1\0\4\2\1\27\1\2"+
    "\5\5\4\12\4\0\4\12\4\0\4\2\2\5\1\12"+
    "\1\0\1\12\1\0\1\2\2\5\1\12\1\0\1\12"+
    "\1\0\1\2\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[807];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u0244\0\u027e\0\u02b8\0\u0244\0\u02f2"+
    "\0\u0244\0\u032c\0\u0244\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee"+
    "\0\u0828\0\u0862\0\u089c\0\u0244\0\u08d6\0\u0910\0\u094a\0\u0984"+
    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0244\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea"+
    "\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba"+
    "\0\u0ef4\0\u0f2e\0\u0244\0\u0f68\0\u0fa2\0\u0fdc\0\u0244\0\u1016"+
    "\0\u1050\0\u108a\0\u0cea\0\u10c4\0\u10fe\0\u0244\0\u1138\0\u1172"+
    "\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342"+
    "\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u0244\0\u1464\0\u149e\0\u14d8"+
    "\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8"+
    "\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u0244\0\u1804\0\u183e"+
    "\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e"+
    "\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u0244\0\u0244\0\u1b30\0\u1b6a"+
    "\0\u1ba4\0\u1bde\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u1c18"+
    "\0\u0244\0\u0244\0\u0244\0\u1c52\0\u1c8c\0\u02f2\0\u1cc6\0\u1d00"+
    "\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0"+
    "\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0"+
    "\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270"+
    "\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440"+
    "\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u0244\0\u259c\0\u25d6"+
    "\0\u2610\0\u264a\0\u089c\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c"+
    "\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c"+
    "\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c"+
    "\0\u2b46\0\u2b80\0\u2bba\0\u0244\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2"+
    "\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72"+
    "\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\u3042"+
    "\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u10fe\0\u3164\0\u319e\0\u31d8"+
    "\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e\0\u33a8"+
    "\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504\0\u353e\0\u3578"+
    "\0\u35b2\0\u35ec\0\u3626\0\u142a\0\u3660\0\u0244\0\u369a\0\u3660"+
    "\0\u36d4\0\u370e\0\u142a\0\u3748\0\u3782\0\u37bc\0\u37f6\0\u3830"+
    "\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\u3a00"+
    "\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0"+
    "\0\u3c0a\0\u3c44\0\u3c7e\0\u17ca\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66"+
    "\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36"+
    "\0\u3f70\0\u3faa\0\u3fe4\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106"+
    "\0\u4140\0\u417a\0\u41b4\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6"+
    "\0\u4310\0\u434a\0\u4384\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6"+
    "\0\u44e0\0\u451a\0\u4554\0\u458e\0\u45c8\0\u4602\0\u463c\0\u4676"+
    "\0\u46b0\0\u46ea\0\u4724\0\u475e\0\u4798\0\u47d2\0\u480c\0\u4846"+
    "\0\u4880\0\u48ba\0\u48f4\0\u492e\0\u4968\0\u49a2\0\u49dc\0\u4a16"+
    "\0\u02f2\0\u4a50\0\u4a8a\0\u4ac4\0\u4afe\0\u4b38\0\u4b72\0\u4bac"+
    "\0\u4be6\0\u4c20\0\u4c5a\0\u4c94\0\u4cce\0\u4d08\0\u4d42\0\u4d7c"+
    "\0\u4db6\0\u4df0\0\u4e2a\0\u4e64\0\u4e9e\0\u4ed8\0\u4f12\0\u4f4c"+
    "\0\u4f86\0\u4fc0\0\u4ffa\0\u5034\0\u506e\0\u50a8\0\u50e2\0\u511c"+
    "\0\u5156\0\u5190\0\u51ca\0\u5204\0\u523e\0\u5278\0\u52b2\0\u52ec"+
    "\0\u5326\0\u5360\0\u539a\0\u53d4\0\u540e\0\u5448\0\u5482\0\u54bc"+
    "\0\u54f6\0\u5530\0\u556a\0\u55a4\0\u55de\0\u5618\0\u5652\0\u568c"+
    "\0\u56c6\0\u5700\0\u573a\0\u5774\0\u57ae\0\u57e8\0\u5822\0\u585c"+
    "\0\u5896\0\u58d0\0\u590a\0\u5944\0\u597e\0\u59b8\0\u59f2\0\u5a2c"+
    "\0\u5a66\0\u5aa0\0\u5ada\0\u5b14\0\u5b4e\0\u5b88\0\u5bc2\0\u5bfc"+
    "\0\u5c36\0\u5c70\0\u5caa\0\u5ce4\0\u5d1e\0\u5d58\0\u5d92\0\u5dcc"+
    "\0\u5e06\0\u5e40\0\u5e7a\0\u5eb4\0\u5eee\0\u5f28\0\u5f62\0\u5f9c"+
    "\0\u5fd6\0\u6010\0\u604a\0\u6084\0\u60be\0\u60f8\0\u6132\0\u616c"+
    "\0\u61a6\0\u61e0\0\u621a\0\u6254\0\u628e\0\u62c8\0\u6302\0\u633c"+
    "\0\u6376\0\u63b0\0\u63ea\0\u6424\0\u645e\0\u6498\0\u64d2\0\u650c"+
    "\0\u6546\0\u0244\0\u6580\0\u65ba\0\u65f4\0\u662e\0\u6668\0\u66a2"+
    "\0\u66dc\0\u6716\0\u6750\0\u678a\0\u67c4\0\u67fe\0\u6838\0\u6872"+
    "\0\u68ac\0\u02f2\0\u68e6\0\u6920\0\u695a\0\u6994\0\u69ce\0\u6a08"+
    "\0\u6a42\0\u6a7c\0\u6ab6\0\u6af0\0\u6b2a\0\u6b64\0\u6b9e\0\u6bd8"+
    "\0\u6c12\0\u6c4c\0\u6c86\0\u6cc0\0\u6cfa\0\u6d34\0\u6d6e\0\u6da8"+
    "\0\u6de2\0\u6e1c\0\u6e56\0\u6e90\0\u6eca\0\u6f04\0\u6f3e\0\u6f78"+
    "\0\u6fb2\0\u6fec\0\u7026\0\u7060\0\u709a\0\u70d4\0\u710e\0\u7148"+
    "\0\u7182\0\u71bc\0\u71f6\0\u7230\0\u726a\0\u72a4\0\u72de\0\u7318"+
    "\0\u7352\0\u738c\0\u73c6\0\u7400\0\u743a\0\u7474\0\u74ae\0\u74e8"+
    "\0\u7522\0\u755c\0\u7596\0\u75d0\0\u760a\0\u7644\0\u767e\0\u76b8"+
    "\0\u76f2\0\u772c\0\u7766\0\u77a0\0\u77da\0\u7814\0\u784e\0\u7888"+
    "\0\u78c2\0\u78fc\0\u7936\0\u7970\0\u79aa\0\u79e4\0\u7a1e\0\u7a58"+
    "\0\u7a92\0\u7acc\0\u7b06\0\u7b40\0\u7b7a\0\u7bb4\0\u7bee\0\u7c28"+
    "\0\u7c62\0\u7c9c\0\u7cd6\0\u7d10\0\u7d4a\0\u7d84\0\u7dbe\0\u7df8"+
    "\0\u7e32\0\u7e6c\0\u7ea6\0\u7ee0\0\u7f1a\0\u7f54\0\u7f8e\0\u7fc8"+
    "\0\u8002\0\u803c\0\u8076\0\u80b0\0\u80ea\0\u8124\0\u815e\0\u8198"+
    "\0\u81d2\0\u820c\0\u8246\0\u8280\0\u82ba\0\u82f4\0\u832e\0\u8368"+
    "\0\u83a2\0\u83dc\0\u8416\0\u8450\0\u848a\0\u84c4\0\u84fe\0\u8538"+
    "\0\u8572\0\u85ac\0\u85e6\0\u8620\0\u865a\0\u8694\0\u86ce\0\u8708"+
    "\0\u8742\0\u877c\0\u87b6\0\u87f0\0\u882a\0\u8864\0\u889e\0\u88d8"+
    "\0\u8912\0\u894c\0\u8986\0\u89c0\0\u89fa\0\u8a34\0\u8a6e\0\u8aa8"+
    "\0\u8ae2\0\u8b1c\0\u8b56\0\u8b90\0\u8bca\0\u8c04\0\u8c3e\0\u8c78"+
    "\0\u8cb2\0\u8cec\0\u8d26\0\u8d60\0\u8d9a\0\u8dd4\0\u8e0e\0\u8e48"+
    "\0\u8e82\0\u8ebc\0\u8ef6\0\u8f30\0\u8f6a\0\u8fa4\0\u8fde\0\u9018"+
    "\0\u9052\0\u908c\0\u90c6\0\u9100\0\u913a\0\u9174\0\u91ae\0\u91e8"+
    "\0\u9222\0\u925c\0\u9296\0\u92d0\0\u930a\0\u9344\0\u937e\0\u93b8"+
    "\0\u93f2\0\u942c\0\u9466\0\u94a0\0\u94da\0\u9514\0\u954e\0\u9588"+
    "\0\u95c2\0\u95fc\0\u9636\0\u9670\0\u96aa\0\u96e4\0\u971e\0\u9758"+
    "\0\u9792\0\u97cc\0\u9806\0\u9840\0\u987a\0\u98b4\0\u98ee\0\u9928"+
    "\0\u9962\0\u999c\0\u99d6\0\u9a10\0\u9a4a\0\u9a84\0\u9abe\0\u9af8"+
    "\0\u9b32\0\u9b6c\0\u9ba6\0\u9be0\0\u9c1a\0\u48f4\0\u9c54\0\u9c8e"+
    "\0\u9cc8\0\u9d02\0\u9d3c\0\u9d76\0\u4e9e\0\u9db0\0\u9dea\0\u9e24"+
    "\0\u9e5e\0\u9e98\0\u5360\0\u9ed2\0\u9f0c\0\u9f46\0\u9f80\0\u9fba"+
    "\0\u5822\0\u9ff4\0\ua02e\0\ua068\0\ua0a2\0\ua0dc\0\u5ce4\0\ua116"+
    "\0\ua150\0\ua18a\0\ua1c4\0\ua1fe\0\u61a6\0\ua238\0\ua272\0\ua2ac"+
    "\0\ua2e6\0\ua320\0\ua35a\0\ua394\0\ua3ce\0\ua408\0\ua442\0\ua47c"+
    "\0\ua4b6\0\ua4f0\0\ua52a\0\ua564\0\ua59e\0\ua5d8\0\ua612\0\ua64c"+
    "\0\ua686\0\ua6c0\0\ua6fa\0\ua734\0\ua76e\0\ua7a8\0\ua7e2\0\ua81c"+
    "\0\ua856\0\ua890\0\ua8ca\0\ua904\0\ua93e\0\ua978\0\ua9b2\0\ua9ec"+
    "\0\uaa26\0\uaa60\0\uaa9a\0\uaad4\0\uab0e\0\uab48\0\uab82";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[807];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\2\14\1\13\1\14\1\15\1\13\1\14\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\16\1\24\1\25"+
    "\11\26\1\27\1\16\1\30\2\20\1\13\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\20\1\37\1\40\2\20"+
    "\1\41\2\20\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\20\1\51\1\20\1\52\1\13\11\53\1\54"+
    "\25\53\1\55\2\53\1\56\1\57\1\60\1\61\2\53"+
    "\1\62\2\53\1\63\2\53\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\5\53\11\13\1\73\7\13\11\74"+
    "\3\13\1\75\4\13\1\76\1\77\1\100\1\101\2\13"+
    "\1\102\2\13\1\103\2\13\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\6\13\2\113\1\13\1\113\1\114"+
    "\1\13\1\113\1\115\2\13\1\113\1\116\1\13\1\115"+
    "\1\117\1\115\11\120\1\121\1\115\1\122\5\13\1\76"+
    "\1\77\1\123\1\101\2\13\1\102\2\13\1\103\2\13"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\3\13"+
    "\1\124\2\13\2\113\1\13\1\113\1\114\1\13\1\113"+
    "\1\115\2\13\1\113\1\116\1\13\1\115\1\13\1\115"+
    "\11\120\1\121\1\115\1\122\5\13\1\76\1\77\1\100"+
    "\1\101\2\13\1\102\2\13\1\103\2\13\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\3\13\1\124\1\13"+
    "\2\125\1\13\2\125\1\13\3\125\1\13\3\125\1\126"+
    "\21\125\1\13\2\125\1\127\1\130\1\131\1\132\2\125"+
    "\1\133\2\125\1\134\2\125\1\135\1\136\1\137\1\140"+
    "\1\141\1\142\1\143\5\125\2\144\1\145\2\144\1\146"+
    "\10\144\1\147\23\144\1\150\1\151\1\152\1\153\2\144"+
    "\1\154\2\144\1\155\2\144\1\156\1\157\1\160\1\161"+
    "\1\162\1\163\1\164\5\144\2\165\1\166\2\13\1\167"+
    "\34\165\1\170\1\171\1\172\1\173\2\165\1\174\2\165"+
    "\1\175\2\165\1\176\1\177\1\200\1\201\1\202\1\203"+
    "\1\204\4\165\1\13\2\117\1\205\4\117\1\206\1\207"+
    "\2\117\1\206\1\210\1\117\1\207\1\117\1\207\11\117"+
    "\1\211\1\207\1\212\5\117\1\213\1\214\1\215\1\216"+
    "\2\117\1\217\2\117\1\220\2\117\1\221\1\222\1\223"+
    "\1\224\1\225\1\226\1\227\3\117\1\230\3\117\1\231"+
    "\37\117\1\213\1\214\1\215\1\216\2\117\1\217\2\117"+
    "\1\220\2\117\1\221\1\222\1\223\1\224\1\225\1\226"+
    "\1\227\5\117\74\0\1\14\122\0\1\21\36\0\1\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\30\20"+
    "\1\0\1\20\14\0\1\21\76\0\11\26\56\0\1\232"+
    "\1\0\1\233\12\0\1\21\50\0\1\234\6\0\11\26"+
    "\3\0\2\234\1\0\30\234\34\0\2\21\71\0\2\21"+
    "\35\0\1\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\3\20\1\235\14\20\1\236\7\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\1\237"+
    "\14\20\1\240\1\20\1\241\6\20\1\242\1\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\1\243\14\20\1\244\12\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\1\245\3\20\1\246"+
    "\10\20\1\236\12\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\12\20\1\247\1\20\1\250"+
    "\4\20\1\251\6\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\1\252\7\20\1\253\4\20"+
    "\1\254\1\20\1\255\2\20\1\256\5\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\4\20"+
    "\1\257\10\20\1\260\12\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\5\20\1\236\5\20"+
    "\1\261\1\262\13\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\1\263\7\20\1\264\4\20"+
    "\1\265\12\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\1\266\16\20\1\267\2\20\1\270"+
    "\5\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\4\20\1\271\23\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\4\20\1\272"+
    "\10\20\1\273\3\20\1\274\5\20\1\275\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\7\20"+
    "\1\276\7\20\1\277\10\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\5\20\1\300\2\20"+
    "\1\301\17\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\1\254\7\20\1\302\17\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\4\20\1\303\2\20\1\304\20\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\4\20\1\305"+
    "\23\20\1\0\1\20\70\0\1\21\1\0\11\53\1\0"+
    "\25\53\1\0\32\53\54\0\1\306\5\0\1\307\2\0"+
    "\1\310\4\0\11\53\1\0\25\53\1\0\15\53\1\311"+
    "\25\53\1\0\25\53\1\0\4\53\1\312\10\53\1\313"+
    "\25\53\1\0\25\53\1\0\12\53\1\314\1\53\1\315"+
    "\26\53\1\0\25\53\1\0\1\316\14\53\1\317\1\53"+
    "\1\320\2\53\1\321\20\53\1\0\25\53\1\0\5\53"+
    "\1\313\5\53\1\322\1\323\26\53\1\0\25\53\1\0"+
    "\1\324\14\53\1\325\25\53\1\0\25\53\1\0\1\326"+
    "\16\53\1\327\2\53\1\330\20\53\1\0\25\53\1\0"+
    "\4\53\1\331\36\53\1\0\25\53\1\0\15\53\1\332"+
    "\3\53\1\333\21\53\1\0\25\53\1\0\7\53\1\334"+
    "\7\53\1\335\23\53\1\0\25\53\1\0\5\53\1\336"+
    "\2\53\1\337\32\53\1\0\25\53\1\0\1\317\7\53"+
    "\1\340\32\53\1\0\25\53\1\0\7\53\1\341\22\53"+
    "\21\0\11\74\75\0\1\75\111\0\1\342\60\0\1\343"+
    "\10\0\1\344\66\0\1\345\1\0\1\346\55\0\1\347"+
    "\14\0\1\350\1\0\1\351\2\0\1\352\54\0\1\344"+
    "\5\0\1\353\1\354\55\0\1\355\14\0\1\356\54\0"+
    "\1\357\16\0\1\360\2\0\1\361\53\0\1\362\102\0"+
    "\1\363\3\0\1\364\57\0\1\365\7\0\1\366\57\0"+
    "\1\367\2\0\1\370\61\0\1\350\7\0\1\371\70\0"+
    "\1\372\24\0\1\113\122\0\1\113\52\0\1\113\76\0"+
    "\11\120\72\0\2\113\71\0\2\113\125\0\1\113\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\34\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\21\125\1\0\15\125\1\373\16\125\1\0"+
    "\2\125\1\0\3\125\1\0\3\125\1\0\21\125\1\0"+
    "\4\125\1\374\10\125\1\375\16\125\1\0\2\125\1\0"+
    "\3\125\1\0\3\125\1\0\21\125\1\0\12\125\1\376"+
    "\1\125\1\377\17\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\21\125\1\0\1\u0100\14\125\1\u0101\1\125"+
    "\1\u0102\2\125\1\u0103\11\125\1\0\2\125\1\0\3\125"+
    "\1\0\3\125\1\0\21\125\1\0\5\125\1\375\5\125"+
    "\1\u0104\1\u0105\17\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\21\125\1\0\1\u0106\14\125\1\u0107\16\125"+
    "\1\0\2\125\1\0\3\125\1\0\3\125\1\0\21\125"+
    "\1\0\1\u0108\16\125\1\u0109\2\125\1\u010a\11\125\1\0"+
    "\2\125\1\0\3\125\1\0\3\125\1\0\21\125\1\0"+
    "\4\125\1\u010b\27\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\21\125\1\0\15\125\1\u010c\3\125\1\u010d"+
    "\12\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\7\125\1\u010e\7\125\1\u010f\14\125\1\0"+
    "\2\125\1\0\3\125\1\0\3\125\1\0\21\125\1\0"+
    "\5\125\1\u0110\2\125\1\u0111\23\125\1\0\2\125\1\0"+
    "\3\125\1\0\3\125\1\0\21\125\1\0\1\u0101\7\125"+
    "\1\u0112\23\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\7\125\1\u0113\22\125\2\u0114\1\145"+
    "\2\u0114\1\146\64\u0114\2\0\1\145\67\0\2\u0115\1\u0116"+
    "\2\u0115\1\u0117\12\u0115\1\u0118\51\u0115\2\u0114\1\145\2\u0114"+
    "\1\146\47\u0114\1\u0119\16\u0114\1\145\2\u0114\1\146\36\u0114"+
    "\1\u011a\10\u0114\1\u011b\16\u0114\1\145\2\u0114\1\146\44\u0114"+
    "\1\u011c\1\u0114\1\u011d\17\u0114\1\145\2\u0114\1\146\32\u0114"+
    "\1\u011e\14\u0114\1\u011f\1\u0114\1\u0120\2\u0114\1\u0121\11\u0114"+
    "\1\145\2\u0114\1\146\37\u0114\1\u011b\5\u0114\1\u0122\1\u0123"+
    "\17\u0114\1\145\2\u0114\1\146\32\u0114\1\u0124\14\u0114\1\u0125"+
    "\16\u0114\1\145\2\u0114\1\146\32\u0114\1\u0126\16\u0114\1\u0127"+
    "\2\u0114\1\u0128\11\u0114\1\145\2\u0114\1\146\36\u0114\1\u0129"+
    "\27\u0114\1\145\2\u0114\1\146\47\u0114\1\u012a\3\u0114\1\u012b"+
    "\12\u0114\1\145\2\u0114\1\146\41\u0114\1\u012c\7\u0114\1\u012d"+
    "\14\u0114\1\145\2\u0114\1\146\37\u0114\1\u012e\2\u0114\1\u012f"+
    "\23\u0114\1\145\2\u0114\1\146\32\u0114\1\u011f\7\u0114\1\u0130"+
    "\23\u0114\1\145\2\u0114\1\146\41\u0114\1\u0131\22\u0114\2\165"+
    "\4\0\63\165\3\0\1\166\67\0\2\165\4\0\47\165"+
    "\1\u0132\13\165\1\0\2\165\4\0\36\165\1\u0133\10\165"+
    "\1\u0134\13\165\1\0\2\165\4\0\44\165\1\u0135\1\165"+
    "\1\u0136\14\165\1\0\2\165\4\0\32\165\1\u0137\14\165"+
    "\1\u0138\1\165\1\u0139\2\165\1\u013a\6\165\1\0\2\165"+
    "\4\0\37\165\1\u0134\5\165\1\u013b\1\u013c\14\165\1\0"+
    "\2\165\4\0\32\165\1\u013d\14\165\1\u013e\13\165\1\0"+
    "\2\165\4\0\32\165\1\u013f\16\165\1\u0140\2\165\1\u0141"+
    "\6\165\1\0\2\165\4\0\36\165\1\u0142\24\165\1\0"+
    "\2\165\4\0\47\165\1\u0143\3\165\1\u0144\7\165\1\0"+
    "\2\165\4\0\41\165\1\u0145\7\165\1\u0146\11\165\1\0"+
    "\2\165\4\0\37\165\1\u0147\2\165\1\u0148\20\165\1\0"+
    "\2\165\4\0\32\165\1\u0138\7\165\1\u0149\20\165\1\0"+
    "\2\165\4\0\41\165\1\u014a\21\165\34\0\1\206\52\0"+
    "\1\206\107\0\2\206\71\0\2\206\125\0\1\206\1\0"+
    "\1\234\11\0\1\234\4\0\1\u014b\1\0\11\234\3\0"+
    "\2\234\1\0\30\234\1\0\1\234\1\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\3\20\1\u014c\24\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\12\20\1\u014d\15\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\15\20\1\u014e\12\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\4\20\1\u014f\23\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\21\20\1\u0150\6\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\12\20\1\u0151\15\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\14\20\1\u0152\13\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\26\20\1\u0153\1\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\12\20\1\u0154\15\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\20\20\1\u0155\7\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\22\20\1\u0156\5\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\7\20\1\u0157\20\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\12\20\1\247\15\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\14\20\1\u0158\13\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\17\20\1\236\10\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\15\20\1\u0156\12\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\14\20\1\u0159\13\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\25\20\1\u015a\2\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\22\20\1\u015b\5\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\16\20\1\u015c\11\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\21\20\1\u015d\6\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\16\20\1\u015e\11\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\14\20\1\u015f\13\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\3\20\1\u0160\24\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\26\20\1\u0161\1\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\1\u0162\7\20\1\u0163\17\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\1\20\1\u0164"+
    "\26\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\21\20\1\u0165\6\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\2\20\1\u0166"+
    "\11\20\1\u0167\13\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\12\20\1\u0168\15\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\17\20\1\u0169\10\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\1\u016a\27\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\10\20"+
    "\1\u016b\17\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\1\u016c\21\20\1\u0155\5\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\10\20\1\u016d\17\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\14\20\1\u016e\13\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\4\20\1\u016f\23\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\4\20\1\u0170\3\20\1\u0171"+
    "\17\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\10\20\1\u0172\17\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\1\u015b\27\20"+
    "\1\0\1\20\36\0\1\u0173\71\0\1\u0174\33\0\11\53"+
    "\1\0\25\53\1\0\14\53\1\u0175\26\53\1\0\25\53"+
    "\1\0\12\53\1\u0176\30\53\1\0\25\53\1\0\20\53"+
    "\1\u0177\22\53\1\0\25\53\1\0\22\53\1\u0178\20\53"+
    "\1\0\25\53\1\0\12\53\1\314\30\53\1\0\25\53"+
    "\1\0\17\53\1\313\23\53\1\0\25\53\1\0\15\53"+
    "\1\u0178\25\53\1\0\25\53\1\0\14\53\1\u0179\26\53"+
    "\1\0\25\53\1\0\16\53\1\u017a\24\53\1\0\25\53"+
    "\1\0\21\53\1\u017b\21\53\1\0\25\53\1\0\16\53"+
    "\1\u017c\24\53\1\0\25\53\1\0\3\53\1\u017d\37\53"+
    "\1\0\25\53\1\0\26\53\1\u017e\14\53\1\0\25\53"+
    "\1\0\1\u017f\7\53\1\u0180\32\53\1\0\25\53\1\0"+
    "\1\53\1\u0181\41\53\1\0\25\53\1\0\21\53\1\u0182"+
    "\21\53\1\0\25\53\1\0\12\53\1\u0183\30\53\1\0"+
    "\25\53\1\0\17\53\1\u0184\23\53\1\0\25\53\1\0"+
    "\10\53\1\u0185\32\53\1\0\25\53\1\0\22\53\1\u0177"+
    "\20\53\1\0\25\53\1\0\10\53\1\u0186\32\53\1\0"+
    "\25\53\1\0\14\53\1\u0187\26\53\1\0\25\53\1\0"+
    "\4\53\1\u0188\36\53\1\0\25\53\1\0\10\53\1\u0189"+
    "\21\53\54\0\1\u018a\67\0\1\u018b\77\0\1\u018c\73\0"+
    "\1\u018d\61\0\1\345\76\0\1\344\67\0\1\u018d\70\0"+
    "\1\u018e\73\0\1\u018f\74\0\1\u0190\66\0\1\u0191\56\0"+
    "\1\u0192\114\0\1\u0193\43\0\1\u0194\7\0\1\u0195\62\0"+
    "\1\u0196\111\0\1\u0197\62\0\1\u0198\76\0\1\u0199\62\0"+
    "\1\u019a\103\0\1\u018c\57\0\1\u019b\75\0\1\u019c\61\0"+
    "\1\u019d\75\0\1\u019e\21\0\2\125\1\0\2\125\1\0"+
    "\3\125\1\0\3\125\1\0\21\125\1\0\14\125\1\u019f"+
    "\17\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\12\125\1\u01a0\21\125\1\0\2\125\1\0"+
    "\3\125\1\0\3\125\1\0\21\125\1\0\20\125\1\u01a1"+
    "\13\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\22\125\1\u01a2\11\125\1\0\2\125\1\0"+
    "\3\125\1\0\3\125\1\0\21\125\1\0\12\125\1\376"+
    "\21\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\17\125\1\375\14\125\1\0\2\125\1\0"+
    "\3\125\1\0\3\125\1\0\21\125\1\0\15\125\1\u01a2"+
    "\16\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\14\125\1\u01a3\17\125\1\0\2\125\1\0"+
    "\3\125\1\0\3\125\1\0\21\125\1\0\16\125\1\u01a4"+
    "\15\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\21\125\1\u01a5\12\125\1\0\2\125\1\0"+
    "\3\125\1\0\3\125\1\0\21\125\1\0\16\125\1\u01a6"+
    "\15\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\3\125\1\u01a7\30\125\1\0\2\125\1\0"+
    "\3\125\1\0\3\125\1\0\21\125\1\0\26\125\1\u01a8"+
    "\5\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\1\u01a9\7\125\1\u01aa\23\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\1\125"+
    "\1\u01ab\32\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\21\125\1\u01ac\12\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\12\125"+
    "\1\u01ad\21\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\17\125\1\u01ae\14\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\10\125"+
    "\1\u01af\23\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\22\125\1\u01a1\11\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\10\125"+
    "\1\u01b0\23\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\14\125\1\u01b1\17\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\4\125"+
    "\1\u01b2\27\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\10\125\1\u01b3\21\125\2\u0115\1\u0116"+
    "\2\u0115\1\u0117\64\u0115\2\0\1\u0116\67\0\2\u0114\1\145"+
    "\2\u0114\1\146\46\u0114\1\u01b4\17\u0114\1\145\2\u0114\1\146"+
    "\44\u0114\1\u01b5\21\u0114\1\145\2\u0114\1\146\52\u0114\1\u01b6"+
    "\13\u0114\1\145\2\u0114\1\146\54\u0114\1\u01b7\11\u0114\1\145"+
    "\2\u0114\1\146\44\u0114\1\u011c\21\u0114\1\145\2\u0114\1\146"+
    "\51\u0114\1\u011b\14\u0114\1\145\2\u0114\1\146\47\u0114\1\u01b7"+
    "\16\u0114\1\145\2\u0114\1\146\46\u0114\1\u01b8\17\u0114\1\145"+
    "\2\u0114\1\146\50\u0114\1\u01b9\15\u0114\1\145\2\u0114\1\146"+
    "\53\u0114\1\u01ba\12\u0114\1\145\2\u0114\1\146\50\u0114\1\u01bb"+
    "\15\u0114\1\145\2\u0114\1\146\35\u0114\1\u01bc\30\u0114\1\145"+
    "\2\u0114\1\146\60\u0114\1\u01bd\5\u0114\1\145\2\u0114\1\146"+
    "\32\u0114\1\u01be\7\u0114\1\u01bf\23\u0114\1\145\2\u0114\1\146"+
    "\33\u0114\1\u01c0\32\u0114\1\145\2\u0114\1\146\53\u0114\1\u01c1"+
    "\12\u0114\1\145\2\u0114\1\146\44\u0114\1\u01c2\21\u0114\1\145"+
    "\2\u0114\1\146\51\u0114\1\u01c3\14\u0114\1\145\2\u0114\1\146"+
    "\42\u0114\1\u01c4\23\u0114\1\145\2\u0114\1\146\54\u0114\1\u01b6"+
    "\11\u0114\1\145\2\u0114\1\146\42\u0114\1\u01c5\23\u0114\1\145"+
    "\2\u0114\1\146\46\u0114\1\u01c6\17\u0114\1\145\2\u0114\1\146"+
    "\36\u0114\1\u01c7\27\u0114\1\145\2\u0114\1\146\42\u0114\1\u01c8"+
    "\21\u0114\2\165\4\0\46\165\1\u01c9\14\165\1\0\2\165"+
    "\4\0\44\165\1\u01ca\16\165\1\0\2\165\4\0\52\165"+
    "\1\u01cb\10\165\1\0\2\165\4\0\54\165\1\u01cc\6\165"+
    "\1\0\2\165\4\0\44\165\1\u0135\16\165\1\0\2\165"+
    "\4\0\51\165\1\u0134\11\165\1\0\2\165\4\0\47\165"+
    "\1\u01cc\13\165\1\0\2\165\4\0\46\165\1\u01cd\14\165"+
    "\1\0\2\165\4\0\50\165\1\u01ce\12\165\1\0\2\165"+
    "\4\0\53\165\1\u01cf\7\165\1\0\2\165\4\0\50\165"+
    "\1\u01d0\12\165\1\0\2\165\4\0\35\165\1\u01d1\25\165"+
    "\1\0\2\165\4\0\60\165\1\u01d2\2\165\1\0\2\165"+
    "\4\0\32\165\1\u01d3\7\165\1\u01d4\20\165\1\0\2\165"+
    "\4\0\33\165\1\u01d5\27\165\1\0\2\165\4\0\53\165"+
    "\1\u01d6\7\165\1\0\2\165\4\0\44\165\1\u01d7\16\165"+
    "\1\0\2\165\4\0\51\165\1\u01d8\11\165\1\0\2\165"+
    "\4\0\42\165\1\u01d9\20\165\1\0\2\165\4\0\54\165"+
    "\1\u01cb\6\165\1\0\2\165\4\0\42\165\1\u01da\20\165"+
    "\1\0\2\165\4\0\46\165\1\u01db\14\165\1\0\2\165"+
    "\4\0\36\165\1\u01dc\24\165\1\0\2\165\4\0\42\165"+
    "\1\u01dd\20\165\22\0\11\u01de\40\0\1\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\17\20\1\u01df\10\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\1\u01e0\27\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\12\20\1\236\15\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\1\u01e1\27\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\4\20\1\u01e2\23\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\12\20"+
    "\1\u01e3\15\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\20\20\1\u01e4\1\u01e5\6\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\20\20\1\u0171\7\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\4\20\1\u01e6\23\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\4\20\1\236\23\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\13\20\1\236\14\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\4\20\1\u01e7\23\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\14\20\1\u01e8\13\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\2\20\1\u01e9\25\20\1\0\2\20\10\0\1\u01ea\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\30\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\17\20"+
    "\1\u0153\10\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\15\20\1\u01eb\12\20\1\0\2\20"+
    "\11\0\1\20\6\0\1\20\1\u01ec\1\u01ed\1\u01ee\2\20"+
    "\1\u01ef\1\20\1\236\3\0\2\20\1\0\4\20\1\u01f0"+
    "\23\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\16\20\1\u01f1\11\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\22\20\1\u01f2"+
    "\5\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\10\20\1\u01f3\17\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\1\u01f4\27\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\6\20\1\u01f5\21\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\23\20\1\u01f6\4\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\12\20\1\u01f7\15\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\22\20\1\u01f8\5\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\15\20\1\u01f9\12\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\3\20\1\u01fa\24\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\10\20\1\u01fb\17\20\1\0\2\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\10\20\1\u01fc\11\20"+
    "\1\u01fd\5\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\1\20\1\u01fe\26\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\20\20"+
    "\1\236\7\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\14\20\1\u01ff\13\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\25\20"+
    "\1\u0200\2\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\21\20\1\u0201\6\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\24\20"+
    "\1\236\3\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\11\20\1\u0153\16\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\12\20"+
    "\1\u0155\15\20\1\0\1\20\36\0\1\310\71\0\1\306"+
    "\33\0\11\53\1\0\25\53\1\0\20\53\1\u0202\1\u0203"+
    "\21\53\1\0\25\53\1\0\4\53\1\u0204\36\53\1\0"+
    "\25\53\1\0\4\53\1\313\36\53\1\0\25\53\1\0"+
    "\13\53\1\313\27\53\1\0\25\53\1\0\2\53\1\u0205"+
    "\40\53\1\0\25\53\1\0\15\53\1\u0206\25\53\1\0"+
    "\10\53\1\u0207\1\u0208\1\u0209\2\53\1\u020a\1\53\1\313"+
    "\5\53\1\0\4\53\1\u020b\36\53\1\0\25\53\1\0"+
    "\16\53\1\u020c\24\53\1\0\25\53\1\0\10\53\1\u020d"+
    "\32\53\1\0\25\53\1\0\1\u020e\42\53\1\0\25\53"+
    "\1\0\6\53\1\u020f\34\53\1\0\25\53\1\0\23\53"+
    "\1\u0210\17\53\1\0\25\53\1\0\12\53\1\u0211\30\53"+
    "\1\0\25\53\1\0\22\53\1\u0212\20\53\1\0\25\53"+
    "\1\0\10\53\1\u0213\32\53\1\0\25\53\1\0\10\53"+
    "\1\u0214\11\53\1\u0215\20\53\1\0\25\53\1\0\20\53"+
    "\1\313\22\53\1\0\25\53\1\0\25\53\1\u0216\15\53"+
    "\1\0\25\53\1\0\21\53\1\u0217\21\53\1\0\25\53"+
    "\1\0\24\53\1\313\16\53\1\0\25\53\1\0\12\53"+
    "\1\u0177\17\53\60\0\1\u0218\1\u0219\54\0\1\u021a\71\0"+
    "\1\344\100\0\1\344\60\0\1\u021b\104\0\1\u021c\36\0"+
    "\1\u021d\1\u021e\1\u021f\2\0\1\u0220\1\0\1\344\12\0"+
    "\1\u0221\103\0\1\u0222\63\0\1\u0223\61\0\1\u0224\77\0"+
    "\1\u0225\106\0\1\u0226\60\0\1\u0227\101\0\1\u0228\57\0"+
    "\1\u0229\71\0\1\u022a\11\0\1\u022b\67\0\1\344\76\0"+
    "\1\u022c\65\0\1\u022d\74\0\1\344\57\0\1\u018c\17\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\20\125\1\u022e\1\u022f\12\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\4\125"+
    "\1\u0230\27\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\4\125\1\375\27\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\13\125"+
    "\1\375\20\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\2\125\1\u0231\31\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\15\125"+
    "\1\u0232\16\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\4\125\1\u0233\1\u0234\1\u0235\2\125\1\u0236\1\125"+
    "\1\375\5\125\1\0\4\125\1\u0237\27\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\16\125"+
    "\1\u0238\15\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\10\125\1\u0239\23\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\1\u023a"+
    "\33\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\6\125\1\u023b\25\125\1\0\2\125\1\0"+
    "\3\125\1\0\3\125\1\0\21\125\1\0\23\125\1\u023c"+
    "\10\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\12\125\1\u023d\21\125\1\0\2\125\1\0"+
    "\3\125\1\0\3\125\1\0\21\125\1\0\22\125\1\u023e"+
    "\11\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\10\125\1\u023f\23\125\1\0\2\125\1\0"+
    "\3\125\1\0\3\125\1\0\21\125\1\0\10\125\1\u0240"+
    "\11\125\1\u0241\11\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\21\125\1\0\20\125\1\375\13\125\1\0"+
    "\2\125\1\0\3\125\1\0\3\125\1\0\21\125\1\0"+
    "\25\125\1\u0242\6\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\21\125\1\0\21\125\1\u0243\12\125\1\0"+
    "\2\125\1\0\3\125\1\0\3\125\1\0\21\125\1\0"+
    "\24\125\1\375\7\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\21\125\1\0\12\125\1\u01a1\17\125\2\u0114"+
    "\1\145\2\u0114\1\146\52\u0114\1\u0244\1\u0245\12\u0114\1\145"+
    "\2\u0114\1\146\36\u0114\1\u0246\27\u0114\1\145\2\u0114\1\146"+
    "\36\u0114\1\u011b\27\u0114\1\145\2\u0114\1\146\45\u0114\1\u011b"+
    "\20\u0114\1\145\2\u0114\1\146\34\u0114\1\u0247\31\u0114\1\145"+
    "\2\u0114\1\146\47\u0114\1\u0248\16\u0114\1\145\2\u0114\1\146"+
    "\14\u0114\1\u0249\1\u024a\1\u024b\2\u0114\1\u024c\1\u0114\1\u011b"+
    "\12\u0114\1\u024d\27\u0114\1\145\2\u0114\1\146\50\u0114\1\u024e"+
    "\15\u0114\1\145\2\u0114\1\146\42\u0114\1\u024f\23\u0114\1\145"+
    "\2\u0114\1\146\32\u0114\1\u0250\33\u0114\1\145\2\u0114\1\146"+
    "\40\u0114\1\u0251\25\u0114\1\145\2\u0114\1\146\55\u0114\1\u0252"+
    "\10\u0114\1\145\2\u0114\1\146\44\u0114\1\u0253\21\u0114\1\145"+
    "\2\u0114\1\146\54\u0114\1\u0254\11\u0114\1\145\2\u0114\1\146"+
    "\42\u0114\1\u0255\23\u0114\1\145\2\u0114\1\146\42\u0114\1\u0256"+
    "\11\u0114\1\u0257\11\u0114\1\145\2\u0114\1\146\52\u0114\1\u011b"+
    "\13\u0114\1\145\2\u0114\1\146\57\u0114\1\u0258\6\u0114\1\145"+
    "\2\u0114\1\146\53\u0114\1\u0259\12\u0114\1\145\2\u0114\1\146"+
    "\56\u0114\1\u011b\7\u0114\1\145\2\u0114\1\146\44\u0114\1\u01b6"+
    "\17\u0114\2\165\4\0\52\165\1\u025a\1\u025b\7\165\1\0"+
    "\2\165\4\0\36\165\1\u025c\24\165\1\0\2\165\4\0"+
    "\36\165\1\u0134\24\165\1\0\2\165\4\0\45\165\1\u0134"+
    "\15\165\1\0\2\165\4\0\34\165\1\u025d\26\165\1\0"+
    "\2\165\4\0\47\165\1\u025e\13\165\1\0\2\165\4\0"+
    "\14\165\1\u025f\1\u0260\1\u0261\2\165\1\u0262\1\165\1\u0134"+
    "\12\165\1\u0263\24\165\1\0\2\165\4\0\50\165\1\u0264"+
    "\12\165\1\0\2\165\4\0\42\165\1\u0265\20\165\1\0"+
    "\2\165\4\0\32\165\1\u0266\30\165\1\0\2\165\4\0"+
    "\40\165\1\u0267\22\165\1\0\2\165\4\0\55\165\1\u0268"+
    "\5\165\1\0\2\165\4\0\44\165\1\u0269\16\165\1\0"+
    "\2\165\4\0\54\165\1\u026a\6\165\1\0\2\165\4\0"+
    "\42\165\1\u026b\20\165\1\0\2\165\4\0\42\165\1\u026c"+
    "\11\165\1\u026d\6\165\1\0\2\165\4\0\52\165\1\u0134"+
    "\10\165\1\0\2\165\4\0\57\165\1\u026e\3\165\1\0"+
    "\2\165\4\0\53\165\1\u026f\7\165\1\0\2\165\4\0"+
    "\56\165\1\u0134\4\165\1\0\2\165\4\0\44\165\1\u01cb"+
    "\16\165\13\0\1\234\6\0\11\u01de\3\0\2\234\1\0"+
    "\30\234\2\0\1\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\4\20\1\u0270\23\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\14\20\1\u0271"+
    "\13\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\11\20\1\236\16\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\20\20\1\u0272"+
    "\7\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\2\20\1\u0273\25\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\21\20\1\u0274"+
    "\6\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\10\20\1\u0275\6\20\1\u0276\10\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\6\20\1\u0277\12\20\1\u0155\6\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\17\20\1\u0171"+
    "\10\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\4\20\1\u0278\23\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\21\20\1\u0279"+
    "\6\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\17\20\1\u027a\10\20\1\0\2\20\11\0"+
    "\1\20\6\0\2\20\1\u027b\3\20\1\236\2\20\3\0"+
    "\2\20\1\0\30\20\1\0\2\20\11\0\1\20\6\0"+
    "\5\20\1\u027c\3\20\3\0\2\20\1\0\30\20\1\0"+
    "\2\20\11\0\1\20\6\0\2\20\1\236\6\20\3\0"+
    "\2\20\1\0\30\20\1\0\2\20\11\0\1\20\6\0"+
    "\4\20\1\236\4\20\3\0\2\20\1\0\30\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\17\20\1\u027d\10\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\10\20\1\u01fc\17\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\21\20\1\u027e\6\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\5\20\1\u027f\22\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\1\20\1\u0172\26\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\13\20\1\u0280\14\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\1\u0281\27\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\10\20\1\u0282\17\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\17\20"+
    "\1\u0283\10\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\14\20\1\u0284\13\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\3\20"+
    "\1\u0285\24\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\14\20\1\u0286\13\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\2\20"+
    "\1\u027a\25\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\15\20\1\u0171\12\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\20\20"+
    "\1\u0287\7\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\4\20\1\u0288\23\20\1\0\2\20"+
    "\11\0\1\20\6\0\1\20\1\u01ec\1\u01ed\1\u01ee\2\20"+
    "\1\u01ef\1\20\1\236\3\0\2\20\1\0\30\20\1\0"+
    "\1\20\11\53\1\0\25\53\1\0\21\53\1\u0289\21\53"+
    "\1\0\25\53\1\0\10\53\1\u028a\6\53\1\u028b\23\53"+
    "\1\0\25\53\1\0\21\53\1\u0177\21\53\1\0\25\53"+
    "\1\0\21\53\1\u028c\21\53\1\0\25\53\1\0\17\53"+
    "\1\u028d\23\53\1\0\11\53\1\u028e\3\53\1\313\7\53"+
    "\1\0\43\53\1\0\14\53\1\u028f\10\53\1\0\43\53"+
    "\1\0\11\53\1\313\13\53\1\0\43\53\1\0\13\53"+
    "\1\313\11\53\1\0\43\53\1\0\25\53\1\0\17\53"+
    "\1\u0290\23\53\1\0\25\53\1\0\10\53\1\u0214\32\53"+
    "\1\0\25\53\1\0\5\53\1\u0291\35\53\1\0\25\53"+
    "\1\0\1\53\1\u0189\41\53\1\0\25\53\1\0\13\53"+
    "\1\u0292\27\53\1\0\25\53\1\0\1\u0204\42\53\1\0"+
    "\25\53\1\0\10\53\1\u0293\32\53\1\0\25\53\1\0"+
    "\17\53\1\u0294\23\53\1\0\25\53\1\0\3\53\1\u0295"+
    "\37\53\1\0\25\53\1\0\14\53\1\u0296\26\53\1\0"+
    "\25\53\1\0\2\53\1\u028d\40\53\1\0\25\53\1\0"+
    "\4\53\1\u0297\36\53\1\0\10\53\1\u0207\1\u0208\1\u0209"+
    "\2\53\1\u020a\1\53\1\313\5\53\1\0\32\53\61\0"+
    "\1\u0298\60\0\1\u0299\6\0\1\u029a\73\0\1\u018c\71\0"+
    "\1\u029b\67\0\1\u029c\35\0\1\u029d\3\0\1\344\70\0"+
    "\1\u029e\66\0\1\344\73\0\1\344\123\0\1\u029f\62\0"+
    "\1\u022a\66\0\1\u02a0\65\0\1\u019e\103\0\1\u02a1\56\0"+
    "\1\u021a\101\0\1\u02a2\100\0\1\u02a3\55\0\1\u02a4\102\0"+
    "\1\u02a5\57\0\1\u029c\73\0\1\u02a6\47\0\1\u021d\1\u021e"+
    "\1\u021f\2\0\1\u0220\1\0\1\344\40\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\3\125\1\0\21\125\1\0"+
    "\21\125\1\u02a7\12\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\21\125\1\0\10\125\1\u02a8\6\125\1\u02a9"+
    "\14\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\21\125\1\u01a1\12\125\1\0\2\125\1\0"+
    "\3\125\1\0\3\125\1\0\21\125\1\0\21\125\1\u02aa"+
    "\12\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\17\125\1\u02ab\14\125\1\0\2\125\1\0"+
    "\3\125\1\0\3\125\1\0\5\125\1\u02ac\3\125\1\375"+
    "\7\125\1\0\34\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\10\125\1\u02ad\10\125\1\0\34\125\1\0"+
    "\2\125\1\0\3\125\1\0\3\125\1\0\5\125\1\375"+
    "\13\125\1\0\34\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\7\125\1\375\11\125\1\0\34\125\1\0"+
    "\2\125\1\0\3\125\1\0\3\125\1\0\21\125\1\0"+
    "\17\125\1\u02ae\14\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\21\125\1\0\10\125\1\u0240\23\125\1\0"+
    "\2\125\1\0\3\125\1\0\3\125\1\0\21\125\1\0"+
    "\5\125\1\u02af\26\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\21\125\1\0\1\125\1\u01b3\32\125\1\0"+
    "\2\125\1\0\3\125\1\0\3\125\1\0\21\125\1\0"+
    "\13\125\1\u02b0\20\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\21\125\1\0\1\u0230\33\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\10\125"+
    "\1\u02b1\23\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\17\125\1\u02b2\14\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\3\125"+
    "\1\u02b3\30\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\14\125\1\u02b4\17\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\2\125"+
    "\1\u02ab\31\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\4\125\1\u02b5\27\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\4\125\1\u0233\1\u0234"+
    "\1\u0235\2\125\1\u0236\1\125\1\375\5\125\1\0\32\125"+
    "\2\u0114\1\145\2\u0114\1\146\53\u0114\1\u02b6\12\u0114\1\145"+
    "\2\u0114\1\146\42\u0114\1\u02b7\6\u0114\1\u02b8\14\u0114\1\145"+
    "\2\u0114\1\146\53\u0114\1\u01b6\12\u0114\1\145\2\u0114\1\146"+
    "\53\u0114\1\u02b9\12\u0114\1\145\2\u0114\1\146\51\u0114\1\u02ba"+
    "\14\u0114\1\145\2\u0114\1\146\15\u0114\1\u02bb\3\u0114\1\u011b"+
    "\44\u0114\1\145\2\u0114\1\146\20\u0114\1\u02bc\45\u0114\1\145"+
    "\2\u0114\1\146\15\u0114\1\u011b\50\u0114\1\145\2\u0114\1\146"+
    "\17\u0114\1\u011b\46\u0114\1\145\2\u0114\1\146\51\u0114\1\u02bd"+
    "\14\u0114\1\145\2\u0114\1\146\42\u0114\1\u0256\23\u0114\1\145"+
    "\2\u0114\1\146\37\u0114\1\u02be\26\u0114\1\145\2\u0114\1\146"+
    "\33\u0114\1\u01c8\32\u0114\1\145\2\u0114\1\146\45\u0114\1\u02bf"+
    "\20\u0114\1\145\2\u0114\1\146\32\u0114\1\u0246\33\u0114\1\145"+
    "\2\u0114\1\146\42\u0114\1\u02c0\23\u0114\1\145\2\u0114\1\146"+
    "\51\u0114\1\u02c1\14\u0114\1\145\2\u0114\1\146\35\u0114\1\u02c2"+
    "\30\u0114\1\145\2\u0114\1\146\46\u0114\1\u02c3\17\u0114\1\145"+
    "\2\u0114\1\146\34\u0114\1\u02ba\31\u0114\1\145\2\u0114\1\146"+
    "\36\u0114\1\u02c4\27\u0114\1\145\2\u0114\1\146\14\u0114\1\u0249"+
    "\1\u024a\1\u024b\2\u0114\1\u024c\1\u0114\1\u011b\40\u0114\2\165"+
    "\4\0\53\165\1\u02c5\7\165\1\0\2\165\4\0\42\165"+
    "\1\u02c6\6\165\1\u02c7\11\165\1\0\2\165\4\0\53\165"+
    "\1\u01cb\7\165\1\0\2\165\4\0\53\165\1\u02c8\7\165"+
    "\1\0\2\165\4\0\51\165\1\u02c9\11\165\1\0\2\165"+
    "\4\0\15\165\1\u02ca\3\165\1\u0134\41\165\1\0\2\165"+
    "\4\0\20\165\1\u02cb\42\165\1\0\2\165\4\0\15\165"+
    "\1\u0134\45\165\1\0\2\165\4\0\17\165\1\u0134\43\165"+
    "\1\0\2\165\4\0\51\165\1\u02cc\11\165\1\0\2\165"+
    "\4\0\42\165\1\u026c\20\165\1\0\2\165\4\0\37\165"+
    "\1\u02cd\23\165\1\0\2\165\4\0\33\165\1\u01dd\27\165"+
    "\1\0\2\165\4\0\45\165\1\u02ce\15\165\1\0\2\165"+
    "\4\0\32\165\1\u025c\30\165\1\0\2\165\4\0\42\165"+
    "\1\u02cf\20\165\1\0\2\165\4\0\51\165\1\u02d0\11\165"+
    "\1\0\2\165\4\0\35\165\1\u02d1\25\165\1\0\2\165"+
    "\4\0\46\165\1\u02d2\14\165\1\0\2\165\4\0\34\165"+
    "\1\u02c9\26\165\1\0\2\165\4\0\36\165\1\u02d3\24\165"+
    "\1\0\2\165\4\0\14\165\1\u025f\1\u0260\1\u0261\2\165"+
    "\1\u0262\1\165\1\u0134\37\165\1\0\1\20\11\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\20\20\1\u016b\7\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\2\20\1\u02d4\25\20\1\0\2\20\11\0\1\20"+
    "\6\0\1\20\2\u02d5\1\u02d6\5\236\3\0\2\20\1\0"+
    "\30\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\15\20\1\u02d7\12\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\17\20\1\u02d8"+
    "\10\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\14\20\1\u02d9\13\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\1\u01fd\27\20"+
    "\1\0\2\20\11\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\1\u02da\27\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\26\20\1\u0171\1\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\10\20\1\u02db\17\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\21\20\1\236\6\20\1\0"+
    "\2\20\11\0\1\20\6\0\10\20\1\236\3\0\2\20"+
    "\1\0\30\20\1\0\2\20\11\0\1\20\6\0\6\20"+
    "\1\236\2\20\3\0\2\20\1\0\30\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\14\20"+
    "\1\u02dc\13\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\4\20\1\u0153\23\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\10\20"+
    "\1\u02dd\17\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\1\236\27\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\21\20\1\u0155"+
    "\6\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\2\20\1\236\25\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\14\20\1\u02de"+
    "\13\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\3\20\1\u0153\24\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\10\20\1\u02df"+
    "\17\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\6\20\1\236\21\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\5\20\1\u02e0"+
    "\22\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\3\20\1\236\24\20\1\0\1\20\11\53"+
    "\1\0\25\53\1\0\17\53\1\u02e1\23\53\1\0\25\53"+
    "\1\0\14\53\1\335\26\53\1\0\25\53\1\0\1\u0215"+
    "\42\53\1\0\25\53\1\0\10\53\1\u02e2\32\53\1\0"+
    "\25\53\1\0\21\53\1\313\21\53\1\0\17\53\1\313"+
    "\5\53\1\0\43\53\1\0\15\53\1\313\7\53\1\0"+
    "\43\53\1\0\25\53\1\0\14\53\1\u02e3\26\53\1\0"+
    "\25\53\1\0\10\53\1\u02e4\32\53\1\0\25\53\1\0"+
    "\1\313\42\53\1\0\25\53\1\0\2\53\1\313\40\53"+
    "\1\0\25\53\1\0\14\53\1\u02e5\26\53\1\0\25\53"+
    "\1\0\10\53\1\u02e6\32\53\1\0\25\53\1\0\6\53"+
    "\1\313\34\53\1\0\25\53\1\0\3\53\1\313\26\53"+
    "\57\0\1\u02e7\66\0\1\366\55\0\1\u022b\101\0\1\u02e8"+
    "\102\0\1\344\41\0\1\344\67\0\1\344\116\0\1\u02e9"+
    "\65\0\1\u02ea\61\0\1\344\73\0\1\344\103\0\1\u02eb"+
    "\65\0\1\u02ec\67\0\1\344\66\0\1\344\26\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\3\125\1\0\21\125"+
    "\1\0\17\125\1\u02ed\14\125\1\0\2\125\1\0\3\125"+
    "\1\0\3\125\1\0\21\125\1\0\14\125\1\u010f\17\125"+
    "\1\0\2\125\1\0\3\125\1\0\3\125\1\0\21\125"+
    "\1\0\1\u0241\33\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\21\125\1\0\10\125\1\u02ee\23\125\1\0"+
    "\2\125\1\0\3\125\1\0\3\125\1\0\21\125\1\0"+
    "\21\125\1\375\12\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\13\125\1\375\5\125\1\0\34\125\1\0"+
    "\2\125\1\0\3\125\1\0\3\125\1\0\11\125\1\375"+
    "\7\125\1\0\34\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\21\125\1\0\14\125\1\u02ef\17\125\1\0"+
    "\2\125\1\0\3\125\1\0\3\125\1\0\21\125\1\0"+
    "\10\125\1\u02f0\23\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\21\125\1\0\1\375\33\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\2\125"+
    "\1\375\31\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\14\125\1\u02f1\17\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\10\125"+
    "\1\u02f2\23\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\6\125\1\375\25\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\3\125"+
    "\1\375\26\125\2\u0114\1\145\2\u0114\1\146\51\u0114\1\u02f3"+
    "\14\u0114\1\145\2\u0114\1\146\46\u0114\1\u012d\17\u0114\1\145"+
    "\2\u0114\1\146\32\u0114\1\u0257\33\u0114\1\145\2\u0114\1\146"+
    "\42\u0114\1\u02f4\23\u0114\1\145\2\u0114\1\146\53\u0114\1\u011b"+
    "\12\u0114\1\145\2\u0114\1\146\23\u0114\1\u011b\42\u0114\1\145"+
    "\2\u0114\1\146\21\u0114\1\u011b\44\u0114\1\145\2\u0114\1\146"+
    "\46\u0114\1\u02f5\17\u0114\1\145\2\u0114\1\146\42\u0114\1\u02f6"+
    "\23\u0114\1\145\2\u0114\1\146\32\u0114\1\u011b\33\u0114\1\145"+
    "\2\u0114\1\146\34\u0114\1\u011b\31\u0114\1\145\2\u0114\1\146"+
    "\46\u0114\1\u02f7\17\u0114\1\145\2\u0114\1\146\42\u0114\1\u02f8"+
    "\23\u0114\1\145\2\u0114\1\146\40\u0114\1\u011b\25\u0114\1\145"+
    "\2\u0114\1\146\35\u0114\1\u011b\26\u0114\2\165\4\0\51\165"+
    "\1\u02f9\11\165\1\0\2\165\4\0\46\165\1\u0146\14\165"+
    "\1\0\2\165\4\0\32\165\1\u026d\30\165\1\0\2\165"+
    "\4\0\42\165\1\u02fa\20\165\1\0\2\165\4\0\53\165"+
    "\1\u0134\7\165\1\0\2\165\4\0\23\165\1\u0134\37\165"+
    "\1\0\2\165\4\0\21\165\1\u0134\41\165\1\0\2\165"+
    "\4\0\46\165\1\u02fb\14\165\1\0\2\165\4\0\42\165"+
    "\1\u02fc\20\165\1\0\2\165\4\0\32\165\1\u0134\30\165"+
    "\1\0\2\165\4\0\34\165\1\u0134\26\165\1\0\2\165"+
    "\4\0\46\165\1\u02fd\14\165\1\0\2\165\4\0\42\165"+
    "\1\u02fe\20\165\1\0\2\165\4\0\40\165\1\u0134\22\165"+
    "\1\0\2\165\4\0\35\165\1\u0134\25\165\1\0\1\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\4\20"+
    "\1\u01fa\23\20\1\0\2\20\11\0\1\20\6\0\11\236"+
    "\3\0\2\20\1\0\30\20\1\0\2\20\11\0\1\20"+
    "\6\0\3\236\6\20\3\0\2\20\1\0\30\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\3\20\1\u02d4\24\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\22\20\1\u02ff\5\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\22\20\1\u0155\5\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\21\20\1\u0300\6\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\15\20\1\u0301\12\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\1\u014e\27\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\4\20"+
    "\1\254\23\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\21\20\1\u0302\6\20\1\0\2\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\4\20"+
    "\1\u0303\23\20\1\0\1\20\11\53\1\0\25\53\1\0"+
    "\22\53\1\u0304\20\53\1\0\25\53\1\0\15\53\1\u0305"+
    "\25\53\1\0\25\53\1\0\1\u0306\42\53\1\0\25\53"+
    "\1\0\4\53\1\317\36\53\1\0\25\53\1\0\21\53"+
    "\1\u0307\10\53\62\0\1\u0308\64\0\1\u0309\54\0\1\u030a"+
    "\75\0\1\350\106\0\1\u030b\10\0\2\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\22\125"+
    "\1\u030c\11\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\15\125\1\u030d\16\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\1\u030e"+
    "\33\125\1\0\2\125\1\0\3\125\1\0\3\125\1\0"+
    "\21\125\1\0\4\125\1\u0101\27\125\1\0\2\125\1\0"+
    "\3\125\1\0\3\125\1\0\21\125\1\0\21\125\1\u030f"+
    "\10\125\2\u0114\1\145\2\u0114\1\146\54\u0114\1\u0310\11\u0114"+
    "\1\145\2\u0114\1\146\47\u0114\1\u0311\16\u0114\1\145\2\u0114"+
    "\1\146\32\u0114\1\u0312\33\u0114\1\145\2\u0114\1\146\36\u0114"+
    "\1\u011f\27\u0114\1\145\2\u0114\1\146\53\u0114\1\u0313\10\u0114"+
    "\2\165\4\0\54\165\1\u0314\6\165\1\0\2\165\4\0"+
    "\47\165\1\u0315\13\165\1\0\2\165\4\0\32\165\1\u0316"+
    "\30\165\1\0\2\165\4\0\36\165\1\u0138\24\165\1\0"+
    "\2\165\4\0\53\165\1\u0317\7\165\1\0\1\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\2\20\1\u0318"+
    "\25\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\4\20\1\u0319\23\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\14\20\1\236"+
    "\13\20\1\0\2\20\11\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\26\20\1\236\1\20\1\0\2\20\11\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\17\20\1\u01fa"+
    "\10\20\1\0\1\20\11\53\1\0\25\53\1\0\2\53"+
    "\1\u031a\40\53\1\0\25\53\1\0\14\53\1\313\26\53"+
    "\1\0\25\53\1\0\12\53\1\313\30\53\1\0\25\53"+
    "\1\0\26\53\1\313\3\53\42\0\1\u031b\103\0\1\344"+
    "\67\0\1\344\105\0\1\344\3\0\2\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\2\125"+
    "\1\u031c\31\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\14\125\1\375\17\125\1\0\2\125"+
    "\1\0\3\125\1\0\3\125\1\0\21\125\1\0\12\125"+
    "\1\375\21\125\1\0\2\125\1\0\3\125\1\0\3\125"+
    "\1\0\21\125\1\0\26\125\1\375\3\125\2\u0114\1\145"+
    "\2\u0114\1\146\34\u0114\1\u031d\31\u0114\1\145\2\u0114\1\146"+
    "\46\u0114\1\u011b\17\u0114\1\145\2\u0114\1\146\44\u0114\1\u011b"+
    "\21\u0114\1\145\2\u0114\1\146\60\u0114\1\u011b\3\u0114\2\165"+
    "\4\0\34\165\1\u031e\26\165\1\0\2\165\4\0\46\165"+
    "\1\u0134\14\165\1\0\2\165\4\0\44\165\1\u0134\16\165"+
    "\1\0\2\165\4\0\60\165\1\u0134\2\165\1\0\1\20"+
    "\11\0\1\20\6\0\11\20\3\0\2\20\1\0\21\20"+
    "\1\u031f\6\20\1\0\2\20\11\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\2\20\1\u0320\25\20\1\0\1\20"+
    "\11\53\1\0\25\53\1\0\21\53\1\u0321\10\53\61\0"+
    "\1\u0322\10\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\3\125\1\0\21\125\1\0\21\125\1\u0323\10\125\2\u0114"+
    "\1\145\2\u0114\1\146\53\u0114\1\u0324\10\u0114\2\165\4\0"+
    "\53\165\1\u0325\7\165\1\0\1\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\15\20\1\254\12\20\1\0"+
    "\2\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\1\u0326\27\20\1\0\1\20\11\53\1\0\25\53\1\0"+
    "\15\53\1\317\14\53\55\0\1\350\14\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\3\125\1\0\21\125\1\0"+
    "\15\125\1\u0101\14\125\2\u0114\1\145\2\u0114\1\146\47\u0114"+
    "\1\u011f\14\u0114\2\165\4\0\47\165\1\u0138\13\165\1\0"+
    "\1\20\11\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\12\20\1\u0327\15\20\1\0\2\20\11\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\12\20\1\u01fa\15\20\1\0"+
    "\1\20";

  private static int [] zzUnpackTrans() {
    int [] result = new int[43964];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\6\0\1\1\2\0\2\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\30\1\1\11\16\1\1\11\17\1"+
    "\1\11\3\1\1\11\6\1\1\11\16\1\1\11\20\1"+
    "\1\11\16\1\2\11\22\1\3\11\52\1\1\11\2\0"+
    "\31\1\2\0\1\11\26\0\31\1\2\0\1\11\2\1"+
    "\2\0\1\1\26\0\31\1\1\0\47\1\2\0\25\1"+
    "\6\0\1\1\16\0\25\1\6\0\1\1\16\0\25\1"+
    "\1\0\13\1\1\11\55\1\25\0\27\1\25\0\77\1"+
    "\17\0\17\1\17\0\42\1\4\0\1\1\1\0\6\1"+
    "\4\0\1\1\1\0\17\1\4\0\4\1\4\0\7\1"+
    "\1\0\1\1\1\0\4\1\1\0\1\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[807];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    public static int errorLine = -1;
    public static int errorColumn = -1;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case Comments: {
              errores.add(new Token("/**", yyline, yycolumn, "Error: llave comentario abierta"));
            }  // fall though
            case 808: break;
            default:
          {   for(Token t: tokens){
    t.print();
  }

  System.out.println("\nErrores\n");
  for(Token t: errores){
    t.print();
  }
  return 0;
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { string.append(yytext()); yybegin(indetifierError);
            }
            // fall through
          case 28: break;
          case 2:
            { 
            }
            // fall through
          case 29: break;
          case 3:
            { System.out.println(yyline);
                                  System.out.println(yycolumn);
                                  throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 30: break;
          case 4:
            { /* ignore */
            }
            // fall through
          case 31: break;
          case 5:
            { string.append(yytext()); yybegin(indetifierState);
            }
            // fall through
          case 32: break;
          case 6:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 33: break;
          case 7:
            { string.setLength(0); yybegin(Chars);
            }
            // fall through
          case 34: break;
          case 8:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 35: break;
          case 9:
            { string.setLength(0);
                                    string.append(yytext());
                                    yybegin(numberState);
            }
            // fall through
          case 36: break;
          case 10:
            { string.append( yytext() );
            }
            // fall through
          case 37: break;
          case 11:
            { yybegin(YYINITIAL);
                                   tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 38: break;
          case 12:
            { yybegin(YYINITIAL);
                                    string.append( yytext() ); 
                                    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada"));
            }
            // fall through
          case 39: break;
          case 13:
            { yybegin(YYINITIAL);
                                    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
            }
            // fall through
          case 40: break;
          case 14:
            { string.append(yytext());
            }
            // fall through
          case 41: break;
          case 15:
            { yybegin(NaturalNumbers);
                                    string.append(yytext());
            }
            // fall through
          case 42: break;
          case 16:
            { yybegin(YYINITIAL);
                                   tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
            }
            // fall through
          case 43: break;
          case 17:
            { if(errorLine == -1){
                                                                    errorLine = yyline;
                                                                    errorColumn = yycolumn;
                                                                  }
            }
            // fall through
          case 44: break;
          case 18:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 45: break;
          case 19:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "identificador"));
                   yybegin(YYINITIAL);
                   string.setLength(0);
            }
            // fall through
          case 46: break;
          case 20:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Error de identificador"));
                   yybegin(YYINITIAL);
                   string.setLength(0);
            }
            // fall through
          case 47: break;
          case 21:
            { errorLine = -1;
                                    errorColumn = -1; 
                                    yybegin(Comments);
            }
            // fall through
          case 48: break;
          case 22:
            { yybegin(lineComment);
            }
            // fall through
          case 49: break;
          case 23:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 50: break;
          case 24:
            { if(errorLine != -1){
                                      errores.add(new Token("*", errorLine, errorColumn, "Error: linea sin * <comentario bloque>"));
                                    }
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 51: break;
          case 25:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 52: break;
          case 26:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 53: break;
          case 27:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
