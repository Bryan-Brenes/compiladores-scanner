// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

/* JFlex example: partial Java language lexer specification */
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int hexaState = 4;
  public static final int numberState = 6;
  public static final int NaturalNumbers = 8;
  public static final int Chars = 10;
  public static final int Comments = 12;
  public static final int lineComment = 14;
  public static final int errorNumeros = 16;
  public static final int stringError = 18;
  public static final int charError = 20;
  public static final int hexaStateC = 22;
  public static final int hexaStateError = 24;
  public static final int hexaStateCError = 26;
  public static final int indetifierState = 28;
  public static final int indetifierError = 30;
  public static final int decimalError = 32;
  public static final int OperadoresState = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15, 16, 16
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\3\u1f00\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\3\u1f00\1\u3e00\1\u3f00\4\u1f00"+
    "\1\u4000\11\u1f00\3\u0100\1\u4100\1\u4200\13\u1f00\4\u0100\1\u4300"+
    "\63\u1f00\2\u0100\1\u4400\4\u1f00\1\u4500\100\u1f00\1\u4600\40\u1f00"+
    "\1\u4700\1\u4800\1\u1f00\1\u4900\1\u4a00\1\u4b00\1\u4c00\26\u1f00"+
    "\1\u4d00\21\u1f00\246\u0100\1\u4e00\20\u0100\1\u4f00\1\u5000\77\u1f00"+
    "\2\u0100\1\u5000\u0b05\u1f00\1\u5100\1\u5200\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\5\1\6\1\7\1\3\1\10\1\11\1\12\1\13"+
    "\2\11\1\14\1\6\1\11\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\27\1\11\1\31\1\32\1\33\1\34\1\11\1\3"+
    "\6\35\24\10\1\11\1\3\2\11\1\10\1\3\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\10\1\47\1\50\1\51\1\52\1\53\1\54\1\10"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\11\1\66\2\11\41\0\2\3\4\10\4\3"+
    "\1\10\2\3\1\0\7\3\1\10\4\3\1\10\5\3"+
    "\27\10\1\3\37\10\1\3\u01ca\10\4\3\14\10\16\3"+
    "\5\10\7\3\1\10\1\3\1\10\21\3\160\0\5\10"+
    "\1\3\2\10\2\3\4\10\10\3\1\10\1\3\3\10"+
    "\1\3\1\10\1\3\24\10\1\3\123\10\1\3\213\10"+
    "\1\3\5\0\2\3\236\10\11\3\46\10\2\3\1\10"+
    "\7\3\47\10\7\3\1\10\1\3\55\0\1\3\1\0"+
    "\1\3\2\0\1\3\2\0\1\3\1\0\10\3\33\10"+
    "\5\3\3\10\15\3\5\0\6\3\1\10\4\3\13\0"+
    "\5\3\53\10\37\0\4\3\2\10\1\0\143\10\1\3"+
    "\1\10\10\0\1\3\6\0\2\10\2\0\1\3\4\0"+
    "\2\10\12\0\3\10\2\3\1\10\17\3\1\0\1\10"+
    "\1\0\36\10\33\0\2\3\131\10\13\0\1\10\16\3"+
    "\12\0\41\10\11\0\2\10\4\3\1\10\5\3\26\10"+
    "\4\0\1\10\11\0\1\10\3\0\1\10\5\0\22\3"+
    "\31\10\3\0\104\3\1\10\1\3\13\10\67\3\33\0"+
    "\1\3\4\0\66\10\3\0\1\10\22\0\1\10\7\0"+
    "\12\10\2\0\2\3\12\0\1\3\7\10\1\3\7\10"+
    "\1\3\3\0\1\3\10\10\2\3\2\10\2\3\26\10"+
    "\1\3\7\10\1\3\1\10\3\3\4\10\2\3\1\0"+
    "\1\10\7\0\2\3\2\0\2\3\3\0\1\10\10\3"+
    "\1\0\4\3\2\10\1\3\3\10\2\0\2\3\12\0"+
    "\4\10\7\3\1\10\5\3\3\0\1\3\6\10\4\3"+
    "\2\10\2\3\26\10\1\3\7\10\1\3\2\10\1\3"+
    "\2\10\1\3\2\10\2\3\1\0\1\3\5\0\4\3"+
    "\2\0\2\3\3\0\3\3\1\0\7\3\4\10\1\3"+
    "\1\10\7\3\14\0\3\10\1\0\13\3\3\0\1\3"+
    "\11\10\1\3\3\10\1\3\26\10\1\3\7\10\1\3"+
    "\2\10\1\3\5\10\2\3\1\0\1\10\10\0\1\3"+
    "\3\0\1\3\3\0\2\3\1\10\17\3\2\10\2\0"+
    "\2\3\12\0\1\3\1\10\17\3\3\0\1\3\10\10"+
    "\2\3\2\10\2\3\26\10\1\3\7\10\1\3\2\10"+
    "\1\3\5\10\2\3\1\0\1\10\7\0\2\3\2\0"+
    "\2\3\3\0\10\3\2\0\4\3\2\10\1\3\3\10"+
    "\2\0\2\3\12\0\1\3\1\10\20\3\1\0\1\10"+
    "\1\3\6\10\3\3\3\10\1\3\4\10\3\3\2\10"+
    "\1\3\1\10\1\3\2\10\3\3\2\10\3\3\3\10"+
    "\3\3\14\10\4\3\5\0\3\3\3\0\1\3\4\0"+
    "\2\3\1\10\6\3\1\0\16\3\12\0\11\3\1\10"+
    "\7\3\3\0\1\3\10\10\1\3\3\10\1\3\27\10"+
    "\1\3\12\10\1\3\5\10\3\3\1\10\7\0\1\3"+
    "\3\0\1\3\4\0\7\3\2\0\1\3\2\10\6\3"+
    "\2\10\2\0\2\3\12\0\22\3\2\0\1\3\10\10"+
    "\1\3\3\10\1\3\27\10\1\3\12\10\1\3\5\10"+
    "\2\3\1\0\1\10\7\0\1\3\3\0\1\3\4\0"+
    "\7\3\2\0\7\3\1\10\1\3\2\10\2\0\2\3"+
    "\12\0\1\3\2\10\17\3\2\0\1\3\10\10\1\3"+
    "\3\10\1\3\51\10\2\3\1\10\7\0\1\3\3\0"+
    "\1\3\4\0\1\10\10\3\1\0\10\3\2\10\2\0"+
    "\2\3\12\0\12\3\6\10\2\3\2\0\1\3\22\10"+
    "\3\3\30\10\1\3\11\10\1\3\1\10\2\3\7\10"+
    "\3\3\1\0\4\3\6\0\1\3\1\0\1\3\10\0"+
    "\22\3\2\0\15\3\60\10\1\0\2\10\7\0\4\3"+
    "\10\10\10\0\1\3\12\0\47\3\2\10\1\3\1\10"+
    "\2\3\2\10\1\3\1\10\2\3\1\10\6\3\4\10"+
    "\1\3\7\10\1\3\3\10\1\3\1\10\1\3\1\10"+
    "\2\3\2\10\1\3\4\10\1\0\2\10\6\0\1\3"+
    "\2\0\1\10\2\3\5\10\1\3\1\10\1\3\6\0"+
    "\2\3\12\0\2\3\4\10\40\3\1\10\27\3\2\0"+
    "\6\3\12\0\13\3\1\0\1\3\1\0\1\3\1\0"+
    "\4\3\2\0\10\10\1\3\44\10\4\3\24\0\1\3"+
    "\2\0\5\10\13\0\1\3\44\0\11\3\1\0\71\3"+
    "\53\10\24\0\1\10\12\0\6\3\6\10\4\0\4\10"+
    "\3\0\1\10\3\0\2\10\7\0\3\10\4\0\15\10"+
    "\14\0\1\10\17\0\2\3\46\10\1\3\1\10\5\3"+
    "\1\10\2\3\53\10\1\3\115\10\1\3\4\10\2\3"+
    "\7\10\1\3\1\10\1\3\4\10\2\3\51\10\1\3"+
    "\4\10\2\3\41\10\1\3\4\10\2\3\7\10\1\3"+
    "\1\10\1\3\4\10\2\3\17\10\1\3\71\10\1\3"+
    "\4\10\2\3\103\10\2\3\3\0\40\3\20\10\20\3"+
    "\125\10\14\3\u016c\10\2\3\21\10\1\3\32\10\5\3"+
    "\113\10\3\3\3\10\17\3\15\10\1\3\4\10\3\0"+
    "\13\3\22\10\3\0\13\3\22\10\2\0\14\3\15\10"+
    "\1\3\3\10\1\3\2\0\14\3\64\10\40\0\3\3"+
    "\1\10\3\3\2\10\1\0\2\3\12\0\41\3\3\0"+
    "\2\3\12\0\6\3\130\10\10\3\51\10\1\0\1\10"+
    "\5\3\106\10\12\3\35\10\3\3\14\0\4\3\14\0"+
    "\12\3\12\0\36\10\2\3\5\10\13\3\54\10\4\3"+
    "\21\0\7\10\2\0\6\3\12\0\46\3\27\10\5\0"+
    "\4\3\65\10\12\0\1\3\35\0\2\3\13\0\6\3"+
    "\12\0\15\3\1\10\130\3\5\0\57\10\21\0\7\10"+
    "\4\3\12\0\21\3\11\0\14\3\3\0\36\10\15\0"+
    "\2\10\12\0\54\10\16\0\14\3\44\10\24\0\10\3"+
    "\12\0\3\3\3\10\12\0\44\10\122\3\3\0\1\3"+
    "\25\0\4\10\1\0\4\10\3\0\2\10\11\3\300\10"+
    "\47\0\25\3\4\0\26\10\2\3\6\10\2\3\46\10"+
    "\2\3\6\10\2\3\10\10\1\3\1\10\1\3\1\10"+
    "\1\3\1\10\1\3\37\10\2\3\65\10\1\3\7\10"+
    "\1\3\1\10\3\3\3\10\1\3\7\10\3\3\4\10"+
    "\2\3\6\10\4\3\15\10\5\3\3\10\1\3\7\10"+
    "\16\3\5\0\32\3\5\0\20\3\2\10\23\3\1\10"+
    "\13\3\5\0\5\3\6\0\1\3\1\10\15\3\1\10"+
    "\20\3\15\10\3\3\33\10\25\3\15\0\4\3\1\0"+
    "\3\3\14\0\21\3\1\10\4\3\1\10\2\3\12\10"+
    "\1\3\1\10\3\3\5\10\6\3\1\10\1\3\1\10"+
    "\1\3\1\10\1\3\4\10\1\3\13\10\2\3\4\10"+
    "\5\3\5\10\4\3\1\10\21\3\51\10\u0177\3\57\10"+
    "\1\3\57\10\1\3\205\10\6\3\4\10\3\0\2\10"+
    "\14\3\46\10\1\3\1\10\5\3\1\10\2\3\70\10"+
    "\7\3\1\10\17\3\1\0\27\10\11\3\7\10\1\3"+
    "\7\10\1\3\7\10\1\3\7\10\1\3\7\10\1\3"+
    "\7\10\1\3\7\10\1\3\7\10\1\3\40\0\57\3"+
    "\1\10\325\3\3\10\31\3\11\10\6\0\1\3\5\10"+
    "\2\3\5\10\4\3\126\10\2\3\2\0\2\3\3\10"+
    "\1\3\132\10\1\3\4\10\5\3\51\10\3\3\136\10"+
    "\21\3\33\10\65\3\306\10\112\3\315\10\63\3\215\10"+
    "\103\3\56\10\2\3\15\10\3\3\20\10\12\0\2\10"+
    "\24\3\57\10\1\0\4\3\12\0\1\3\31\10\7\3"+
    "\1\0\120\10\2\0\45\3\11\10\2\3\147\10\2\3"+
    "\4\10\1\3\4\10\14\3\13\10\115\3\12\10\1\0"+
    "\3\10\1\0\4\10\1\0\27\10\5\0\20\3\1\10"+
    "\7\3\64\10\14\3\2\0\62\10\21\0\13\3\12\0"+
    "\6\3\22\0\6\10\3\3\1\10\4\3\12\0\34\10"+
    "\10\0\2\3\27\10\15\0\14\3\35\10\3\3\4\0"+
    "\57\10\16\0\16\3\1\10\12\0\46\3\51\10\16\0"+
    "\11\3\3\10\1\0\10\10\2\0\2\3\12\0\6\3"+
    "\27\10\3\3\1\10\1\0\4\3\60\10\1\0\1\10"+
    "\3\0\2\10\2\0\5\10\2\0\1\10\1\0\1\10"+
    "\30\3\3\10\2\3\13\10\5\0\2\3\3\10\2\0"+
    "\12\3\6\10\2\3\6\10\2\3\6\10\11\3\7\10"+
    "\1\3\7\10\221\3\43\10\10\0\1\3\2\0\2\3"+
    "\12\0\6\3\244\10\14\3\27\10\4\3\61\10\4\3"+
    "\156\10\2\3\152\10\46\3\7\10\14\3\5\10\5\3"+
    "\1\10\1\0\12\10\1\3\15\10\1\3\5\10\1\3"+
    "\1\10\1\3\2\10\1\3\2\10\1\3\154\10\41\3"+
    "\153\10\22\3\100\10\2\3\66\10\50\3\15\10\3\3"+
    "\20\0\20\3\7\0\14\3\2\10\30\3\3\10\31\3"+
    "\1\10\6\3\5\10\1\3\207\10\2\3\1\0\4\3"+
    "\1\10\13\3\12\0\7\3\32\10\4\3\1\10\1\3"+
    "\32\10\13\3\131\10\3\3\6\10\2\3\6\10\2\3"+
    "\6\10\2\3\3\10\3\3\2\10\3\3\2\10\22\3"+
    "\3\0\4\3\14\10\1\3\32\10\1\3\23\10\1\3"+
    "\2\10\1\3\17\10\2\3\16\10\42\3\173\10\105\3"+
    "\65\10\210\3\1\0\202\3\35\10\3\3\61\10\57\3"+
    "\37\10\21\3\33\10\65\3\36\10\2\3\44\10\4\3"+
    "\10\10\1\3\5\10\52\3\236\10\2\3\12\0\126\3"+
    "\6\10\2\3\1\10\1\3\54\10\1\3\2\10\3\3"+
    "\1\10\2\3\27\10\252\3\26\10\12\3\32\10\106\3"+
    "\70\10\6\3\2\10\100\3\1\10\3\0\1\3\2\0"+
    "\5\3\4\0\4\10\1\3\3\10\1\3\33\10\4\3"+
    "\3\0\4\3\1\0\40\3\35\10\203\3\66\10\12\3"+
    "\26\10\12\3\23\10\215\3\111\10\267\3\3\0\65\10"+
    "\17\0\37\3\12\0\20\3\3\0\55\10\13\0\2\3"+
    "\1\0\22\3\31\10\7\3\12\0\6\3\3\0\44\10"+
    "\16\0\1\3\12\0\100\3\3\0\60\10\16\0\4\10"+
    "\13\3\12\0\246\3\53\10\15\0\10\3\12\0\66\3"+
    "\157\10\221\3\143\10\235\3\57\10\321\3\71\10\307\3"+
    "\105\10\13\3\1\10\56\0\20\3\4\0\15\10\140\3"+
    "\2\10\u0163\3\5\0\3\3\26\0\2\3\7\0\36\3"+
    "\4\0\224\3\3\0\273\3\125\10\1\3\107\10\1\3"+
    "\2\10\2\3\1\10\2\3\2\10\2\3\4\10\1\3"+
    "\14\10\1\3\1\10\1\3\7\10\1\3\101\10\1\3"+
    "\4\10\2\3\10\10\1\3\7\10\1\3\34\10\1\3"+
    "\4\10\1\3\5\10\1\3\1\10\3\3\7\10\1\3"+
    "\u0154\10\2\3\31\10\1\3\31\10\1\3\37\10\1\3"+
    "\31\10\1\3\37\10\1\3\31\10\1\3\37\10\1\3"+
    "\31\10\1\3\37\10\1\3\31\10\1\3\10\10\2\3"+
    "\62\0\4\10\1\3\33\10\1\3\2\10\1\3\1\10"+
    "\2\3\1\10\1\3\12\10\1\3\4\10\1\3\1\10"+
    "\1\3\1\10\6\3\1\10\4\3\1\10\1\3\1\10"+
    "\1\3\1\10\1\3\3\10\1\3\2\10\1\3\1\10"+
    "\2\3\1\10\1\3\1\10\1\3\1\10\1\3\1\10"+
    "\1\3\1\10\1\3\2\10\1\3\1\10\2\3\4\10"+
    "\1\3\7\10\1\3\4\10\1\3\4\10\1\3\1\10"+
    "\1\3\12\10\1\3\21\10\5\3\3\10\1\3\5\10"+
    "\1\3\21\10\104\3\327\10\51\3\65\10\13\3\336\10"+
    "\343\3\1\0\36\3\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21248];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\21\0\1\1\2\2\1\3\1\4\1\5\2\3\1\6"+
    "\1\3\1\1\1\3\2\7\2\3\21\5\1\1\1\10"+
    "\2\11\1\12\1\13\15\10\1\14\2\15\1\16\1\17"+
    "\1\10\1\20\5\10\11\14\1\21\2\22\3\23\1\21"+
    "\2\24\2\23\2\21\1\25\13\21\2\22\1\24\2\22"+
    "\2\21\2\26\1\27\1\30\1\1\2\31\16\1\1\32"+
    "\2\33\15\32\2\34\15\24\16\32\12\35\1\36\5\37"+
    "\1\24\1\40\1\41\15\1\3\0\1\42\1\43\1\44"+
    "\1\45\1\5\1\46\47\5\2\10\1\46\26\10\1\0"+
    "\1\10\1\46\2\0\1\10\27\0\1\32\1\47\2\0"+
    "\1\46\26\0\2\32\1\46\26\32\1\45\1\0\1\50"+
    "\16\5\1\46\2\5\1\46\23\5\1\51\1\5\6\10"+
    "\1\46\16\10\6\0\1\46\24\0\1\46\16\0\6\32"+
    "\1\46\16\32\1\0\3\5\1\46\1\52\6\5\1\53"+
    "\1\54\17\5\1\52\6\5\1\46\25\10\1\46\25\0"+
    "\1\46\25\0\1\46\25\32\1\46\2\5\1\46\26\5"+
    "\17\10\36\0\17\32\1\5\2\46\7\5\1\46\2\5"+
    "\4\10\1\46\1\10\4\0\1\46\5\0\1\46\1\0"+
    "\4\32\1\46\1\32\5\5\4\10\10\0\4\32\2\5"+
    "\1\10\2\0\1\32\2\5\1\10\2\0\1\32\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[782];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03a7\0\u03de\0\u0415\0\u03a7\0\u044c\0\u03a7"+
    "\0\u0483\0\u03a7\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785"+
    "\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d"+
    "\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u03a7\0\u0a50\0\u03a7\0\u03a7"+
    "\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u03a7\0\u03a7\0\u0d52"+
    "\0\u03a7\0\u03a7\0\u0d89\0\u03a7\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d"+
    "\0\u1054\0\u108b\0\u03a7\0\u03a7\0\u10c2\0\u10f9\0\u03a7\0\u1130"+
    "\0\u10f9\0\u03a7\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a"+
    "\0\u12b1\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d"+
    "\0\u1054\0\u108b\0\u12e8\0\u131f\0\u1356\0\u131f\0\u138d\0\u13c4"+
    "\0\u127a\0\u13fb\0\u03a7\0\u1432\0\u03a7\0\u03a7\0\u1469\0\u03a7"+
    "\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621"+
    "\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u03a7"+
    "\0\u03a7\0\u17d9\0\u120c\0\u1243\0\u127a\0\u12b1\0\u0ed3\0\u0f0a"+
    "\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u03a7"+
    "\0\u1810\0\u120c\0\u1243\0\u127a\0\u12b1\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u1847\0\u187e"+
    "\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36"+
    "\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u03a7\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u03a7\0\u03a7"+
    "\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u03a7\0\u03a7\0\u120c"+
    "\0\u1243\0\u127a\0\u12b1\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u1c5c\0\u1c93\0\u1cca\0\u03a7"+
    "\0\u03a7\0\u1d01\0\u055f\0\u1d38\0\u044c\0\u1d6f\0\u1da6\0\u1ddd"+
    "\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95"+
    "\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d"+
    "\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305"+
    "\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd"+
    "\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u0a19\0\u263e"+
    "\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6"+
    "\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae"+
    "\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u03a7"+
    "\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7"+
    "\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f"+
    "\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057"+
    "\0\u1469\0\u308e\0\u30c5\0\u308e\0\u30fc\0\u3133\0\u1469\0\u316a"+
    "\0\u31a1\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322"+
    "\0\u3359\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da"+
    "\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u1847"+
    "\0\u3692\0\u36c9\0\u3700\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813"+
    "\0\u384a\0\u3881\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb"+
    "\0\u3a02\0\u3a39\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u1c93\0\u3b4c"+
    "\0\u3b83\0\u3bba\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04"+
    "\0\u3d3b\0\u3d72\0\u3da9\0\u3de0\0\u3e17\0\u3e4e\0\u3e85\0\u3ebc"+
    "\0\u3ef3\0\u3f2a\0\u3f61\0\u3f98\0\u3fcf\0\u4006\0\u403d\0\u4074"+
    "\0\u40ab\0\u40e2\0\u4119\0\u4150\0\u4187\0\u41be\0\u41f5\0\u422c"+
    "\0\u4263\0\u429a\0\u42d1\0\u4308\0\u433f\0\u4376\0\u044c\0\u43ad"+
    "\0\u43e4\0\u441b\0\u4452\0\u4489\0\u44c0\0\u44f7\0\u452e\0\u4565"+
    "\0\u459c\0\u45d3\0\u460a\0\u4641\0\u4678\0\u46af\0\u46e6\0\u471d"+
    "\0\u4754\0\u478b\0\u47c2\0\u47f9\0\u4830\0\u4867\0\u489e\0\u48d5"+
    "\0\u490c\0\u4943\0\u497a\0\u49b1\0\u49e8\0\u4a1f\0\u4a56\0\u4a8d"+
    "\0\u4ac4\0\u4afb\0\u4b32\0\u4b69\0\u4ba0\0\u4bd7\0\u4c0e\0\u4c45"+
    "\0\u4c7c\0\u4cb3\0\u4cea\0\u4d21\0\u4d58\0\u4d8f\0\u4dc6\0\u4dfd"+
    "\0\u4e34\0\u4e6b\0\u4ea2\0\u4ed9\0\u4f10\0\u4f47\0\u4f7e\0\u4fb5"+
    "\0\u4fec\0\u5023\0\u505a\0\u5091\0\u50c8\0\u50ff\0\u5136\0\u516d"+
    "\0\u51a4\0\u51db\0\u5212\0\u5249\0\u5280\0\u52b7\0\u52ee\0\u5325"+
    "\0\u535c\0\u5393\0\u53ca\0\u5401\0\u5438\0\u546f\0\u54a6\0\u54dd"+
    "\0\u5514\0\u554b\0\u5582\0\u55b9\0\u3b83\0\u55f0\0\u5627\0\u565e"+
    "\0\u5695\0\u56cc\0\u5703\0\u573a\0\u5771\0\u57a8\0\u57df\0\u5816"+
    "\0\u03a7\0\u03a7\0\u584d\0\u5884\0\u58bb\0\u58f2\0\u5929\0\u5960"+
    "\0\u5997\0\u59ce\0\u5a05\0\u5a3c\0\u5a73\0\u5aaa\0\u5ae1\0\u5b18"+
    "\0\u5b4f\0\u044c\0\u5b86\0\u5bbd\0\u5bf4\0\u5c2b\0\u5c62\0\u5c99"+
    "\0\u5cd0\0\u5d07\0\u5d3e\0\u5d75\0\u5dac\0\u5de3\0\u5e1a\0\u5e51"+
    "\0\u5e88\0\u5ebf\0\u5ef6\0\u5f2d\0\u5f64\0\u5f9b\0\u5fd2\0\u6009"+
    "\0\u6040\0\u6077\0\u60ae\0\u60e5\0\u611c\0\u6153\0\u618a\0\u61c1"+
    "\0\u61f8\0\u622f\0\u6266\0\u629d\0\u62d4\0\u630b\0\u6342\0\u6379"+
    "\0\u63b0\0\u63e7\0\u641e\0\u6455\0\u648c\0\u64c3\0\u64fa\0\u6531"+
    "\0\u6568\0\u659f\0\u65d6\0\u660d\0\u6644\0\u667b\0\u66b2\0\u66e9"+
    "\0\u6720\0\u6757\0\u678e\0\u67c5\0\u67fc\0\u6833\0\u686a\0\u68a1"+
    "\0\u68d8\0\u690f\0\u6946\0\u697d\0\u69b4\0\u69eb\0\u6a22\0\u6a59"+
    "\0\u6a90\0\u6ac7\0\u6afe\0\u6b35\0\u6b6c\0\u6ba3\0\u6bda\0\u6c11"+
    "\0\u6c48\0\u6c7f\0\u6cb6\0\u6ced\0\u6d24\0\u6d5b\0\u6d92\0\u6dc9"+
    "\0\u6e00\0\u6e37\0\u6e6e\0\u6ea5\0\u6edc\0\u6f13\0\u6f4a\0\u6f81"+
    "\0\u6fb8\0\u6fef\0\u7026\0\u705d\0\u7094\0\u70cb\0\u7102\0\u7139"+
    "\0\u7170\0\u71a7\0\u71de\0\u7215\0\u724c\0\u7283\0\u72ba\0\u72f1"+
    "\0\u7328\0\u735f\0\u7396\0\u73cd\0\u7404\0\u743b\0\u7472\0\u74a9"+
    "\0\u74e0\0\u7517\0\u754e\0\u7585\0\u75bc\0\u75f3\0\u762a\0\u7661"+
    "\0\u7698\0\u76cf\0\u7706\0\u773d\0\u7774\0\u77ab\0\u77e2\0\u7819"+
    "\0\u7850\0\u7887\0\u78be\0\u78f5\0\u792c\0\u7963\0\u799a\0\u79d1"+
    "\0\u7a08\0\u7a3f\0\u7a76\0\u7aad\0\u7ae4\0\u7b1b\0\u7b52\0\u7b89"+
    "\0\u7bc0\0\u7bf7\0\u7c2e\0\u7c65\0\u7c9c\0\u7cd3\0\u7d0a\0\u7d41"+
    "\0\u7d78\0\u7daf\0\u7de6\0\u7e1d\0\u7e54\0\u7e8b\0\u7ec2\0\u7ef9"+
    "\0\u7f30\0\u7f67\0\u7f9e\0\u7fd5\0\u800c\0\u8043\0\u807a\0\u80b1"+
    "\0\u80e8\0\u811f\0\u8156\0\u818d\0\u81c4\0\u81fb\0\u8232\0\u8269"+
    "\0\u82a0\0\u82d7\0\u830e\0\u8345\0\u837c\0\u83b3\0\u83ea\0\u8421"+
    "\0\u4263\0\u8458\0\u848f\0\u84c6\0\u84fd\0\u8534\0\u856b\0\u4754"+
    "\0\u85a2\0\u85d9\0\u8610\0\u8647\0\u867e\0\u4bd7\0\u86b5\0\u86ec"+
    "\0\u8723\0\u875a\0\u8791\0\u505a\0\u87c8\0\u87ff\0\u8836\0\u886d"+
    "\0\u88a4\0\u54dd\0\u88db\0\u8912\0\u8949\0\u8980\0\u89b7\0\u89ee"+
    "\0\u8a25\0\u8a5c\0\u8a93\0\u8aca\0\u8b01\0\u8b38\0\u8b6f\0\u8ba6"+
    "\0\u8bdd\0\u8c14\0\u8c4b\0\u8c82\0\u8cb9\0\u8cf0\0\u8d27\0\u8d5e"+
    "\0\u8d95\0\u8dcc\0\u8e03\0\u8e3a\0\u8e71\0\u8ea8\0\u8edf\0\u8f16"+
    "\0\u8f4d\0\u8f84\0\u8fbb\0\u8ff2\0\u9029\0\u9060";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[782];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\2\23\1\22\1\24\1\23\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\25\1\33\1\34\1\35\1\36"+
    "\10\37\1\30\1\40\1\25\1\41\1\27\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\27\1\50\1\51\2\27"+
    "\1\52\2\27\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\27\1\62\1\27\1\63\2\64\1\65\1\64"+
    "\1\66\2\64\1\67\3\64\1\70\24\64\1\71\1\72"+
    "\1\73\1\74\2\64\1\75\2\64\1\76\2\64\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\4\64\1\106"+
    "\2\107\1\106\1\110\1\107\1\106\1\111\3\106\1\112"+
    "\4\106\11\113\1\114\3\106\3\115\1\116\1\117\1\120"+
    "\1\121\2\106\1\122\2\106\1\123\2\106\1\124\1\125"+
    "\1\126\1\127\1\130\1\131\1\132\4\106\1\133\2\134"+
    "\1\133\1\135\1\134\1\136\2\133\1\137\1\140\1\133"+
    "\1\136\1\141\1\142\1\136\11\143\1\137\1\144\1\136"+
    "\1\145\3\133\1\146\1\147\1\150\1\151\2\133\1\152"+
    "\2\133\1\153\2\133\1\154\1\155\1\156\1\157\1\160"+
    "\1\161\1\162\3\133\1\163\1\133\2\134\1\133\1\135"+
    "\1\134\1\164\2\133\1\134\1\165\1\133\1\164\1\166"+
    "\1\133\1\164\11\143\1\134\1\167\1\164\1\170\3\133"+
    "\1\146\1\147\1\171\1\151\2\133\1\152\2\133\1\153"+
    "\2\133\1\154\1\155\1\156\1\157\1\160\1\161\1\162"+
    "\3\133\1\172\2\64\1\173\1\64\1\174\2\64\1\175"+
    "\3\64\1\176\24\64\1\71\1\72\1\73\1\74\2\64"+
    "\1\75\2\64\1\76\2\64\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\4\64\2\177\1\200\1\177\1\201"+
    "\7\177\1\202\23\177\1\203\1\204\1\205\1\206\2\177"+
    "\1\207\2\177\1\210\2\177\1\211\1\212\1\213\1\214"+
    "\1\215\1\216\1\217\4\177\2\220\1\221\1\220\1\222"+
    "\33\220\1\223\1\224\1\225\1\226\2\220\1\227\2\220"+
    "\1\230\2\220\1\231\1\232\1\233\1\234\1\235\1\236"+
    "\1\237\4\220\1\142\2\240\1\142\1\241\1\240\32\142"+
    "\1\242\1\243\1\244\1\245\2\142\1\246\2\142\1\247"+
    "\2\142\1\250\1\251\1\252\1\253\1\254\1\255\1\256"+
    "\4\142\7\257\1\221\3\257\1\221\24\257\1\260\1\261"+
    "\1\262\1\263\2\257\1\264\2\257\1\265\2\257\1\266"+
    "\1\267\1\270\1\271\1\272\1\273\1\274\4\257\1\275"+
    "\2\107\1\275\1\110\1\107\1\275\1\112\3\275\1\111"+
    "\4\275\11\113\1\114\3\275\3\115\1\116\1\117\1\120"+
    "\1\121\2\275\1\276\2\275\1\277\2\275\1\300\1\301"+
    "\1\302\1\303\1\304\1\305\1\306\4\275\7\220\1\221"+
    "\30\220\1\223\1\224\1\225\1\226\2\220\1\227\2\220"+
    "\1\230\2\220\1\231\1\232\1\233\1\234\1\235\1\236"+
    "\1\237\17\220\1\221\24\220\1\223\1\224\1\225\1\226"+
    "\2\220\1\227\2\220\1\230\2\220\1\231\1\232\1\233"+
    "\1\234\1\235\1\236\1\237\4\220\2\142\1\307\2\142"+
    "\1\310\1\311\2\142\1\310\1\312\1\142\2\311\1\142"+
    "\1\311\11\142\1\310\1\313\1\311\1\314\3\142\1\242"+
    "\1\243\1\244\1\245\2\142\1\246\2\142\1\247\2\142"+
    "\1\250\1\251\1\252\1\253\1\254\1\255\1\256\3\142"+
    "\1\315\2\142\1\316\35\142\1\242\1\243\1\244\1\245"+
    "\2\142\1\246\2\142\1\247\2\142\1\250\1\251\1\252"+
    "\1\253\1\254\1\255\1\256\6\142\1\317\35\142\1\242"+
    "\1\243\1\244\1\245\2\142\1\246\2\142\1\247\2\142"+
    "\1\250\1\251\1\252\1\253\1\254\1\255\1\256\4\142"+
    "\40\22\1\320\1\321\1\322\1\323\2\22\1\324\2\22"+
    "\1\325\2\22\1\326\1\327\1\330\1\331\1\332\1\333"+
    "\1\334\4\22\71\0\1\23\117\0\1\30\33\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\31\27\13\0\1\30"+
    "\71\0\1\335\2\0\1\336\12\0\1\30\51\0\1\337"+
    "\1\0\11\37\52\0\1\340\2\0\1\341\13\0\1\30"+
    "\43\0\1\342\7\0\11\343\4\0\31\342\11\0\1\342"+
    "\7\0\11\37\4\0\31\342\33\0\2\30\66\0\2\30"+
    "\32\0\1\27\7\0\1\27\7\0\11\27\4\0\4\27"+
    "\1\344\14\27\1\345\7\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\1\27\1\346\14\27\1\347\1\27"+
    "\1\350\6\27\1\351\1\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\1\27\1\352\14\27\1\353\12\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\1\27"+
    "\1\354\3\27\1\355\10\27\1\345\12\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\13\27\1\356\1\27"+
    "\1\357\4\27\1\360\6\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\1\27\1\361\7\27\1\362\4\27"+
    "\1\363\1\27\1\364\2\27\1\365\5\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\5\27\1\366\10\27"+
    "\1\367\12\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\6\27\1\345\5\27\1\370\1\371\13\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\1\27\1\372"+
    "\7\27\1\373\4\27\1\374\12\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\1\27\1\375\16\27\1\376"+
    "\2\27\1\377\5\27\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\5\27\1\u0100\23\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\5\27\1\u0101\10\27\1\u0102"+
    "\3\27\1\u0103\5\27\1\u0104\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\10\27\1\u0105\7\27\1\u0106\10\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\6\27"+
    "\1\u0107\2\27\1\u0108\17\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\1\27\1\363\7\27\1\u0109\17\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\5\27"+
    "\1\u010a\2\27\1\u010b\20\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\5\27\1\u010c\23\27\67\0\1\30"+
    "\2\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\53\64\2\0\1\65\64\0\2\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\37\64\1\u010d\15\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\26\64\1\u010e"+
    "\10\64\1\u010f\15\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\34\64\1\u0110\1\64\1\u0111\16\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\22\64\1\u0112"+
    "\14\64\1\u0113\1\64\1\u0114\2\64\1\u0115\10\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\27\64\1\u010f"+
    "\5\64\1\u0116\1\u0117\16\64\1\0\1\64\1\0\2\64"+
    "\1\0\3\64\1\0\22\64\1\u0118\14\64\1\u0119\15\64"+
    "\1\0\1\64\1\0\2\64\1\0\3\64\1\0\22\64"+
    "\1\u011a\16\64\1\u011b\2\64\1\u011c\10\64\1\0\1\64"+
    "\1\0\2\64\1\0\3\64\1\0\26\64\1\u011d\26\64"+
    "\1\0\1\64\1\0\2\64\1\0\3\64\1\0\37\64"+
    "\1\u011e\3\64\1\u011f\11\64\1\0\1\64\1\0\2\64"+
    "\1\0\3\64\1\0\31\64\1\u0120\7\64\1\u0121\13\64"+
    "\1\0\1\64\1\0\2\64\1\0\3\64\1\0\27\64"+
    "\1\u0122\2\64\1\u0123\22\64\1\0\1\64\1\0\2\64"+
    "\1\0\3\64\1\0\22\64\1\u0113\7\64\1\u0124\22\64"+
    "\1\0\1\64\1\0\2\64\1\0\3\64\1\0\31\64"+
    "\1\u0125\21\64\2\0\1\107\104\0\11\113\73\0\7\115"+
    "\60\0\7\115\7\0\1\u0126\50\0\5\115\1\u0127\1\115"+
    "\7\0\1\u0128\50\0\7\115\4\0\1\u0129\1\0\1\u012a"+
    "\51\0\1\115\1\u012b\5\115\7\0\1\u012c\1\0\1\u012d"+
    "\2\0\1\u012e\51\0\1\u0128\5\0\1\u012f\1\u0130\52\0"+
    "\1\u0131\14\0\1\u0132\51\0\1\u0133\16\0\1\u0134\2\0"+
    "\1\u0135\50\0\1\u0136\77\0\1\u0137\3\0\1\u0138\54\0"+
    "\1\u0139\7\0\1\u013a\54\0\1\u013b\2\0\1\u013c\56\0"+
    "\1\u012c\7\0\1\u013d\65\0\1\u013e\23\0\1\134\117\0"+
    "\1\137\45\0\1\137\74\0\11\143\70\0\2\137\66\0"+
    "\2\137\105\0\1\u0126\55\0\1\u013f\10\0\1\u0128\63\0"+
    "\1\u0129\1\0\1\u012a\52\0\1\u0140\14\0\1\u012c\1\0"+
    "\1\u012d\2\0\1\u012e\74\0\1\137\33\0\1\134\45\0"+
    "\1\134\106\0\2\134\66\0\2\134\120\0\1\134\2\0"+
    "\1\173\64\0\2\u0141\1\200\1\u0141\1\201\62\u0141\2\0"+
    "\1\200\64\0\2\u0142\1\220\1\u0142\1\u0143\12\u0142\1\u0144"+
    "\47\u0142\2\u0141\1\200\1\u0141\1\201\46\u0141\1\u0145\15\u0141"+
    "\1\200\1\u0141\1\201\35\u0141\1\u0146\10\u0141\1\u0147\15\u0141"+
    "\1\200\1\u0141\1\201\43\u0141\1\u0148\1\u0141\1\u0149\16\u0141"+
    "\1\200\1\u0141\1\201\31\u0141\1\u014a\14\u0141\1\u014b\1\u0141"+
    "\1\u014c\2\u0141\1\u014d\10\u0141\1\200\1\u0141\1\201\36\u0141"+
    "\1\u0147\5\u0141\1\u014e\1\u014f\16\u0141\1\200\1\u0141\1\201"+
    "\31\u0141\1\u0150\14\u0141\1\u0151\15\u0141\1\200\1\u0141\1\201"+
    "\31\u0141\1\u0152\16\u0141\1\u0153\2\u0141\1\u0154\10\u0141\1\200"+
    "\1\u0141\1\201\35\u0141\1\u0155\26\u0141\1\200\1\u0141\1\201"+
    "\46\u0141\1\u0156\3\u0141\1\u0157\11\u0141\1\200\1\u0141\1\201"+
    "\40\u0141\1\u0158\7\u0141\1\u0159\13\u0141\1\200\1\u0141\1\201"+
    "\36\u0141\1\u015a\2\u0141\1\u015b\22\u0141\1\200\1\u0141\1\201"+
    "\31\u0141\1\u014b\7\u0141\1\u015c\22\u0141\1\200\1\u0141\1\201"+
    "\40\u0141\1\u015d\21\u0141\2\0\1\221\66\0\1\240\64\0"+
    "\7\257\1\0\3\257\1\0\62\257\1\0\3\257\1\0"+
    "\37\257\1\u015e\22\257\1\0\3\257\1\0\26\257\1\u015f"+
    "\10\257\1\u0160\22\257\1\0\3\257\1\0\34\257\1\u0161"+
    "\1\257\1\u0162\23\257\1\0\3\257\1\0\22\257\1\u0163"+
    "\14\257\1\u0164\1\257\1\u0165\2\257\1\u0166\15\257\1\0"+
    "\3\257\1\0\27\257\1\u0160\5\257\1\u0167\1\u0168\23\257"+
    "\1\0\3\257\1\0\22\257\1\u0169\14\257\1\u016a\22\257"+
    "\1\0\3\257\1\0\22\257\1\u016b\16\257\1\u016c\2\257"+
    "\1\u016d\15\257\1\0\3\257\1\0\26\257\1\u016e\33\257"+
    "\1\0\3\257\1\0\37\257\1\u016f\3\257\1\u0170\16\257"+
    "\1\0\3\257\1\0\31\257\1\u0171\7\257\1\u0172\20\257"+
    "\1\0\3\257\1\0\27\257\1\u0173\2\257\1\u0174\27\257"+
    "\1\0\3\257\1\0\22\257\1\u0164\7\257\1\u0175\27\257"+
    "\1\0\3\257\1\0\31\257\1\u0176\21\257\33\0\1\310"+
    "\45\0\1\310\106\0\2\310\66\0\2\310\120\0\1\310"+
    "\15\0\1\335\2\0\1\336\66\0\11\u0177\53\0\1\u0178"+
    "\1\337\1\0\11\u0179\36\0\1\342\7\0\1\342\7\0"+
    "\11\342\4\0\31\342\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\4\27\1\u017a\24\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\13\27\1\u017b\15\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\16\27\1\u017c"+
    "\12\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\5\27\1\u017d\23\27\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\22\27\1\u017e\6\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\13\27\1\u017f\15\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\15\27\1\u0180"+
    "\13\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\27\27\1\u0181\1\27\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\13\27\1\u0182\15\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\21\27\1\u0183\7\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\23\27\1\u0184"+
    "\5\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\10\27\1\u0185\20\27\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\13\27\1\356\15\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\15\27\1\u0186\13\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\20\27\1\345"+
    "\10\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\16\27\1\u0184\12\27\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\15\27\1\u0187\13\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\26\27\1\u0188\2\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\23\27\1\u0189"+
    "\5\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\17\27\1\u018a\11\27\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\22\27\1\u018b\6\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\17\27\1\u018c\11\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\15\27\1\u018d"+
    "\13\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\4\27\1\u018e\24\27\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\27\27\1\u018f\1\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\1\27\1\u0190\7\27\1\u0191"+
    "\17\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\2\27\1\u0192\26\27\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\22\27\1\u0193\6\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\3\27\1\u0194\11\27\1\u0195"+
    "\13\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\13\27\1\u0196\15\27\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\20\27\1\u0197\10\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\1\27\1\u0198\27\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\11\27\1\u0199"+
    "\17\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\1\27\1\u019a\21\27\1\u0183\5\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\11\27\1\u019b\17\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\15\27\1\u019c"+
    "\13\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\5\27\1\u019d\23\27\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\5\27\1\u019e\3\27\1\u019f\17\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\11\27\1\u01a0"+
    "\17\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\1\27\1\u0189\27\27\1\0\2\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\36\64\1\u01a1\16\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\34\64\1\u01a2"+
    "\20\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\42\64\1\u01a3\12\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\44\64\1\u01a4\10\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\34\64\1\u0110\20\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\41\64\1\u010f"+
    "\13\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\37\64\1\u01a4\15\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\36\64\1\u01a5\16\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\40\64\1\u01a6\14\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\43\64\1\u01a7"+
    "\11\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\40\64\1\u01a8\14\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\25\64\1\u01a9\27\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\50\64\1\u01aa\4\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\22\64\1\u01ab"+
    "\7\64\1\u01ac\22\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\23\64\1\u01ad\31\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\43\64\1\u01ae\11\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\34\64\1\u01af"+
    "\20\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\41\64\1\u01b0\13\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\32\64\1\u01b1\22\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\44\64\1\u01a3\10\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\32\64\1\u01b2"+
    "\22\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\36\64\1\u01b3\16\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\26\64\1\u01b4\26\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\32\64\1\u01b5\20\64\52\0"+
    "\1\u01b6\51\0\7\115\4\0\1\u01b7\74\0\1\u01b8\70\0"+
    "\1\u01b9\43\0\7\115\4\0\1\u0129\73\0\1\u0128\64\0"+
    "\1\u01b9\65\0\1\u01ba\70\0\1\u01bb\71\0\1\u01bc\63\0"+
    "\1\u01bd\53\0\1\u01be\111\0\1\u01bf\40\0\1\u01c0\7\0"+
    "\1\u01c1\57\0\1\u01c2\106\0\1\u01c3\57\0\1\u01c4\73\0"+
    "\1\u01c5\57\0\1\u01c6\100\0\1\u01b8\54\0\1\u01c7\72\0"+
    "\1\u01c8\56\0\1\u01c9\72\0\1\u01ca\70\0\1\u01b7\66\0"+
    "\1\u0129\16\0\2\u0142\1\220\1\u0142\1\u0143\62\u0142\2\0"+
    "\1\220\64\0\2\u0141\1\200\1\u0141\1\201\45\u0141\1\u01cb"+
    "\16\u0141\1\200\1\u0141\1\201\43\u0141\1\u01cc\20\u0141\1\200"+
    "\1\u0141\1\201\51\u0141\1\u01cd\12\u0141\1\200\1\u0141\1\201"+
    "\53\u0141\1\u01ce\10\u0141\1\200\1\u0141\1\201\43\u0141\1\u0148"+
    "\20\u0141\1\200\1\u0141\1\201\50\u0141\1\u0147\13\u0141\1\200"+
    "\1\u0141\1\201\46\u0141\1\u01ce\15\u0141\1\200\1\u0141\1\201"+
    "\45\u0141\1\u01cf\16\u0141\1\200\1\u0141\1\201\47\u0141\1\u01d0"+
    "\14\u0141\1\200\1\u0141\1\201\52\u0141\1\u01d1\11\u0141\1\200"+
    "\1\u0141\1\201\47\u0141\1\u01d2\14\u0141\1\200\1\u0141\1\201"+
    "\34\u0141\1\u01d3\27\u0141\1\200\1\u0141\1\201\57\u0141\1\u01d4"+
    "\4\u0141\1\200\1\u0141\1\201\31\u0141\1\u01d5\7\u0141\1\u01d6"+
    "\22\u0141\1\200\1\u0141\1\201\32\u0141\1\u01d7\31\u0141\1\200"+
    "\1\u0141\1\201\52\u0141\1\u01d8\11\u0141\1\200\1\u0141\1\201"+
    "\43\u0141\1\u01d9\20\u0141\1\200\1\u0141\1\201\50\u0141\1\u01da"+
    "\13\u0141\1\200\1\u0141\1\201\41\u0141\1\u01db\22\u0141\1\200"+
    "\1\u0141\1\201\53\u0141\1\u01cd\10\u0141\1\200\1\u0141\1\201"+
    "\41\u0141\1\u01dc\22\u0141\1\200\1\u0141\1\201\45\u0141\1\u01dd"+
    "\16\u0141\1\200\1\u0141\1\201\35\u0141\1\u01de\26\u0141\1\200"+
    "\1\u0141\1\201\41\u0141\1\u01df\20\u0141\7\257\1\0\3\257"+
    "\1\0\36\257\1\u01e0\23\257\1\0\3\257\1\0\34\257"+
    "\1\u01e1\25\257\1\0\3\257\1\0\42\257\1\u01e2\17\257"+
    "\1\0\3\257\1\0\44\257\1\u01e3\15\257\1\0\3\257"+
    "\1\0\34\257\1\u0161\25\257\1\0\3\257\1\0\41\257"+
    "\1\u0160\20\257\1\0\3\257\1\0\37\257\1\u01e3\22\257"+
    "\1\0\3\257\1\0\36\257\1\u01e4\23\257\1\0\3\257"+
    "\1\0\40\257\1\u01e5\21\257\1\0\3\257\1\0\43\257"+
    "\1\u01e6\16\257\1\0\3\257\1\0\40\257\1\u01e7\21\257"+
    "\1\0\3\257\1\0\25\257\1\u01e8\34\257\1\0\3\257"+
    "\1\0\50\257\1\u01e9\11\257\1\0\3\257\1\0\22\257"+
    "\1\u01ea\7\257\1\u01eb\27\257\1\0\3\257\1\0\23\257"+
    "\1\u01ec\36\257\1\0\3\257\1\0\43\257\1\u01ed\16\257"+
    "\1\0\3\257\1\0\34\257\1\u01ee\25\257\1\0\3\257"+
    "\1\0\41\257\1\u01ef\20\257\1\0\3\257\1\0\32\257"+
    "\1\u01f0\27\257\1\0\3\257\1\0\44\257\1\u01e2\15\257"+
    "\1\0\3\257\1\0\32\257\1\u01f1\27\257\1\0\3\257"+
    "\1\0\36\257\1\u01f2\23\257\1\0\3\257\1\0\26\257"+
    "\1\u01f3\33\257\1\0\3\257\1\0\32\257\1\u01f4\20\257"+
    "\15\0\1\u0178\1\u01f5\1\0\11\u0179\56\0\11\u0179\36\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\20\27\1\u01f6"+
    "\10\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\1\27\1\u01f7\27\27\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\13\27\1\345\15\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\1\27\1\u01f8\27\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\5\27\1\u01f9"+
    "\23\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\13\27\1\u01fa\15\27\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\21\27\1\u01fb\1\u01fc\6\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\21\27\1\u019f\7\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\5\27"+
    "\1\u01fd\23\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\5\27\1\345\23\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\14\27\1\345\14\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\5\27\1\u01fe\23\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\15\27"+
    "\1\u01ff\13\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\3\27\1\u0200\25\27\1\0\1\27\6\0\1\u0201"+
    "\1\27\2\0\1\u0202\4\0\11\27\4\0\31\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\20\27\1\u0181"+
    "\10\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\16\27\1\u0203\12\27\1\0\1\27\7\0\1\27\7\0"+
    "\1\27\1\u0204\1\u0205\1\u0206\2\27\1\u0207\1\27\1\345"+
    "\4\0\5\27\1\u0208\23\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\17\27\1\u0209\11\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\23\27\1\u020a\5\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\11\27"+
    "\1\u020b\17\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\1\27\1\u020c\27\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\7\27\1\u020d\21\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\24\27\1\u020e\4\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\13\27"+
    "\1\u020f\15\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\23\27\1\u0210\5\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\16\27\1\u0211\12\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\4\27\1\u0212\24\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\11\27"+
    "\1\u0213\17\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\11\27\1\u0214\11\27\1\u0215\5\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\2\27\1\u0216\26\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\21\27"+
    "\1\345\7\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\15\27\1\u0217\13\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\26\27\1\u0218\2\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\22\27\1\u0219\6\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\25\27"+
    "\1\345\3\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\12\27\1\u0181\16\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\13\27\1\u0183\15\27\1\0\2\64"+
    "\1\0\1\64\1\0\2\64\1\0\3\64\1\0\42\64"+
    "\1\u021a\1\u021b\11\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\26\64\1\u021c\26\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\26\64\1\u010f\26\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\35\64\1\u010f"+
    "\17\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\24\64\1\u021d\30\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\37\64\1\u021e\15\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\5\64\1\u021f\1\u0220\1\u0221"+
    "\2\64\1\u0222\1\64\1\u010f\11\64\1\u0223\26\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\40\64\1\u0224"+
    "\14\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\32\64\1\u0225\22\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\22\64\1\u0226\32\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\30\64\1\u0227\24\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\45\64\1\u0228"+
    "\7\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\34\64\1\u0229\20\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\44\64\1\u022a\10\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\32\64\1\u022b\22\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\32\64\1\u022c"+
    "\11\64\1\u022d\10\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\42\64\1\u010f\12\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\47\64\1\u022e\5\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\43\64\1\u022f"+
    "\11\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\46\64\1\u010f\6\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\34\64\1\u01a3\16\64\56\0\1\u0230\1\u0231"+
    "\51\0\1\u0232\66\0\1\u0128\75\0\1\u0128\55\0\1\u0233"+
    "\101\0\1\u0234\34\0\1\u0235\1\u0236\1\u0237\2\0\1\u0238"+
    "\1\0\1\u0128\11\0\1\u0239\100\0\1\u023a\60\0\1\u023b"+
    "\56\0\1\u023c\74\0\1\u023d\103\0\1\u023e\55\0\1\u023f"+
    "\76\0\1\u0240\54\0\1\u0241\66\0\1\u0242\11\0\1\u0243"+
    "\64\0\1\u0128\73\0\1\u0244\62\0\1\u0245\71\0\1\u0128"+
    "\54\0\1\u01b8\16\0\2\u0141\1\200\1\u0141\1\201\51\u0141"+
    "\1\u0246\1\u0247\11\u0141\1\200\1\u0141\1\201\35\u0141\1\u0248"+
    "\26\u0141\1\200\1\u0141\1\201\35\u0141\1\u0147\26\u0141\1\200"+
    "\1\u0141\1\201\44\u0141\1\u0147\17\u0141\1\200\1\u0141\1\201"+
    "\33\u0141\1\u0249\30\u0141\1\200\1\u0141\1\201\46\u0141\1\u024a"+
    "\15\u0141\1\200\1\u0141\1\201\14\u0141\1\u024b\1\u024c\1\u024d"+
    "\2\u0141\1\u024e\1\u0141\1\u0147\11\u0141\1\u024f\26\u0141\1\200"+
    "\1\u0141\1\201\47\u0141\1\u0250\14\u0141\1\200\1\u0141\1\201"+
    "\41\u0141\1\u0251\22\u0141\1\200\1\u0141\1\201\31\u0141\1\u0252"+
    "\32\u0141\1\200\1\u0141\1\201\37\u0141\1\u0253\24\u0141\1\200"+
    "\1\u0141\1\201\54\u0141\1\u0254\7\u0141\1\200\1\u0141\1\201"+
    "\43\u0141\1\u0255\20\u0141\1\200\1\u0141\1\201\53\u0141\1\u0256"+
    "\10\u0141\1\200\1\u0141\1\201\41\u0141\1\u0257\22\u0141\1\200"+
    "\1\u0141\1\201\41\u0141\1\u0258\11\u0141\1\u0259\10\u0141\1\200"+
    "\1\u0141\1\201\51\u0141\1\u0147\12\u0141\1\200\1\u0141\1\201"+
    "\56\u0141\1\u025a\5\u0141\1\200\1\u0141\1\201\52\u0141\1\u025b"+
    "\11\u0141\1\200\1\u0141\1\201\55\u0141\1\u0147\6\u0141\1\200"+
    "\1\u0141\1\201\43\u0141\1\u01cd\16\u0141\7\257\1\0\3\257"+
    "\1\0\42\257\1\u025c\1\u025d\16\257\1\0\3\257\1\0"+
    "\26\257\1\u025e\33\257\1\0\3\257\1\0\26\257\1\u0160"+
    "\33\257\1\0\3\257\1\0\35\257\1\u0160\24\257\1\0"+
    "\3\257\1\0\24\257\1\u025f\35\257\1\0\3\257\1\0"+
    "\37\257\1\u0260\22\257\1\0\3\257\1\0\5\257\1\u0261"+
    "\1\u0262\1\u0263\2\257\1\u0264\1\257\1\u0160\11\257\1\u0265"+
    "\33\257\1\0\3\257\1\0\40\257\1\u0266\21\257\1\0"+
    "\3\257\1\0\32\257\1\u0267\27\257\1\0\3\257\1\0"+
    "\22\257\1\u0268\37\257\1\0\3\257\1\0\30\257\1\u0269"+
    "\31\257\1\0\3\257\1\0\45\257\1\u026a\14\257\1\0"+
    "\3\257\1\0\34\257\1\u026b\25\257\1\0\3\257\1\0"+
    "\44\257\1\u026c\15\257\1\0\3\257\1\0\32\257\1\u026d"+
    "\27\257\1\0\3\257\1\0\32\257\1\u026e\11\257\1\u026f"+
    "\15\257\1\0\3\257\1\0\42\257\1\u0160\17\257\1\0"+
    "\3\257\1\0\47\257\1\u0270\12\257\1\0\3\257\1\0"+
    "\43\257\1\u0271\16\257\1\0\3\257\1\0\46\257\1\u0160"+
    "\13\257\1\0\3\257\1\0\34\257\1\u01e2\16\257\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\5\27\1\u0272\23\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\15\27"+
    "\1\u0273\13\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\12\27\1\345\16\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\21\27\1\u0274\7\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\3\27\1\u0275\25\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\22\27"+
    "\1\u0276\6\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\11\27\1\u0277\6\27\1\u0278\10\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\7\27\1\u0279\12\27"+
    "\1\u0183\6\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\20\27\1\u019f\10\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\5\27\1\u027a\23\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\22\27\1\u027b\6\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\20\27"+
    "\1\u027c\10\27\1\0\1\27\7\0\1\27\7\0\2\27"+
    "\1\u027d\3\27\1\345\2\27\4\0\31\27\1\0\1\27"+
    "\7\0\1\27\7\0\5\27\1\u027e\3\27\4\0\31\27"+
    "\1\0\1\27\7\0\1\27\7\0\2\27\1\345\6\27"+
    "\4\0\31\27\1\0\1\27\7\0\1\27\7\0\4\27"+
    "\1\345\4\27\4\0\31\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\20\27\1\u027f\10\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\11\27\1\u0214\17\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\22\27"+
    "\1\u0280\6\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\6\27\1\u0281\22\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\2\27\1\u01a0\26\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\14\27\1\u0282\14\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\1\27"+
    "\1\u0283\27\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\11\27\1\u0284\17\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\20\27\1\u0285\10\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\15\27\1\u0286\13\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\4\27"+
    "\1\u0287\24\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\15\27\1\u0288\13\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\3\27\1\u027c\25\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\16\27\1\u019f\12\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\21\27"+
    "\1\u0289\7\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\5\27\1\u028a\23\27\1\0\1\27\7\0\1\27"+
    "\7\0\1\27\1\u0204\1\u0205\1\u0206\2\27\1\u0207\1\27"+
    "\1\345\4\0\31\27\1\0\2\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\43\64\1\u028b\11\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\32\64\1\u028c"+
    "\6\64\1\u028d\13\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\43\64\1\u01a3\11\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\43\64\1\u028e\11\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\41\64\1\u028f"+
    "\13\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\6\64\1\u0290\3\64\1\u010f\42\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\11\64\1\u0291\43\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\6\64\1\u010f"+
    "\46\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\10\64\1\u010f\44\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\41\64\1\u0292\13\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\32\64\1\u022c\22\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\27\64\1\u0293"+
    "\25\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\23\64\1\u01b5\31\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\35\64\1\u0294\17\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\22\64\1\u021c\32\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\32\64\1\u0295"+
    "\22\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\41\64\1\u0296\13\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\25\64\1\u0297\27\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\36\64\1\u0298\16\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\24\64\1\u028f"+
    "\30\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\26\64\1\u0299\26\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\5\64\1\u021f\1\u0220\1\u0221\2\64\1\u0222"+
    "\1\64\1\u010f\36\64\57\0\1\u029a\55\0\1\u029b\6\0"+
    "\1\u029c\70\0\1\u01b8\66\0\1\u029d\64\0\1\u029e\33\0"+
    "\1\u029f\3\0\1\u0128\65\0\1\u02a0\63\0\1\u0128\70\0"+
    "\1\u0128\117\0\1\u02a1\57\0\1\u0242\63\0\1\u02a2\62\0"+
    "\1\u01ca\100\0\1\u02a3\53\0\1\u0232\76\0\1\u02a4\75\0"+
    "\1\u02a5\52\0\1\u02a6\77\0\1\u02a7\54\0\1\u029e\70\0"+
    "\1\u02a8\45\0\1\u0235\1\u0236\1\u0237\2\0\1\u0238\1\0"+
    "\1\u0128\36\0\2\u0141\1\200\1\u0141\1\201\52\u0141\1\u02a9"+
    "\11\u0141\1\200\1\u0141\1\201\41\u0141\1\u02aa\6\u0141\1\u02ab"+
    "\13\u0141\1\200\1\u0141\1\201\52\u0141\1\u01cd\11\u0141\1\200"+
    "\1\u0141\1\201\52\u0141\1\u02ac\11\u0141\1\200\1\u0141\1\201"+
    "\50\u0141\1\u02ad\13\u0141\1\200\1\u0141\1\201\15\u0141\1\u02ae"+
    "\3\u0141\1\u0147\42\u0141\1\200\1\u0141\1\201\20\u0141\1\u02af"+
    "\43\u0141\1\200\1\u0141\1\201\15\u0141\1\u0147\46\u0141\1\200"+
    "\1\u0141\1\201\17\u0141\1\u0147\44\u0141\1\200\1\u0141\1\201"+
    "\50\u0141\1\u02b0\13\u0141\1\200\1\u0141\1\201\41\u0141\1\u0258"+
    "\22\u0141\1\200\1\u0141\1\201\36\u0141\1\u02b1\25\u0141\1\200"+
    "\1\u0141\1\201\32\u0141\1\u01df\31\u0141\1\200\1\u0141\1\201"+
    "\44\u0141\1\u02b2\17\u0141\1\200\1\u0141\1\201\31\u0141\1\u0248"+
    "\32\u0141\1\200\1\u0141\1\201\41\u0141\1\u02b3\22\u0141\1\200"+
    "\1\u0141\1\201\50\u0141\1\u02b4\13\u0141\1\200\1\u0141\1\201"+
    "\34\u0141\1\u02b5\27\u0141\1\200\1\u0141\1\201\45\u0141\1\u02b6"+
    "\16\u0141\1\200\1\u0141\1\201\33\u0141\1\u02ad\30\u0141\1\200"+
    "\1\u0141\1\201\35\u0141\1\u02b7\26\u0141\1\200\1\u0141\1\201"+
    "\14\u0141\1\u024b\1\u024c\1\u024d\2\u0141\1\u024e\1\u0141\1\u0147"+
    "\36\u0141\7\257\1\0\3\257\1\0\43\257\1\u02b8\16\257"+
    "\1\0\3\257\1\0\32\257\1\u02b9\6\257\1\u02ba\20\257"+
    "\1\0\3\257\1\0\43\257\1\u01e2\16\257\1\0\3\257"+
    "\1\0\43\257\1\u02bb\16\257\1\0\3\257\1\0\41\257"+
    "\1\u02bc\20\257\1\0\3\257\1\0\6\257\1\u02bd\3\257"+
    "\1\u0160\47\257\1\0\3\257\1\0\11\257\1\u02be\50\257"+
    "\1\0\3\257\1\0\6\257\1\u0160\53\257\1\0\3\257"+
    "\1\0\10\257\1\u0160\51\257\1\0\3\257\1\0\41\257"+
    "\1\u02bf\20\257\1\0\3\257\1\0\32\257\1\u026e\27\257"+
    "\1\0\3\257\1\0\27\257\1\u02c0\32\257\1\0\3\257"+
    "\1\0\23\257\1\u01f4\36\257\1\0\3\257\1\0\35\257"+
    "\1\u02c1\24\257\1\0\3\257\1\0\22\257\1\u025e\37\257"+
    "\1\0\3\257\1\0\32\257\1\u02c2\27\257\1\0\3\257"+
    "\1\0\41\257\1\u02c3\20\257\1\0\3\257\1\0\25\257"+
    "\1\u02c4\34\257\1\0\3\257\1\0\36\257\1\u02c5\23\257"+
    "\1\0\3\257\1\0\24\257\1\u02bc\35\257\1\0\3\257"+
    "\1\0\26\257\1\u02c6\33\257\1\0\3\257\1\0\5\257"+
    "\1\u0261\1\u0262\1\u0263\2\257\1\u0264\1\257\1\u0160\36\257"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\21\27\1\u0199"+
    "\7\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\3\27\1\u02c7\25\27\1\0\1\27\7\0\1\27\7\0"+
    "\1\27\2\u02c8\1\u02c9\5\345\4\0\31\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\16\27\1\u02ca\12\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\20\27"+
    "\1\u02cb\10\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\15\27\1\u02cc\13\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\1\27\1\u0215\27\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\1\27\1\u02cd\27\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\27\27"+
    "\1\u019f\1\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\11\27\1\u02ce\17\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\22\27\1\345\6\27\1\0\1\27"+
    "\7\0\1\27\7\0\10\27\1\345\4\0\31\27\1\0"+
    "\1\27\7\0\1\27\7\0\6\27\1\345\2\27\4\0"+
    "\31\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\15\27\1\u02cf\13\27\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\5\27\1\u0181\23\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\11\27\1\u02d0\17\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\1\27\1\345"+
    "\27\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\22\27\1\u0183\6\27\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\3\27\1\345\25\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\15\27\1\u02d1\13\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\4\27\1\u0181"+
    "\24\27\1\0\1\27\7\0\1\27\7\0\11\27\4\0"+
    "\11\27\1\u02d2\17\27\1\0\1\27\7\0\1\27\7\0"+
    "\11\27\4\0\7\27\1\345\21\27\1\0\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\6\27\1\u02d3\22\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\27\4\0\4\27\1\345"+
    "\24\27\1\0\2\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\41\64\1\u02d4\13\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\36\64\1\u0121\16\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\22\64\1\u022d"+
    "\32\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\32\64\1\u02d5\22\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\43\64\1\u010f\11\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\14\64\1\u010f\40\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\12\64\1\u010f"+
    "\42\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\36\64\1\u02d6\16\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\32\64\1\u02d7\22\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\22\64\1\u010f\32\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\24\64\1\u010f"+
    "\30\64\1\0\1\64\1\0\2\64\1\0\3\64\1\0"+
    "\36\64\1\u02d8\16\64\1\0\1\64\1\0\2\64\1\0"+
    "\3\64\1\0\32\64\1\u02d9\22\64\1\0\1\64\1\0"+
    "\2\64\1\0\3\64\1\0\30\64\1\u010f\24\64\1\0"+
    "\1\64\1\0\2\64\1\0\3\64\1\0\25\64\1\u010f"+
    "\25\64\55\0\1\u02da\63\0\1\u013a\52\0\1\u0243\76\0"+
    "\1\u02db\77\0\1\u0128\37\0\1\u0128\64\0\1\u0128\112\0"+
    "\1\u02dc\62\0\1\u02dd\56\0\1\u0128\70\0\1\u0128\100\0"+
    "\1\u02de\62\0\1\u02df\64\0\1\u0128\63\0\1\u0128\25\0"+
    "\2\u0141\1\200\1\u0141\1\201\50\u0141\1\u02e0\13\u0141\1\200"+
    "\1\u0141\1\201\45\u0141\1\u0159\16\u0141\1\200\1\u0141\1\201"+
    "\31\u0141\1\u0259\32\u0141\1\200\1\u0141\1\201\41\u0141\1\u02e1"+
    "\22\u0141\1\200\1\u0141\1\201\52\u0141\1\u0147\11\u0141\1\200"+
    "\1\u0141\1\201\23\u0141\1\u0147\40\u0141\1\200\1\u0141\1\201"+
    "\21\u0141\1\u0147\42\u0141\1\200\1\u0141\1\201\45\u0141\1\u02e2"+
    "\16\u0141\1\200\1\u0141\1\201\41\u0141\1\u02e3\22\u0141\1\200"+
    "\1\u0141\1\201\31\u0141\1\u0147\32\u0141\1\200\1\u0141\1\201"+
    "\33\u0141\1\u0147\30\u0141\1\200\1\u0141\1\201\45\u0141\1\u02e4"+
    "\16\u0141\1\200\1\u0141\1\201\41\u0141\1\u02e5\22\u0141\1\200"+
    "\1\u0141\1\201\37\u0141\1\u0147\24\u0141\1\200\1\u0141\1\201"+
    "\34\u0141\1\u0147\25\u0141\7\257\1\0\3\257\1\0\41\257"+
    "\1\u02e6\20\257\1\0\3\257\1\0\36\257\1\u0172\23\257"+
    "\1\0\3\257\1\0\22\257\1\u026f\37\257\1\0\3\257"+
    "\1\0\32\257\1\u02e7\27\257\1\0\3\257\1\0\43\257"+
    "\1\u0160\16\257\1\0\3\257\1\0\14\257\1\u0160\45\257"+
    "\1\0\3\257\1\0\12\257\1\u0160\47\257\1\0\3\257"+
    "\1\0\36\257\1\u02e8\23\257\1\0\3\257\1\0\32\257"+
    "\1\u02e9\27\257\1\0\3\257\1\0\22\257\1\u0160\37\257"+
    "\1\0\3\257\1\0\24\257\1\u0160\35\257\1\0\3\257"+
    "\1\0\36\257\1\u02ea\23\257\1\0\3\257\1\0\32\257"+
    "\1\u02eb\27\257\1\0\3\257\1\0\30\257\1\u0160\31\257"+
    "\1\0\3\257\1\0\25\257\1\u0160\25\257\1\27\7\0"+
    "\1\27\7\0\11\27\4\0\5\27\1\u0212\23\27\1\0"+
    "\1\27\7\0\1\27\7\0\11\345\4\0\31\27\1\0"+
    "\1\27\7\0\1\27\7\0\3\345\6\27\4\0\31\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\4\27"+
    "\1\u02c7\24\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\23\27\1\u02ec\5\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\23\27\1\u0183\5\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\22\27\1\u02ed\6\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\16\27"+
    "\1\u02ee\12\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\1\27\1\u017c\27\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\5\27\1\363\23\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\22\27\1\u02ef\6\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\5\27"+
    "\1\u02f0\23\27\1\0\2\64\1\0\1\64\1\0\2\64"+
    "\1\0\3\64\1\0\44\64\1\u02f1\10\64\1\0\1\64"+
    "\1\0\2\64\1\0\3\64\1\0\37\64\1\u02f2\15\64"+
    "\1\0\1\64\1\0\2\64\1\0\3\64\1\0\22\64"+
    "\1\u02f3\32\64\1\0\1\64\1\0\2\64\1\0\3\64"+
    "\1\0\26\64\1\u0113\26\64\1\0\1\64\1\0\2\64"+
    "\1\0\3\64\1\0\43\64\1\u02f4\7\64\60\0\1\u02f5"+
    "\61\0\1\u02f6\51\0\1\u02f7\72\0\1\u012c\103\0\1\u02f8"+
    "\7\0\2\u0141\1\200\1\u0141\1\201\53\u0141\1\u02f9\10\u0141"+
    "\1\200\1\u0141\1\201\46\u0141\1\u02fa\15\u0141\1\200\1\u0141"+
    "\1\201\31\u0141\1\u02fb\32\u0141\1\200\1\u0141\1\201\35\u0141"+
    "\1\u014b\26\u0141\1\200\1\u0141\1\201\52\u0141\1\u02fc\7\u0141"+
    "\7\257\1\0\3\257\1\0\44\257\1\u02fd\15\257\1\0"+
    "\3\257\1\0\37\257\1\u02fe\22\257\1\0\3\257\1\0"+
    "\22\257\1\u02ff\37\257\1\0\3\257\1\0\26\257\1\u0164"+
    "\33\257\1\0\3\257\1\0\43\257\1\u0300\7\257\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\3\27\1\u0301\25\27"+
    "\1\0\1\27\7\0\1\27\7\0\11\27\4\0\5\27"+
    "\1\u0302\23\27\1\0\1\27\7\0\1\27\7\0\11\27"+
    "\4\0\15\27\1\345\13\27\1\0\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\27\27\1\345\1\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\20\27\1\u0212\10\27"+
    "\1\0\2\64\1\0\1\64\1\0\2\64\1\0\3\64"+
    "\1\0\24\64\1\u0303\30\64\1\0\1\64\1\0\2\64"+
    "\1\0\3\64\1\0\36\64\1\u010f\16\64\1\0\1\64"+
    "\1\0\2\64\1\0\3\64\1\0\34\64\1\u010f\20\64"+
    "\1\0\1\64\1\0\2\64\1\0\3\64\1\0\50\64"+
    "\1\u010f\2\64\40\0\1\u0304\100\0\1\u0128\64\0\1\u0128"+
    "\102\0\1\u0128\2\0\2\u0141\1\200\1\u0141\1\201\33\u0141"+
    "\1\u0305\30\u0141\1\200\1\u0141\1\201\45\u0141\1\u0147\16\u0141"+
    "\1\200\1\u0141\1\201\43\u0141\1\u0147\20\u0141\1\200\1\u0141"+
    "\1\201\57\u0141\1\u0147\2\u0141\7\257\1\0\3\257\1\0"+
    "\24\257\1\u0306\35\257\1\0\3\257\1\0\36\257\1\u0160"+
    "\23\257\1\0\3\257\1\0\34\257\1\u0160\25\257\1\0"+
    "\3\257\1\0\50\257\1\u0160\2\257\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\22\27\1\u0307\6\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\3\27\1\u0308\25\27"+
    "\1\0\2\64\1\0\1\64\1\0\2\64\1\0\3\64"+
    "\1\0\43\64\1\u0309\7\64\57\0\1\u030a\7\0\2\u0141"+
    "\1\200\1\u0141\1\201\52\u0141\1\u030b\7\u0141\7\257\1\0"+
    "\3\257\1\0\43\257\1\u030c\7\257\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\16\27\1\363\12\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\1\27\1\u030d\27\27"+
    "\1\0\2\64\1\0\1\64\1\0\2\64\1\0\3\64"+
    "\1\0\37\64\1\u0113\13\64\53\0\1\u012c\13\0\2\u0141"+
    "\1\200\1\u0141\1\201\46\u0141\1\u014b\13\u0141\7\257\1\0"+
    "\3\257\1\0\37\257\1\u0164\13\257\1\27\7\0\1\27"+
    "\7\0\11\27\4\0\13\27\1\u030e\15\27\1\0\1\27"+
    "\7\0\1\27\7\0\11\27\4\0\13\27\1\u0212\15\27"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37015];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\21\0\2\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\32\1\1\11\1\1\2\11\15\1\2\11\1\1\2\11"+
    "\1\1\1\11\16\1\2\11\2\1\1\11\2\1\1\11"+
    "\30\1\1\11\1\1\2\11\1\1\1\11\17\1\2\11"+
    "\16\1\1\11\34\1\1\11\11\1\2\11\5\1\2\11"+
    "\15\1\3\0\2\11\104\1\1\0\1\1\1\11\2\0"+
    "\1\1\27\0\2\1\2\0\1\1\26\0\32\1\1\0"+
    "\75\1\6\0\1\1\24\0\1\1\16\0\25\1\1\0"+
    "\13\1\2\11\55\1\25\0\1\1\25\0\77\1\36\0"+
    "\42\1\4\0\1\1\5\0\1\1\1\0\17\1\10\0"+
    "\7\1\2\0\4\1\2\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[782];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    public static int errorLine = -1;
    public static int errorColumn = -1;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case Comments: {
              errores.add(new Token("/**", yyline, yycolumn, "Error: llave comentario abierta"));
            }  // fall though
            case 783: break;
            default:
          {   for(Token t: tokens){
    t.print();
  }

  System.out.println("\nErrores\n");
  for(Token t: errores){
    t.print();
  }
  return 0;
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println(yyline);
                                  System.out.println(yycolumn);
                                  throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 45: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 46: break;
          case 3:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 47: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 48: break;
          case 5:
            { string.setLength(0); string.append(yytext()); yybegin(indetifierState);
            }
            // fall through
          case 49: break;
          case 6:
            { string.setLength(0); yybegin(Chars);
            }
            // fall through
          case 50: break;
          case 7:
            { string.setLength(0);
                                    string.append(yytext());
                                    yybegin(numberState);
            }
            // fall through
          case 51: break;
          case 8:
            { string.append( yytext() );
            }
            // fall through
          case 52: break;
          case 9:
            { errores.add(new Token("Salto linea", yyline, yycolumn, "Error: strings deben ir en la misma linea"));
                                    yybegin(stringError);
            }
            // fall through
          case 53: break;
          case 10:
            { yybegin(YYINITIAL);
                                   tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 54: break;
          case 11:
            { errores.add(new Token("Comilla", yyline, yycolumn, "Error: cierre de comilla incorrecto"));
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 55: break;
          case 12:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
                                    yybegin(hexaStateError);
            }
            // fall through
          case 56: break;
          case 13:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: hexadecimal sin cierre"));
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 57: break;
          case 14:
            { yybegin(YYINITIAL);
                                    string.append( yytext() ); 
                                    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada"));
            }
            // fall through
          case 58: break;
          case 15:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 59: break;
          case 16:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); 
                                    errores.add(new Token("Comillas", yyline, yycolumn, "Error: hexadecimal sin cierre"));
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 60: break;
          case 17:
            { string.append(yytext());
                                    yybegin(errorNumeros);
            }
            // fall through
          case 61: break;
          case 18:
            { yybegin(YYINITIAL);
                                    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
            }
            // fall through
          case 62: break;
          case 19:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
                                    tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 63: break;
          case 20:
            { string.append(yytext());
            }
            // fall through
          case 64: break;
          case 21:
            { yybegin(NaturalNumbers);
                                    string.append(yytext());
            }
            // fall through
          case 65: break;
          case 22:
            { errores.add(new Token("Salto linea", yyline, yycolumn, "Error: chars deben ir en la misma linea"));
                                    yybegin(charError);
            }
            // fall through
          case 66: break;
          case 23:
            { errores.add(new Token("Comilla", yyline, yycolumn, "Error: cierre de comilla incorrecto")); 
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 67: break;
          case 24:
            { yybegin(YYINITIAL);
                                   tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
            }
            // fall through
          case 68: break;
          case 25:
            { if(errorLine == -1){
                                                                    errorLine = yyline;
                                                                    errorColumn = yycolumn;
                                                                  }
            }
            // fall through
          case 69: break;
          case 26:
            { 
            }
            // fall through
          case 70: break;
          case 27:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 71: break;
          case 28:
            { yybegin(YYINITIAL);
                                    errores.add(new Token(string.toString(), yyline, yycolumn, "Error: numero mal formado"));
            }
            // fall through
          case 72: break;
          case 29:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 73: break;
          case 30:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "identificador"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 74: break;
          case 31:
            { string.append(yytext()); yybegin(indetifierError);
            }
            // fall through
          case 75: break;
          case 32:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error de identificador"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 76: break;
          case 33:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error Decimal"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 77: break;
          case 34:
            { errorLine = -1;
                                    errorColumn = -1; 
                                    yybegin(Comments);
            }
            // fall through
          case 78: break;
          case 35:
            { yybegin(lineComment);
            }
            // fall through
          case 79: break;
          case 36:
            { string.setLength(0); string.append(yytext()); yybegin(indetifierError);
            }
            // fall through
          case 80: break;
          case 37:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error Decimal"));
            }
            // fall through
          case 81: break;
          case 38:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 82: break;
          case 39:
            { if(errorLine != -1){
                                    errores.add(new Token("*", errorLine, errorColumn, "Error: linea sin * <comentario bloque>"));
                                  }
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 83: break;
          case 40:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error decimal"));
            }
            // fall through
          case 84: break;
          case 41:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 85: break;
          case 42:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 86: break;
          case 43:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 87: break;
          case 44:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaStateC);
            }
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
