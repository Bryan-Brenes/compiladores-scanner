// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

/* JFlex example: partial Java language lexer specification */
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int hexaState = 4;
  public static final int hexaStateC = 6;
  public static final int hexaStateError = 8;
  public static final int hexaStateCError = 10;
  public static final int numberState = 12;
  public static final int NaturalNumbers = 14;
  public static final int Chars = 16;
  public static final int Identificadorcillo = 18;
  public static final int stateNosibol = 20;
  public static final int filtro = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\3\u1f00\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\3\u1f00\1\u3e00\1\u3f00\4\u1f00"+
    "\1\u4000\11\u1f00\3\u0100\1\u4100\1\u4200\13\u1f00\4\u0100\1\u4300"+
    "\63\u1f00\2\u0100\1\u4400\4\u1f00\1\u4500\100\u1f00\1\u4600\40\u1f00"+
    "\1\u4700\1\u4800\1\u1f00\1\u4900\1\u4a00\1\u4b00\1\u4c00\26\u1f00"+
    "\1\u4d00\21\u1f00\246\u0100\1\u4e00\20\u0100\1\u4f00\1\u5000\77\u1f00"+
    "\2\u0100\1\u5000\u0b05\u1f00\1\u5100\1\u5200\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\3\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\32\1\10\1\34\1\35\1\36\1\37\1\10"+
    "\1\3\4\40\1\41\1\40\24\42\1\13\1\43\1\44"+
    "\1\10\1\7\1\3\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\42\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\42\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\13\1\75\1\44"+
    "\1\76\41\0\2\3\4\7\4\3\1\7\2\3\1\0"+
    "\7\3\1\7\4\3\1\7\5\3\27\7\1\3\37\7"+
    "\1\3\u01ca\7\4\3\14\7\16\3\5\7\7\3\1\7"+
    "\1\3\1\7\21\3\160\0\5\7\1\3\2\7\2\3"+
    "\4\7\10\3\1\7\1\3\3\7\1\3\1\7\1\3"+
    "\24\7\1\3\123\7\1\3\213\7\1\3\5\0\2\3"+
    "\236\7\11\3\46\7\2\3\1\7\7\3\47\7\7\3"+
    "\1\7\1\3\55\0\1\3\1\0\1\3\2\0\1\3"+
    "\2\0\1\3\1\0\10\3\33\7\5\3\3\7\15\3"+
    "\5\0\6\3\1\7\4\3\13\0\5\3\53\7\37\0"+
    "\4\3\2\7\1\0\143\7\1\3\1\7\10\0\1\3"+
    "\6\0\2\7\2\0\1\3\4\0\2\7\12\0\3\7"+
    "\2\3\1\7\17\3\1\0\1\7\1\0\36\7\33\0"+
    "\2\3\131\7\13\0\1\7\16\3\12\0\41\7\11\0"+
    "\2\7\4\3\1\7\5\3\26\7\4\0\1\7\11\0"+
    "\1\7\3\0\1\7\5\0\22\3\31\7\3\0\104\3"+
    "\1\7\1\3\13\7\67\3\33\0\1\3\4\0\66\7"+
    "\3\0\1\7\22\0\1\7\7\0\12\7\2\0\2\3"+
    "\12\0\1\3\7\7\1\3\7\7\1\3\3\0\1\3"+
    "\10\7\2\3\2\7\2\3\26\7\1\3\7\7\1\3"+
    "\1\7\3\3\4\7\2\3\1\0\1\7\7\0\2\3"+
    "\2\0\2\3\3\0\1\7\10\3\1\0\4\3\2\7"+
    "\1\3\3\7\2\0\2\3\12\0\4\7\7\3\1\7"+
    "\5\3\3\0\1\3\6\7\4\3\2\7\2\3\26\7"+
    "\1\3\7\7\1\3\2\7\1\3\2\7\1\3\2\7"+
    "\2\3\1\0\1\3\5\0\4\3\2\0\2\3\3\0"+
    "\3\3\1\0\7\3\4\7\1\3\1\7\7\3\14\0"+
    "\3\7\1\0\13\3\3\0\1\3\11\7\1\3\3\7"+
    "\1\3\26\7\1\3\7\7\1\3\2\7\1\3\5\7"+
    "\2\3\1\0\1\7\10\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\7\17\3\2\7\2\0\2\3\12\0\1\3"+
    "\1\7\17\3\3\0\1\3\10\7\2\3\2\7\2\3"+
    "\26\7\1\3\7\7\1\3\2\7\1\3\5\7\2\3"+
    "\1\0\1\7\7\0\2\3\2\0\2\3\3\0\10\3"+
    "\2\0\4\3\2\7\1\3\3\7\2\0\2\3\12\0"+
    "\1\3\1\7\20\3\1\0\1\7\1\3\6\7\3\3"+
    "\3\7\1\3\4\7\3\3\2\7\1\3\1\7\1\3"+
    "\2\7\3\3\2\7\3\3\3\7\3\3\14\7\4\3"+
    "\5\0\3\3\3\0\1\3\4\0\2\3\1\7\6\3"+
    "\1\0\16\3\12\0\11\3\1\7\7\3\3\0\1\3"+
    "\10\7\1\3\3\7\1\3\27\7\1\3\12\7\1\3"+
    "\5\7\3\3\1\7\7\0\1\3\3\0\1\3\4\0"+
    "\7\3\2\0\1\3\2\7\6\3\2\7\2\0\2\3"+
    "\12\0\22\3\2\0\1\3\10\7\1\3\3\7\1\3"+
    "\27\7\1\3\12\7\1\3\5\7\2\3\1\0\1\7"+
    "\7\0\1\3\3\0\1\3\4\0\7\3\2\0\7\3"+
    "\1\7\1\3\2\7\2\0\2\3\12\0\1\3\2\7"+
    "\17\3\2\0\1\3\10\7\1\3\3\7\1\3\51\7"+
    "\2\3\1\7\7\0\1\3\3\0\1\3\4\0\1\7"+
    "\10\3\1\0\10\3\2\7\2\0\2\3\12\0\12\3"+
    "\6\7\2\3\2\0\1\3\22\7\3\3\30\7\1\3"+
    "\11\7\1\3\1\7\2\3\7\7\3\3\1\0\4\3"+
    "\6\0\1\3\1\0\1\3\10\0\22\3\2\0\15\3"+
    "\60\7\1\0\2\7\7\0\4\3\10\7\10\0\1\3"+
    "\12\0\47\3\2\7\1\3\1\7\2\3\2\7\1\3"+
    "\1\7\2\3\1\7\6\3\4\7\1\3\7\7\1\3"+
    "\3\7\1\3\1\7\1\3\1\7\2\3\2\7\1\3"+
    "\4\7\1\0\2\7\6\0\1\3\2\0\1\7\2\3"+
    "\5\7\1\3\1\7\1\3\6\0\2\3\12\0\2\3"+
    "\4\7\40\3\1\7\27\3\2\0\6\3\12\0\13\3"+
    "\1\0\1\3\1\0\1\3\1\0\4\3\2\0\10\7"+
    "\1\3\44\7\4\3\24\0\1\3\2\0\5\7\13\0"+
    "\1\3\44\0\11\3\1\0\71\3\53\7\24\0\1\7"+
    "\12\0\6\3\6\7\4\0\4\7\3\0\1\7\3\0"+
    "\2\7\7\0\3\7\4\0\15\7\14\0\1\7\17\0"+
    "\2\3\46\7\1\3\1\7\5\3\1\7\2\3\53\7"+
    "\1\3\115\7\1\3\4\7\2\3\7\7\1\3\1\7"+
    "\1\3\4\7\2\3\51\7\1\3\4\7\2\3\41\7"+
    "\1\3\4\7\2\3\7\7\1\3\1\7\1\3\4\7"+
    "\2\3\17\7\1\3\71\7\1\3\4\7\2\3\103\7"+
    "\2\3\3\0\40\3\20\7\20\3\125\7\14\3\u016c\7"+
    "\2\3\21\7\1\3\32\7\5\3\113\7\3\3\3\7"+
    "\17\3\15\7\1\3\4\7\3\0\13\3\22\7\3\0"+
    "\13\3\22\7\2\0\14\3\15\7\1\3\3\7\1\3"+
    "\2\0\14\3\64\7\40\0\3\3\1\7\3\3\2\7"+
    "\1\0\2\3\12\0\41\3\3\0\2\3\12\0\6\3"+
    "\130\7\10\3\51\7\1\0\1\7\5\3\106\7\12\3"+
    "\35\7\3\3\14\0\4\3\14\0\12\3\12\0\36\7"+
    "\2\3\5\7\13\3\54\7\4\3\21\0\7\7\2\0"+
    "\6\3\12\0\46\3\27\7\5\0\4\3\65\7\12\0"+
    "\1\3\35\0\2\3\13\0\6\3\12\0\15\3\1\7"+
    "\130\3\5\0\57\7\21\0\7\7\4\3\12\0\21\3"+
    "\11\0\14\3\3\0\36\7\15\0\2\7\12\0\54\7"+
    "\16\0\14\3\44\7\24\0\10\3\12\0\3\3\3\7"+
    "\12\0\44\7\122\3\3\0\1\3\25\0\4\7\1\0"+
    "\4\7\3\0\2\7\11\3\300\7\47\0\25\3\4\0"+
    "\26\7\2\3\6\7\2\3\46\7\2\3\6\7\2\3"+
    "\10\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\37\7\2\3\65\7\1\3\7\7\1\3\1\7\3\3"+
    "\3\7\1\3\7\7\3\3\4\7\2\3\6\7\4\3"+
    "\15\7\5\3\3\7\1\3\7\7\16\3\5\0\32\3"+
    "\5\0\20\3\2\7\23\3\1\7\13\3\5\0\5\3"+
    "\6\0\1\3\1\7\15\3\1\7\20\3\15\7\3\3"+
    "\33\7\25\3\15\0\4\3\1\0\3\3\14\0\21\3"+
    "\1\7\4\3\1\7\2\3\12\7\1\3\1\7\3\3"+
    "\5\7\6\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\4\7\1\3\13\7\2\3\4\7\5\3\5\7\4\3"+
    "\1\7\21\3\51\7\u0177\3\57\7\1\3\57\7\1\3"+
    "\205\7\6\3\4\7\3\0\2\7\14\3\46\7\1\3"+
    "\1\7\5\3\1\7\2\3\70\7\7\3\1\7\17\3"+
    "\1\0\27\7\11\3\7\7\1\3\7\7\1\3\7\7"+
    "\1\3\7\7\1\3\7\7\1\3\7\7\1\3\7\7"+
    "\1\3\7\7\1\3\40\0\57\3\1\7\325\3\3\7"+
    "\31\3\11\7\6\0\1\3\5\7\2\3\5\7\4\3"+
    "\126\7\2\3\2\0\2\3\3\7\1\3\132\7\1\3"+
    "\4\7\5\3\51\7\3\3\136\7\21\3\33\7\65\3"+
    "\306\7\112\3\315\7\63\3\215\7\103\3\56\7\2\3"+
    "\15\7\3\3\20\7\12\0\2\7\24\3\57\7\1\0"+
    "\4\3\12\0\1\3\31\7\7\3\1\0\120\7\2\0"+
    "\45\3\11\7\2\3\147\7\2\3\4\7\1\3\4\7"+
    "\14\3\13\7\115\3\12\7\1\0\3\7\1\0\4\7"+
    "\1\0\27\7\5\0\20\3\1\7\7\3\64\7\14\3"+
    "\2\0\62\7\21\0\13\3\12\0\6\3\22\0\6\7"+
    "\3\3\1\7\4\3\12\0\34\7\10\0\2\3\27\7"+
    "\15\0\14\3\35\7\3\3\4\0\57\7\16\0\16\3"+
    "\1\7\12\0\46\3\51\7\16\0\11\3\3\7\1\0"+
    "\10\7\2\0\2\3\12\0\6\3\27\7\3\3\1\7"+
    "\1\0\4\3\60\7\1\0\1\7\3\0\2\7\2\0"+
    "\5\7\2\0\1\7\1\0\1\7\30\3\3\7\2\3"+
    "\13\7\5\0\2\3\3\7\2\0\12\3\6\7\2\3"+
    "\6\7\2\3\6\7\11\3\7\7\1\3\7\7\221\3"+
    "\43\7\10\0\1\3\2\0\2\3\12\0\6\3\244\7"+
    "\14\3\27\7\4\3\61\7\4\3\156\7\2\3\152\7"+
    "\46\3\7\7\14\3\5\7\5\3\1\7\1\0\12\7"+
    "\1\3\15\7\1\3\5\7\1\3\1\7\1\3\2\7"+
    "\1\3\2\7\1\3\154\7\41\3\153\7\22\3\100\7"+
    "\2\3\66\7\50\3\15\7\3\3\20\0\20\3\7\0"+
    "\14\3\2\7\30\3\3\7\31\3\1\7\6\3\5\7"+
    "\1\3\207\7\2\3\1\0\4\3\1\7\13\3\12\0"+
    "\7\3\32\7\4\3\1\7\1\3\32\7\13\3\131\7"+
    "\3\3\6\7\2\3\6\7\2\3\6\7\2\3\3\7"+
    "\3\3\2\7\3\3\2\7\22\3\3\0\4\3\14\7"+
    "\1\3\32\7\1\3\23\7\1\3\2\7\1\3\17\7"+
    "\2\3\16\7\42\3\173\7\105\3\65\7\210\3\1\0"+
    "\202\3\35\7\3\3\61\7\57\3\37\7\21\3\33\7"+
    "\65\3\36\7\2\3\44\7\4\3\10\7\1\3\5\7"+
    "\52\3\236\7\2\3\12\0\126\3\6\7\2\3\1\7"+
    "\1\3\54\7\1\3\2\7\3\3\1\7\2\3\27\7"+
    "\252\3\26\7\12\3\32\7\106\3\70\7\6\3\2\7"+
    "\100\3\1\7\3\0\1\3\2\0\5\3\4\0\4\7"+
    "\1\3\3\7\1\3\33\7\4\3\3\0\4\3\1\0"+
    "\40\3\35\7\203\3\66\7\12\3\26\7\12\3\23\7"+
    "\215\3\111\7\267\3\3\0\65\7\17\0\37\3\12\0"+
    "\20\3\3\0\55\7\13\0\2\3\1\0\22\3\31\7"+
    "\7\3\12\0\6\3\3\0\44\7\16\0\1\3\12\0"+
    "\100\3\3\0\60\7\16\0\4\7\13\3\12\0\246\3"+
    "\53\7\15\0\10\3\12\0\66\3\157\7\221\3\143\7"+
    "\235\3\57\7\321\3\71\7\307\3\105\7\13\3\1\7"+
    "\56\0\20\3\4\0\15\7\140\3\2\7\u0163\3\5\0"+
    "\3\3\26\0\2\3\7\0\36\3\4\0\224\3\3\0"+
    "\273\3\125\7\1\3\107\7\1\3\2\7\2\3\1\7"+
    "\2\3\2\7\2\3\4\7\1\3\14\7\1\3\1\7"+
    "\1\3\7\7\1\3\101\7\1\3\4\7\2\3\10\7"+
    "\1\3\7\7\1\3\34\7\1\3\4\7\1\3\5\7"+
    "\1\3\1\7\3\3\7\7\1\3\u0154\7\2\3\31\7"+
    "\1\3\31\7\1\3\37\7\1\3\31\7\1\3\37\7"+
    "\1\3\31\7\1\3\37\7\1\3\31\7\1\3\37\7"+
    "\1\3\31\7\1\3\10\7\2\3\62\0\4\7\1\3"+
    "\33\7\1\3\2\7\1\3\1\7\2\3\1\7\1\3"+
    "\12\7\1\3\4\7\1\3\1\7\1\3\1\7\6\3"+
    "\1\7\4\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\3\7\1\3\2\7\1\3\1\7\2\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\2\7\1\3\1\7\2\3\4\7\1\3\7\7\1\3"+
    "\4\7\1\3\4\7\1\3\1\7\1\3\12\7\1\3"+
    "\21\7\5\3\3\7\1\3\5\7\1\3\21\7\104\3"+
    "\327\7\51\3\65\7\13\3\336\7\343\3\1\0\36\3"+
    "\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21248];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\2\2\1\3\1\4\1\5\2\3\1\6"+
    "\6\3\2\7\2\3\21\5\1\3\1\10\2\11\1\12"+
    "\1\13\15\10\1\14\2\15\1\16\1\17\1\10\1\20"+
    "\1\10\5\21\11\14\12\22\1\23\1\24\15\23\2\25"+
    "\3\26\1\27\1\26\2\30\1\31\2\26\3\32\1\33"+
    "\12\32\1\26\1\34\2\35\1\36\15\34\2\37\1\40"+
    "\1\41\2\42\15\30\1\43\2\44\1\45\16\43\1\46"+
    "\1\47\1\50\16\47\1\51\1\52\11\0\2\53\1\0"+
    "\1\2\1\0\1\53\1\5\1\54\47\5\2\10\1\54"+
    "\26\10\2\0\1\54\26\0\1\53\2\0\16\5\1\54"+
    "\2\5\1\54\23\5\1\55\1\5\6\10\1\54\16\10"+
    "\6\0\1\54\17\0\1\2\3\5\1\54\1\56\6\5"+
    "\1\57\1\60\17\5\1\56\6\5\1\54\25\10\1\54"+
    "\25\0\1\54\2\5\1\54\26\5\17\10\17\0\1\5"+
    "\2\54\7\5\1\54\2\5\4\10\1\54\1\10\4\0"+
    "\1\54\1\0\5\5\4\10\4\0\2\5\1\10\1\0"+
    "\2\5\1\10\1\0\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[589];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u02f4\0\u0333\0\u0372"+
    "\0\u02f4\0\u03b1\0\u02f4\0\u03f0\0\u02f4\0\u042f\0\u046e\0\u04ad"+
    "\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5"+
    "\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d"+
    "\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95"+
    "\0\u0ad4\0\u0b13\0\u02f4\0\u0b52\0\u02f4\0\u02f4\0\u0b91\0\u0bd0"+
    "\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8"+
    "\0\u0e07\0\u0e46\0\u0e85\0\u02f4\0\u02f4\0\u0ec4\0\u02f4\0\u02f4"+
    "\0\u0f03\0\u02f4\0\u0f42\0\u02f4\0\u0f81\0\u0fc0\0\u0fff\0\u103e"+
    "\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u02f4\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8"+
    "\0\u11f7\0\u1236\0\u1275\0\u02f4\0\u02f4\0\u0f81\0\u0fc0\0\u0fff"+
    "\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7"+
    "\0\u1236\0\u1275\0\u02f4\0\u12b4\0\u12f3\0\u02f4\0\u1332\0\u02f4"+
    "\0\u1371\0\u02f4\0\u13b0\0\u02f4\0\u13ef\0\u142e\0\u02f4\0\u0f81"+
    "\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179"+
    "\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u146d\0\u02f4\0\u02f4\0\u14ac"+
    "\0\u02f4\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb"+
    "\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u02f4\0\u14eb"+
    "\0\u02f4\0\u02f4\0\u02f4\0\u152a\0\u0f81\0\u0fc0\0\u0fff\0\u103e"+
    "\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u02f4\0\u02f4\0\u1569\0\u02f4\0\u15a8\0\u0f81\0\u0fc0"+
    "\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8"+
    "\0\u11f7\0\u1236\0\u1275\0\u02f4\0\u02f4\0\u02f4\0\u15e7\0\u0f81"+
    "\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179"+
    "\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u02f4\0\u1626\0\u042f\0\u1665"+
    "\0\u16a4\0\u16e3\0\u1722\0\u052b\0\u05a9\0\u1761\0\u17a0\0\u17df"+
    "\0\u16e3\0\u181e\0\u185d\0\u189c\0\u05a9\0\u18db\0\u03b1\0\u191a"+
    "\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12"+
    "\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a"+
    "\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02"+
    "\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa"+
    "\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2"+
    "\0\u0b13\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab"+
    "\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3"+
    "\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b"+
    "\0\u28da\0\u02f4\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54"+
    "\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c"+
    "\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44"+
    "\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c"+
    "\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234"+
    "\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c"+
    "\0\u346b\0\u34aa\0\u34e9\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624"+
    "\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd\0\u381c"+
    "\0\u03b1\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957\0\u3996\0\u39d5"+
    "\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd"+
    "\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86\0\u3dc5"+
    "\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd"+
    "\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137\0\u4176\0\u41b5"+
    "\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u2ec2\0\u432f\0\u436e"+
    "\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u44e8\0\u4527\0\u4566"+
    "\0\u45a5\0\u02f4\0\u02f4\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u46e0"+
    "\0\u471f\0\u475e\0\u479d\0\u47dc\0\u481b\0\u485a\0\u4899\0\u48d8"+
    "\0\u4917\0\u4956\0\u03b1\0\u4995\0\u49d4\0\u4a13\0\u4a52\0\u4a91"+
    "\0\u4ad0\0\u4b0f\0\u4b4e\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89"+
    "\0\u4cc8\0\u4d07\0\u4d46\0\u4d85\0\u4dc4\0\u4e03\0\u4e42\0\u4e81"+
    "\0\u4ec0\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc\0\u4ffb\0\u503a\0\u5079"+
    "\0\u50b8\0\u50f7\0\u5136\0\u5175\0\u51b4\0\u51f3\0\u5232\0\u5271"+
    "\0\u52b0\0\u52ef\0\u532e\0\u536d\0\u53ac\0\u53eb\0\u542a\0\u5469"+
    "\0\u54a8\0\u54e7\0\u5526\0\u5565\0\u55a4\0\u55e3\0\u5622\0\u5661"+
    "\0\u56a0\0\u56df\0\u571e\0\u575d\0\u579c\0\u57db\0\u581a\0\u5859"+
    "\0\u5898\0\u58d7\0\u5916\0\u5955\0\u5994\0\u59d3\0\u5a12\0\u5a51"+
    "\0\u5a90\0\u5acf\0\u5b0e\0\u5b4d\0\u5b8c\0\u5bcb\0\u5c0a\0\u5c49"+
    "\0\u5c88\0\u5cc7\0\u5d06\0\u5d45\0\u5d84\0\u5dc3\0\u5e02\0\u5e41"+
    "\0\u5e80\0\u5ebf\0\u5efe\0\u5f3d\0\u5f7c\0\u5fbb\0\u5ffa\0\u6039"+
    "\0\u6078\0\u60b7\0\u60f6\0\u6135\0\u6174\0\u61b3\0\u61f2\0\u6231"+
    "\0\u6270\0\u62af\0\u62ee\0\u632d\0\u636c\0\u63ab\0\u63ea\0\u6429"+
    "\0\u6468\0\u64a7\0\u64e6\0\u6525\0\u6564\0\u65a3\0\u65e2\0\u36e1"+
    "\0\u6621\0\u6660\0\u669f\0\u66de\0\u671d\0\u675c\0\u3c8a\0\u679b"+
    "\0\u67da\0\u6819\0\u6858\0\u6897\0\u41b5\0\u68d6\0\u6915\0\u6954"+
    "\0\u6993\0\u69d2\0\u6a11\0\u6a50\0\u6a8f\0\u6ace\0\u6b0d\0\u6b4c"+
    "\0\u6b8b\0\u6bca\0\u6c09\0\u6c48\0\u6c87\0\u6cc6\0\u6d05\0\u6d44"+
    "\0\u6d83\0\u6dc2\0\u6e01\0\u6e40\0\u6e7f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[589];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\2\16\1\15\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\23\1\26\1\27\1\30\1\23\1\31"+
    "\1\32\1\33\1\34\10\35\1\23\1\36\1\20\1\37"+
    "\3\22\1\15\1\26\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\22\1\46\1\47\2\22\1\50\2\22\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\22\1\60"+
    "\1\22\1\61\1\26\2\62\1\63\1\62\1\64\1\62"+
    "\1\65\3\62\1\66\30\62\1\66\3\62\1\67\1\70"+
    "\1\71\1\72\2\62\1\73\2\62\1\74\2\62\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\5\62\1\104"+
    "\2\105\1\104\1\106\1\104\1\107\3\104\1\110\10\104"+
    "\11\111\1\112\3\104\2\113\3\104\2\114\1\115\1\116"+
    "\1\117\1\120\2\104\1\121\2\104\1\122\2\104\1\123"+
    "\1\124\1\125\1\126\1\127\1\130\1\131\5\104\1\132"+
    "\2\105\1\132\1\106\1\132\1\110\3\132\1\107\10\132"+
    "\11\111\1\112\3\132\2\113\3\132\2\114\1\115\1\116"+
    "\1\117\1\120\2\132\1\133\2\132\1\134\2\132\1\135"+
    "\1\136\1\137\1\140\1\141\1\142\1\143\5\132\6\144"+
    "\1\145\40\144\1\146\1\147\1\150\1\151\2\144\1\152"+
    "\2\144\1\153\2\144\1\154\1\155\1\156\1\157\1\160"+
    "\1\161\1\162\17\144\1\145\34\144\1\146\1\147\1\150"+
    "\1\151\2\144\1\152\2\144\1\153\2\144\1\154\1\155"+
    "\1\156\1\157\1\160\1\161\1\162\5\144\1\114\2\163"+
    "\1\114\1\164\1\165\2\114\1\166\1\167\1\114\1\166"+
    "\1\170\1\171\1\165\1\163\1\165\1\172\1\165\11\173"+
    "\1\174\1\175\1\165\1\176\1\177\1\114\1\177\1\114"+
    "\1\166\2\177\1\200\1\201\1\202\1\203\2\177\1\204"+
    "\2\177\1\205\2\177\1\206\1\207\1\210\1\211\1\212"+
    "\1\213\1\214\3\177\1\215\1\166\1\216\2\217\1\216"+
    "\1\220\13\216\1\172\2\216\11\173\1\221\12\216\1\222"+
    "\1\223\1\224\1\225\2\216\1\226\2\216\1\227\2\216"+
    "\1\230\1\231\1\232\1\233\1\234\1\235\1\236\5\216"+
    "\2\62\1\237\1\62\1\240\1\62\1\241\3\62\1\242"+
    "\30\62\1\241\3\62\1\67\1\70\1\71\1\72\2\62"+
    "\1\73\2\62\1\74\2\62\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\5\62\1\172\2\243\1\172\1\244"+
    "\6\172\2\243\17\172\1\243\7\172\1\243\2\172\1\245"+
    "\1\246\1\247\1\250\2\172\1\251\2\172\1\252\2\172"+
    "\1\253\1\254\1\255\1\256\1\257\1\260\1\261\5\172"+
    "\1\262\2\263\1\262\1\264\6\262\2\265\5\262\1\266"+
    "\11\262\1\265\7\262\1\265\2\262\1\267\1\270\1\271"+
    "\1\272\2\262\1\273\2\262\1\274\2\262\1\275\1\276"+
    "\1\277\1\300\1\301\1\302\1\303\5\262\1\304\2\305"+
    "\1\304\2\305\2\304\2\305\1\304\2\306\4\305\1\306"+
    "\1\307\11\305\1\306\6\305\1\304\1\306\2\305\1\310"+
    "\1\311\1\312\1\313\2\305\1\314\2\305\1\315\2\305"+
    "\1\316\1\317\1\320\1\321\1\322\1\323\1\324\4\305"+
    "\1\325\101\0\1\16\132\0\1\23\40\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\30\22\13\0"+
    "\1\23\74\0\1\326\4\0\1\327\23\0\3\326\1\0"+
    "\1\327\30\326\1\0\1\327\15\0\1\23\20\0\1\23"+
    "\56\0\1\330\1\0\1\331\2\0\1\332\12\0\1\23"+
    "\60\0\1\333\1\334\1\0\1\335\10\336\2\0\1\23"+
    "\60\0\1\337\1\340\1\0\11\341\60\0\1\342\4\0"+
    "\1\343\13\0\1\23\61\0\1\344\1\0\11\345\64\0"+
    "\1\344\1\0\11\35\100\0\2\23\76\0\2\23\37\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\3\22\1\346\14\22\1\347\7\22\2\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\1\350\14\22"+
    "\1\351\1\22\1\352\6\22\1\353\1\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\1\354"+
    "\14\22\1\355\12\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\1\356\3\22\1\357\10\22"+
    "\1\347\12\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\12\22\1\360\1\22\1\361\4\22"+
    "\1\362\6\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\1\363\7\22\1\364\4\22\1\365"+
    "\1\22\1\366\2\22\1\367\5\22\2\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\4\22\1\370"+
    "\10\22\1\371\12\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\5\22\1\347\5\22\1\372"+
    "\1\373\13\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\1\374\7\22\1\375\4\22\1\376"+
    "\12\22\2\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\2\0\1\377\16\22\1\u0100\2\22\1\u0101\5\22"+
    "\2\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\2\0\4\22\1\u0102\23\22\2\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\2\0\4\22\1\u0103\10\22"+
    "\1\u0104\3\22\1\u0105\5\22\1\u0106\2\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\7\22\1\u0107"+
    "\7\22\1\u0108\10\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\5\22\1\u0109\2\22\1\u010a"+
    "\17\22\2\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\2\0\1\365\7\22\1\u010b\17\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\4\22"+
    "\1\u010c\2\22\1\u010d\20\22\2\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\2\0\4\22\1\u010e\23\22"+
    "\77\0\1\23\1\0\2\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\33\62\2\0\1\63"+
    "\74\0\2\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\16\62\1\u010f\16\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\5\62"+
    "\1\u0110\10\62\1\u0111\16\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\13\62\1\u0112\1\62"+
    "\1\u0113\17\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\1\62\1\u0114\14\62\1\u0115\1\62"+
    "\1\u0116\2\62\1\u0117\11\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\6\62\1\u0111\5\62"+
    "\1\u0118\1\u0119\17\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\0\30\62\1\0\1\62\1\u011a\14\62\1\u011b"+
    "\16\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\1\62\1\u011c\16\62\1\u011d\2\62\1\u011e"+
    "\11\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\5\62\1\u011f\27\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\16\62\1\u0120"+
    "\3\62\1\u0121\12\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\0\30\62\1\0\10\62\1\u0122\7\62\1\u0123"+
    "\14\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\6\62\1\u0124\2\62\1\u0125\23\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\1\62\1\u0115\7\62\1\u0126\23\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\10\62\1\u0127"+
    "\22\62\2\0\1\105\117\0\11\111\103\0\2\113\117\0"+
    "\1\u0128\65\0\1\u0129\10\0\1\u012a\73\0\1\u012b\1\0"+
    "\1\u012c\62\0\1\u012d\14\0\1\u012e\1\0\1\u012f\2\0"+
    "\1\u0130\61\0\1\u012a\5\0\1\u0131\1\u0132\62\0\1\u0133"+
    "\14\0\1\u0134\61\0\1\u0135\16\0\1\u0136\2\0\1\u0137"+
    "\60\0\1\u0138\107\0\1\u0139\3\0\1\u013a\64\0\1\u013b"+
    "\7\0\1\u013c\64\0\1\u013d\2\0\1\u013e\66\0\1\u012e"+
    "\7\0\1\u013f\75\0\1\u0140\24\0\1\163\132\0\1\166"+
    "\51\0\1\166\102\0\1\166\20\0\1\166\63\0\11\173"+
    "\100\0\2\166\76\0\2\166\134\0\1\166\3\0\1\217"+
    "\76\0\1\237\76\0\1\243\76\0\1\263\116\0\1\265"+
    "\76\0\1\306\54\0\1\326\6\0\1\326\13\0\11\326"+
    "\4\0\3\326\2\0\30\326\20\0\1\330\1\0\1\331"+
    "\2\0\1\332\73\0\1\331\2\0\1\332\76\0\11\341"+
    "\63\0\1\333\1\334\1\0\1\335\10\336\64\0\1\344"+
    "\1\0\11\336\63\0\1\337\2\0\11\341\63\0\1\u0141"+
    "\1\340\1\0\11\341\43\0\15\u0142\1\u0143\61\u0142\2\343"+
    "\1\16\1\343\1\17\72\343\21\0\1\340\55\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\3\22"+
    "\1\u0144\24\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\12\22\1\u0145\15\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\15\22"+
    "\1\u0146\12\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\4\22\1\u0147\23\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\21\22"+
    "\1\u0148\6\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\12\22\1\u0149\15\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\14\22"+
    "\1\u014a\13\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\26\22\1\u014b\1\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\12\22"+
    "\1\u014c\15\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\20\22\1\u014d\7\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\22\22"+
    "\1\u014e\5\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\7\22\1\u014f\20\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\12\22"+
    "\1\360\15\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\14\22\1\u0150\13\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\17\22"+
    "\1\347\10\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\15\22\1\u014e\12\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\14\22"+
    "\1\u0151\13\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\25\22\1\u0152\2\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\22\22"+
    "\1\u0153\5\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\16\22\1\u0154\11\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\21\22"+
    "\1\u0155\6\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\16\22\1\u0156\11\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\14\22"+
    "\1\u0157\13\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\3\22\1\u0158\24\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\26\22"+
    "\1\u0159\1\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\1\u015a\7\22\1\u015b\17\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\1\22\1\u015c\26\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\21\22\1\u015d\6\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\2\22\1\u015e\11\22\1\u015f\13\22\2\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\12\22\1\u0160"+
    "\15\22\2\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\2\0\17\22\1\u0161\10\22\2\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\1\u0162\27\22"+
    "\2\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\2\0\10\22\1\u0163\17\22\2\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\2\0\1\u0164\21\22\1\u014d"+
    "\5\22\2\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\2\0\10\22\1\u0165\17\22\2\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\14\22\1\u0166"+
    "\13\22\2\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\2\0\4\22\1\u0167\23\22\2\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\4\22\1\u0168"+
    "\3\22\1\u0169\17\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\10\22\1\u016a\17\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\1\u0153\27\22\2\0\2\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\15\62\1\u016b\17\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\13\62\1\u016c\21\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\21\62\1\u016d\13\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\23\62\1\u016e\11\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\13\62\1\u0112\21\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\20\62\1\u0111\14\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\16\62\1\u016e\16\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\15\62\1\u016f\17\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\17\62\1\u0170\15\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\22\62\1\u0171\12\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\17\62\1\u0172\15\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\4\62\1\u0173\30\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\27\62\1\u0174\5\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\1\62\1\u0175\7\62\1\u0176\23\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\2\62"+
    "\1\u0177\32\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\22\62\1\u0178\12\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\13\62"+
    "\1\u0179\21\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\20\62\1\u017a\14\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\11\62"+
    "\1\u017b\23\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\23\62\1\u016d\11\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\11\62"+
    "\1\u017c\23\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\15\62\1\u017d\17\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\5\62"+
    "\1\u017e\27\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\11\62\1\u017f\21\62\61\0\1\u0180"+
    "\74\0\1\u0181\104\0\1\u0182\100\0\1\u0183\66\0\1\u012b"+
    "\103\0\1\u012a\74\0\1\u0183\75\0\1\u0184\100\0\1\u0185"+
    "\101\0\1\u0186\73\0\1\u0187\63\0\1\u0188\121\0\1\u0189"+
    "\50\0\1\u018a\7\0\1\u018b\67\0\1\u018c\116\0\1\u018d"+
    "\67\0\1\u018e\103\0\1\u018f\67\0\1\u0190\110\0\1\u0182"+
    "\64\0\1\u0191\102\0\1\u0192\66\0\1\u0193\102\0\1\u0194"+
    "\41\0\1\u0141\2\0\11\341\43\0\15\u0142\1\u0195\76\u0142"+
    "\1\u0195\4\u0142\1\u0196\54\u0142\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\17\22\1\u0197\10\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\1\u0198\27\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\12\22\1\347\15\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\1\u0199"+
    "\27\22\2\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\2\0\4\22\1\u019a\23\22\2\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\12\22\1\u019b"+
    "\15\22\2\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\2\0\20\22\1\u019c\1\u019d\6\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\20\22"+
    "\1\u0169\7\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\4\22\1\u019e\23\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\4\22"+
    "\1\347\23\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\13\22\1\347\14\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\4\22"+
    "\1\u019f\23\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\14\22\1\u01a0\13\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\2\22"+
    "\1\u01a1\25\22\2\0\1\22\5\0\1\u01a2\1\22\2\0"+
    "\1\u01a3\10\0\11\22\4\0\3\22\2\0\30\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\17\22\1\u014b\10\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\15\22\1\u01a4\12\22\2\0"+
    "\1\22\6\0\1\22\13\0\1\22\1\u01a5\1\u01a6\1\u01a7"+
    "\2\22\1\u01a8\1\22\1\347\4\0\3\22\2\0\4\22"+
    "\1\u01a9\23\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\16\22\1\u01aa\11\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\22\22"+
    "\1\u01ab\5\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\10\22\1\u01ac\17\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\1\u01ad"+
    "\27\22\2\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\2\0\6\22\1\u01ae\21\22\2\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\23\22\1\u01af"+
    "\4\22\2\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\2\0\12\22\1\u01b0\15\22\2\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\22\22\1\u01b1"+
    "\5\22\2\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\2\0\15\22\1\u01b2\12\22\2\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\3\22\1\u01b3"+
    "\24\22\2\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\2\0\10\22\1\u01b4\17\22\2\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\10\22\1\u01b5"+
    "\11\22\1\u01b6\5\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\1\22\1\u01b7\26\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\20\22\1\347\7\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\14\22\1\u01b8\13\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\25\22\1\u01b9\2\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\21\22\1\u01ba\6\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\24\22\1\347\3\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\11\22\1\u014b\16\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\12\22\1\u014d\15\22\2\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\21\62\1\u01bb"+
    "\1\u01bc\12\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\5\62\1\u01bd\27\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\5\62"+
    "\1\u0111\27\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\14\62\1\u0111\20\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\3\62"+
    "\1\u01be\31\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\16\62\1\u01bf\16\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\11\62\1\u01c0\1\u01c1"+
    "\1\u01c2\2\62\1\u01c3\1\62\1\u0111\7\62\1\0\5\62"+
    "\1\u01c4\27\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\17\62\1\u01c5\15\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\11\62"+
    "\1\u01c6\23\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\1\62\1\u01c7\33\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\7\62"+
    "\1\u01c8\25\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\24\62\1\u01c9\10\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\13\62"+
    "\1\u01ca\21\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\23\62\1\u01cb\11\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\11\62"+
    "\1\u01cc\23\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\11\62\1\u01cd\11\62\1\u01ce\11\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\21\62\1\u0111\13\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\26\62\1\u01cf\6\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\22\62\1\u01d0\12\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\25\62\1\u0111\7\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\13\62\1\u016d\17\62\65\0\1\u01d1\1\u01d2\61\0"+
    "\1\u01d3\76\0\1\u012a\105\0\1\u012a\65\0\1\u01d4\111\0"+
    "\1\u01d5\40\0\1\u01d6\1\u01d7\1\u01d8\2\0\1\u01d9\1\0"+
    "\1\u012a\15\0\1\u01da\110\0\1\u01db\70\0\1\u01dc\66\0"+
    "\1\u01dd\104\0\1\u01de\113\0\1\u01df\65\0\1\u01e0\106\0"+
    "\1\u01e1\64\0\1\u01e2\76\0\1\u01e3\11\0\1\u01e4\74\0"+
    "\1\u012a\103\0\1\u01e5\72\0\1\u01e6\101\0\1\u012a\64\0"+
    "\1\u0182\17\0\15\u0142\1\u0195\4\u0142\1\16\54\u0142\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\4\22"+
    "\1\u01e7\23\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\14\22\1\u01e8\13\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\11\22"+
    "\1\347\16\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\20\22\1\u01e9\7\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\2\22"+
    "\1\u01ea\25\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\21\22\1\u01eb\6\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\10\22"+
    "\1\u01ec\6\22\1\u01ed\10\22\2\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\2\0\6\22\1\u01ee\12\22"+
    "\1\u014d\6\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\17\22\1\u0169\10\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\4\22"+
    "\1\u01ef\23\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\21\22\1\u01f0\6\22\2\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\17\22"+
    "\1\u01f1\10\22\2\0\1\22\6\0\1\22\13\0\2\22"+
    "\1\u01f2\3\22\1\347\2\22\4\0\3\22\2\0\30\22"+
    "\2\0\1\22\6\0\1\22\13\0\5\22\1\u01f3\3\22"+
    "\4\0\3\22\2\0\30\22\2\0\1\22\6\0\1\22"+
    "\13\0\2\22\1\347\6\22\4\0\3\22\2\0\30\22"+
    "\2\0\1\22\6\0\1\22\13\0\4\22\1\347\4\22"+
    "\4\0\3\22\2\0\30\22\2\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\2\0\17\22\1\u01f4\10\22"+
    "\2\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\2\0\10\22\1\u01b5\17\22\2\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\2\0\21\22\1\u01f5\6\22"+
    "\2\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\2\0\5\22\1\u01f6\22\22\2\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\2\0\1\22\1\u016a\26\22"+
    "\2\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\2\0\13\22\1\u01f7\14\22\2\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\2\0\1\u01f8\27\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\10\22\1\u01f9\17\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\17\22\1\u01fa\10\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\14\22\1\u01fb\13\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\3\22\1\u01fc\24\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\14\22\1\u01fd\13\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\2\22\1\u01f1\25\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\15\22\1\u0169\12\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\20\22\1\u01fe\7\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\4\22\1\u01ff\23\22\2\0\1\22\6\0\1\22\13\0"+
    "\1\22\1\u01a5\1\u01a6\1\u01a7\2\22\1\u01a8\1\22\1\347"+
    "\4\0\3\22\2\0\30\22\2\0\2\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\22\62"+
    "\1\u0200\12\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\11\62\1\u0201\6\62\1\u0202\14\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\22\62\1\u016d\12\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\22\62\1\u0203\12\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\20\62\1\u0204\14\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\12\62\1\u0205\3\62\1\u0111\11\62"+
    "\1\0\35\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\15\62\1\u0206\12\62\1\0\35\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\12\62\1\u0111\15\62"+
    "\1\0\35\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\14\62\1\u0111\13\62\1\0\35\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\20\62"+
    "\1\u0207\14\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\11\62\1\u01cd\23\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\6\62"+
    "\1\u0208\26\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\2\62\1\u017f\32\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\14\62"+
    "\1\u0209\20\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\1\62\1\u01bd\33\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\11\62"+
    "\1\u020a\23\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\20\62\1\u020b\14\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\4\62"+
    "\1\u020c\30\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\15\62\1\u020d\17\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\3\62"+
    "\1\u0204\31\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\5\62\1\u020e\27\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\11\62\1\u01c0\1\u01c1"+
    "\1\u01c2\2\62\1\u01c3\1\62\1\u0111\7\62\1\0\33\62"+
    "\66\0\1\u020f\65\0\1\u0210\6\0\1\u0211\100\0\1\u0182"+
    "\76\0\1\u0212\74\0\1\u0213\37\0\1\u0214\3\0\1\u012a"+
    "\75\0\1\u0215\73\0\1\u012a\100\0\1\u012a\133\0\1\u0216"+
    "\67\0\1\u01e3\73\0\1\u0217\72\0\1\u0194\110\0\1\u0218"+
    "\63\0\1\u01d3\106\0\1\u0219\105\0\1\u021a\62\0\1\u021b"+
    "\107\0\1\u021c\64\0\1\u0213\100\0\1\u021d\51\0\1\u01d6"+
    "\1\u01d7\1\u01d8\2\0\1\u01d9\1\0\1\u012a\43\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\2\0\20\22"+
    "\1\u0163\7\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\2\22\1\u021e\25\22\2\0\1\22"+
    "\6\0\1\22\13\0\1\22\2\u021f\1\u0220\5\347\4\0"+
    "\3\22\2\0\30\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\15\22\1\u0221\12\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\17\22\1\u0222\10\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\14\22\1\u0223\13\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\1\u01b6\27\22\2\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\2\0\1\u0224\27\22\2\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\26\22\1\u0169"+
    "\1\22\2\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\2\0\10\22\1\u0225\17\22\2\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\21\22\1\347"+
    "\6\22\2\0\1\22\6\0\1\22\13\0\10\22\1\347"+
    "\4\0\3\22\2\0\30\22\2\0\1\22\6\0\1\22"+
    "\13\0\6\22\1\347\2\22\4\0\3\22\2\0\30\22"+
    "\2\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\2\0\14\22\1\u0226\13\22\2\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\2\0\4\22\1\u014b\23\22"+
    "\2\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\2\0\10\22\1\u0227\17\22\2\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\2\0\1\347\27\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\21\22\1\u014d\6\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\2\22\1\347\25\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\14\22\1\u0228\13\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\3\22\1\u014b\24\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\10\22\1\u0229\17\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\6\22\1\347\21\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\5\22\1\u022a\22\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\3\22\1\347\24\22\2\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\20\62\1\u022b\14\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\15\62\1\u0123"+
    "\17\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\1\62\1\u01ce\33\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\11\62\1\u022c"+
    "\23\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\22\62\1\u0111\12\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\20\62\1\u0111\7\62\1\0"+
    "\35\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\16\62\1\u0111\11\62\1\0\35\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\15\62\1\u022d"+
    "\17\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\11\62\1\u022e\23\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\1\62\1\u0111"+
    "\33\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\3\62\1\u0111\31\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\15\62\1\u022f"+
    "\17\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\11\62\1\u0230\23\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\7\62\1\u0111"+
    "\25\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\4\62\1\u0111\26\62\64\0\1\u0231\73\0"+
    "\1\u013c\62\0\1\u01e4\106\0\1\u0232\107\0\1\u012a\43\0"+
    "\1\u012a\74\0\1\u012a\126\0\1\u0233\72\0\1\u0234\66\0"+
    "\1\u012a\100\0\1\u012a\110\0\1\u0235\72\0\1\u0236\74\0"+
    "\1\u012a\73\0\1\u012a\26\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\4\22\1\u01b3\23\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\347\4\0\3\22\2\0"+
    "\30\22\2\0\1\22\6\0\1\22\13\0\3\347\6\22"+
    "\4\0\3\22\2\0\30\22\2\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\2\0\3\22\1\u021e\24\22"+
    "\2\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\2\0\22\22\1\u0237\5\22\2\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\2\0\22\22\1\u014d\5\22"+
    "\2\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\2\0\21\22\1\u0238\6\22\2\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\2\0\15\22\1\u0239\12\22"+
    "\2\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\2\0\1\u0146\27\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\4\22\1\365\23\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\21\22\1\u023a\6\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\4\22\1\u023b\23\22\2\0"+
    "\2\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\23\62\1\u023c\11\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\16\62\1\u023d"+
    "\16\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\1\62\1\u023e\33\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\5\62\1\u0115"+
    "\27\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\22\62\1\u023f\10\62\67\0\1\u0240\71\0"+
    "\1\u0241\61\0\1\u0242\102\0\1\u012e\113\0\1\u0243\10\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\2\22\1\u0244\25\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\4\22\1\u0245\23\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\14\22\1\347\13\22\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\2\0\26\22\1\347\1\22\2\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\2\0"+
    "\17\22\1\u01b3\10\22\2\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\3\62\1\u0246"+
    "\31\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\15\62\1\u0111\17\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\13\62\1\u0111"+
    "\21\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\27\62\1\u0111\3\62\47\0\1\u0247\110\0"+
    "\1\u012a\74\0\1\u012a\112\0\1\u012a\3\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\21\22\1\u0248"+
    "\6\22\2\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\2\0\2\22\1\u0249\25\22\2\0\2\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\22\62\1\u024a\10\62\66\0\1\u024b\10\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\2\0\15\22\1\365"+
    "\12\22\2\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\2\0\1\u024c\27\22\2\0\2\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\16\62"+
    "\1\u0115\14\62\62\0\1\u012e\14\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\2\0\12\22\1\u024d\15\22"+
    "\2\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\2\0\12\22\1\u01b3\15\22\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28350];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\2\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\35\1\1\11\1\1\2\11\15\1\2\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\15\1\1\11\11\1\2\11"+
    "\15\1\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\16\1\2\11\1\1\1\11"+
    "\15\1\1\11\1\1\3\11\16\1\2\11\1\1\1\11"+
    "\16\1\3\11\16\1\1\11\1\1\11\0\2\1\1\0"+
    "\1\1\1\0\103\1\2\0\1\11\26\0\1\1\2\0"+
    "\74\1\6\0\1\1\17\0\14\1\2\11\55\1\25\0"+
    "\51\1\17\0\23\1\4\0\1\1\1\0\11\1\4\0"+
    "\3\1\1\0\3\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[589];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    StringBuffer stringN = new StringBuffer();
    public static int banderaN = 0;
    public static int bandera = 0;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   for(Token t: tokens){
    t.print();
  }

  System.out.println("\nErrores\n");
  for(Token t: errores){
    t.print();
  }
  return 0;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { stringN.setLength(0);
     stringN.append(yytext());
     yybegin(stateNosibol);
            }
            // fall through
          case 49: break;
          case 2:
            { /* ignore */ ;banderaN =0;
            }
            // fall through
          case 50: break;
          case 3:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 51: break;
          case 4:
            { string.setLength(0); yybegin(STRING); bandera = yycolumn;
            }
            // fall through
          case 52: break;
          case 5:
            { stringN.setLength(0);
string.setLength(0);
string.append(yytext());
stringN.append(yytext());
yybegin(filtro);
            }
            // fall through
          case 53: break;
          case 6:
            { string.setLength(0); yybegin(Chars); bandera = yycolumn;
            }
            // fall through
          case 54: break;
          case 7:
            { string.setLength(0);
  string.append(yytext());
  yybegin(numberState);
  banderaN =0;
            }
            // fall through
          case 55: break;
          case 8:
            { string.append( yytext() );
            }
            // fall through
          case 56: break;
          case 9:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error stringASAD"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 57: break;
          case 10:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 58: break;
          case 11:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error string"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 59: break;
          case 12:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
    yybegin(hexaStateError);
            }
            // fall through
          case 60: break;
          case 13:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 61: break;
          case 14:
            { yybegin(YYINITIAL);
    string.append( yytext() ); 
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada"));
            }
            // fall through
          case 62: break;
          case 15:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 63: break;
          case 16:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); 
    errores.add(new Token("Comillas", yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 64: break;
          case 17:
            { System.out.println(yyline);
  System.out.println(yycolumn); 
  // throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 65: break;
          case 18:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 66: break;
          case 19:
            { 
            }
            // fall through
          case 67: break;
          case 20:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 68: break;
          case 21:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
            }
            // fall through
          case 69: break;
          case 22:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
  tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 70: break;
          case 23:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(")", yyline+1, yycolumn, "Operador"));
            }
            // fall through
          case 71: break;
          case 24:
            { string.append(yytext());
            }
            // fall through
          case 72: break;
          case 25:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(";", yyline+1, yycolumn, "Operador"));
            }
            // fall through
          case 73: break;
          case 26:
            { string.append(yytext()); yybegin(Identificadorcillo);
            }
            // fall through
          case 74: break;
          case 27:
            { yybegin(NaturalNumbers);
    string.append(yytext());
            }
            // fall through
          case 75: break;
          case 28:
            { bandera = 1; 
    string.append(yytext());
            }
            // fall through
          case 76: break;
          case 29:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
    }
            }
            // fall through
          case 77: break;
          case 30:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
            }
            // fall through
          case 78: break;
          case 31:
            { System.out.println("HOLA2");
    string.append( yytext() );
    errores.add(new Token(string.toString(), yyline, bandera, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 79: break;
          case 32:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 80: break;
          case 33:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
            }
            // fall through
          case 81: break;
          case 34:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error: identificador")); yybegin(YYINITIAL);
            }
            // fall through
          case 82: break;
          case 35:
            { stringN.append(yytext());yybegin(stateNosibol);
            }
            // fall through
          case 83: break;
          case 36:
            { errores.add(new Token(stringN.toString(), yyline, yycolumn, "Error: identificador"));
        yybegin(YYINITIAL);
            }
            // fall through
          case 84: break;
          case 37:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));     
        errores.add(new Token(stringN.toString(), yyline, yycolumn, "Error: identificador"));
        yybegin(YYINITIAL);
            }
            // fall through
          case 85: break;
          case 38:
            { stringN.append(yytext());
  yybegin(stateNosibol);
            }
            // fall through
          case 86: break;
          case 39:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 87: break;
          case 40:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador"));
  tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 88: break;
          case 41:
            { string.append(yytext()) ;
             errores.add(new Token(string.toString(), yyline, yycolumn, "Error Identificador"));
            yybegin(YYINITIAL);
            }
            // fall through
          case 89: break;
          case 42:
            { string.setLength(0);
  string.append(yytext());
  errores.add(new Token(string.toString(), yyline, yycolumn, "Error Decimal"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 90: break;
          case 43:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error Decimal"));
            }
            // fall through
          case 91: break;
          case 44:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 92: break;
          case 45:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 93: break;
          case 46:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 94: break;
          case 47:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 95: break;
          case 48:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaStateC);
            }
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
