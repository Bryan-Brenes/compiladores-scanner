// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

/* JFlex example: partial Java language lexer specification */
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int hexaState = 4;
  public static final int numberState = 6;
  public static final int NaturalNumbers = 8;
  public static final int Chars = 10;
  public static final int Comments = 12;
  public static final int lineComment = 14;
  public static final int indetifierState = 16;
  public static final int indetifierError = 18;
  public static final int decimalError = 20;
  public static final int OperadoresState = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\3\u1f00"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\3\u1f00\1\u3f00\1\u4000"+
    "\4\u1f00\1\u4100\11\u1f00\3\u0100\1\u4200\1\u4300\13\u1f00\4\u0100"+
    "\1\u4400\63\u1f00\2\u0100\1\u4500\4\u1f00\1\u4600\100\u1f00\1\u4700"+
    "\40\u1f00\1\u4800\1\u4900\1\u1f00\1\u4a00\1\u4b00\1\u4c00\1\u4d00"+
    "\26\u1f00\1\u4e00\21\u1f00\246\u0100\1\u4f00\20\u0100\1\u5000\1\u5100"+
    "\77\u1f00\2\u0100\1\u5100\u0b05\u1f00\1\u5200\1\u5300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\7\1\10\1\11\1\6\1\12\1\13\1\14\1\15"+
    "\2\13\1\16\1\10\1\13\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\31\2\13\1\33\1\34\1\35\1\13\1\6\6\36"+
    "\7\12\1\37\14\12\1\13\1\40\2\13\1\12\1\6"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\12\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\12\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\13\1\71\2\13\6\0\1\72\32\0"+
    "\2\6\4\12\4\6\1\12\2\6\1\0\7\6\1\12"+
    "\4\6\1\12\5\6\27\12\1\6\37\12\1\6\u01ca\12"+
    "\4\6\14\12\16\6\5\12\7\6\1\12\1\6\1\12"+
    "\21\6\160\0\5\12\1\6\2\12\2\6\4\12\10\6"+
    "\1\12\1\6\3\12\1\6\1\12\1\6\24\12\1\6"+
    "\123\12\1\6\213\12\1\6\5\0\2\6\236\12\11\6"+
    "\46\12\2\6\1\12\7\6\47\12\7\6\1\12\1\6"+
    "\55\0\1\6\1\0\1\6\2\0\1\6\2\0\1\6"+
    "\1\0\10\6\33\12\5\6\3\12\15\6\5\0\6\6"+
    "\1\12\4\6\13\0\5\6\53\12\37\0\4\6\2\12"+
    "\1\0\143\12\1\6\1\12\10\0\1\6\6\0\2\12"+
    "\2\0\1\6\4\0\2\12\12\0\3\12\2\6\1\12"+
    "\17\6\1\0\1\12\1\0\36\12\33\0\2\6\131\12"+
    "\13\0\1\12\16\6\12\0\41\12\11\0\2\12\4\6"+
    "\1\12\5\6\26\12\4\0\1\12\11\0\1\12\3\0"+
    "\1\12\5\0\22\6\31\12\3\0\104\6\1\12\1\6"+
    "\13\12\67\6\33\0\1\6\4\0\66\12\3\0\1\12"+
    "\22\0\1\12\7\0\12\12\2\0\2\6\12\0\1\6"+
    "\7\12\1\6\7\12\1\6\3\0\1\6\10\12\2\6"+
    "\2\12\2\6\26\12\1\6\7\12\1\6\1\12\3\6"+
    "\4\12\2\6\1\0\1\12\7\0\2\6\2\0\2\6"+
    "\3\0\1\12\10\6\1\0\4\6\2\12\1\6\3\12"+
    "\2\0\2\6\12\0\4\12\7\6\1\12\5\6\3\0"+
    "\1\6\6\12\4\6\2\12\2\6\26\12\1\6\7\12"+
    "\1\6\2\12\1\6\2\12\1\6\2\12\2\6\1\0"+
    "\1\6\5\0\4\6\2\0\2\6\3\0\3\6\1\0"+
    "\7\6\4\12\1\6\1\12\7\6\14\0\3\12\1\0"+
    "\13\6\3\0\1\6\11\12\1\6\3\12\1\6\26\12"+
    "\1\6\7\12\1\6\2\12\1\6\5\12\2\6\1\0"+
    "\1\12\10\0\1\6\3\0\1\6\3\0\2\6\1\12"+
    "\17\6\2\12\2\0\2\6\12\0\1\6\1\12\17\6"+
    "\3\0\1\6\10\12\2\6\2\12\2\6\26\12\1\6"+
    "\7\12\1\6\2\12\1\6\5\12\2\6\1\0\1\12"+
    "\7\0\2\6\2\0\2\6\3\0\10\6\2\0\4\6"+
    "\2\12\1\6\3\12\2\0\2\6\12\0\1\6\1\12"+
    "\20\6\1\0\1\12\1\6\6\12\3\6\3\12\1\6"+
    "\4\12\3\6\2\12\1\6\1\12\1\6\2\12\3\6"+
    "\2\12\3\6\3\12\3\6\14\12\4\6\5\0\3\6"+
    "\3\0\1\6\4\0\2\6\1\12\6\6\1\0\16\6"+
    "\12\0\11\6\1\12\7\6\3\0\1\6\10\12\1\6"+
    "\3\12\1\6\27\12\1\6\12\12\1\6\5\12\3\6"+
    "\1\12\7\0\1\6\3\0\1\6\4\0\7\6\2\0"+
    "\1\6\2\12\6\6\2\12\2\0\2\6\12\0\22\6"+
    "\2\0\1\6\10\12\1\6\3\12\1\6\27\12\1\6"+
    "\12\12\1\6\5\12\2\6\1\0\1\12\7\0\1\6"+
    "\3\0\1\6\4\0\7\6\2\0\7\6\1\12\1\6"+
    "\2\12\2\0\2\6\12\0\1\6\2\12\17\6\2\0"+
    "\1\6\10\12\1\6\3\12\1\6\51\12\2\6\1\12"+
    "\7\0\1\6\3\0\1\6\4\0\1\12\10\6\1\0"+
    "\10\6\2\12\2\0\2\6\12\0\12\6\6\12\2\6"+
    "\2\0\1\6\22\12\3\6\30\12\1\6\11\12\1\6"+
    "\1\12\2\6\7\12\3\6\1\0\4\6\6\0\1\6"+
    "\1\0\1\6\10\0\22\6\2\0\15\6\60\12\1\0"+
    "\2\12\7\0\4\6\10\12\10\0\1\6\12\0\47\6"+
    "\2\12\1\6\1\12\2\6\2\12\1\6\1\12\2\6"+
    "\1\12\6\6\4\12\1\6\7\12\1\6\3\12\1\6"+
    "\1\12\1\6\1\12\2\6\2\12\1\6\4\12\1\0"+
    "\2\12\6\0\1\6\2\0\1\12\2\6\5\12\1\6"+
    "\1\12\1\6\6\0\2\6\12\0\2\6\4\12\40\6"+
    "\1\12\27\6\2\0\6\6\12\0\13\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\2\0\10\12\1\6\44\12"+
    "\4\6\24\0\1\6\2\0\5\12\13\0\1\6\44\0"+
    "\11\6\1\0\71\6\53\12\24\0\1\12\12\0\6\6"+
    "\6\12\4\0\4\12\3\0\1\12\3\0\2\12\7\0"+
    "\3\12\4\0\15\12\14\0\1\12\17\0\2\6\46\12"+
    "\1\6\1\12\5\6\1\12\2\6\53\12\1\6\115\12"+
    "\1\6\4\12\2\6\7\12\1\6\1\12\1\6\4\12"+
    "\2\6\51\12\1\6\4\12\2\6\41\12\1\6\4\12"+
    "\2\6\7\12\1\6\1\12\1\6\4\12\2\6\17\12"+
    "\1\6\71\12\1\6\4\12\2\6\103\12\2\6\3\0"+
    "\40\6\20\12\20\6\125\12\14\6\u016c\12\2\6\21\12"+
    "\1\6\32\12\5\6\113\12\3\6\3\12\17\6\15\12"+
    "\1\6\4\12\3\0\13\6\22\12\3\0\13\6\22\12"+
    "\2\0\14\6\15\12\1\6\3\12\1\6\2\0\14\6"+
    "\64\12\40\0\3\6\1\12\3\6\2\12\1\0\2\6"+
    "\12\0\41\6\3\0\2\6\12\0\6\6\130\12\10\6"+
    "\51\12\1\0\1\12\5\6\106\12\12\6\35\12\3\6"+
    "\14\0\4\6\14\0\12\6\12\0\36\12\2\6\5\12"+
    "\13\6\54\12\4\6\21\0\7\12\2\0\6\6\12\0"+
    "\46\6\27\12\5\0\4\6\65\12\12\0\1\6\35\0"+
    "\2\6\13\0\6\6\12\0\15\6\1\12\130\6\5\0"+
    "\57\12\21\0\7\12\4\6\12\0\21\6\11\0\14\6"+
    "\3\0\36\12\15\0\2\12\12\0\54\12\16\0\14\6"+
    "\44\12\24\0\10\6\12\0\3\6\3\12\12\0\44\12"+
    "\122\6\3\0\1\6\25\0\4\12\1\0\4\12\3\0"+
    "\2\12\11\6\300\12\47\0\25\6\4\0\26\12\2\6"+
    "\6\12\2\6\46\12\2\6\6\12\2\6\10\12\1\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\37\12\2\6"+
    "\65\12\1\6\7\12\1\6\1\12\3\6\3\12\1\6"+
    "\7\12\3\6\4\12\2\6\6\12\4\6\15\12\5\6"+
    "\3\12\1\6\7\12\16\6\5\0\30\6\2\3\5\0"+
    "\20\6\2\12\23\6\1\12\13\6\5\0\5\6\6\0"+
    "\1\6\1\12\15\6\1\12\20\6\15\12\3\6\33\12"+
    "\25\6\15\0\4\6\1\0\3\6\14\0\21\6\1\12"+
    "\4\6\1\12\2\6\12\12\1\6\1\12\3\6\5\12"+
    "\6\6\1\12\1\6\1\12\1\6\1\12\1\6\4\12"+
    "\1\6\13\12\2\6\4\12\5\6\5\12\4\6\1\12"+
    "\21\6\51\12\u0177\6\57\12\1\6\57\12\1\6\205\12"+
    "\6\6\4\12\3\0\2\12\14\6\46\12\1\6\1\12"+
    "\5\6\1\12\2\6\70\12\7\6\1\12\17\6\1\0"+
    "\27\12\11\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\40\0\57\6\1\12\325\6\3\12\31\6"+
    "\11\12\6\0\1\6\5\12\2\6\5\12\4\6\126\12"+
    "\2\6\2\0\2\6\3\12\1\6\132\12\1\6\4\12"+
    "\5\6\51\12\3\6\136\12\21\6\33\12\65\6\306\12"+
    "\112\6\315\12\63\6\215\12\103\6\56\12\2\6\15\12"+
    "\3\6\20\12\12\0\2\12\24\6\57\12\1\0\4\6"+
    "\12\0\1\6\31\12\7\6\1\0\120\12\2\0\45\6"+
    "\11\12\2\6\147\12\2\6\4\12\1\6\4\12\14\6"+
    "\13\12\115\6\12\12\1\0\3\12\1\0\4\12\1\0"+
    "\27\12\5\0\20\6\1\12\7\6\64\12\14\6\2\0"+
    "\62\12\21\0\13\6\12\0\6\6\22\0\6\12\3\6"+
    "\1\12\4\6\12\0\34\12\10\0\2\6\27\12\15\0"+
    "\14\6\35\12\3\6\4\0\57\12\16\0\16\6\1\12"+
    "\12\0\46\6\51\12\16\0\11\6\3\12\1\0\10\12"+
    "\2\0\2\6\12\0\6\6\27\12\3\6\1\12\1\0"+
    "\4\6\60\12\1\0\1\12\3\0\2\12\2\0\5\12"+
    "\2\0\1\12\1\0\1\12\30\6\3\12\2\6\13\12"+
    "\5\0\2\6\3\12\2\0\12\6\6\12\2\6\6\12"+
    "\2\6\6\12\11\6\7\12\1\6\7\12\221\6\43\12"+
    "\10\0\1\6\2\0\2\6\12\0\6\6\244\12\14\6"+
    "\27\12\4\6\61\12\4\6\u0100\3\156\12\2\6\152\12"+
    "\46\6\7\12\14\6\5\12\5\6\1\12\1\0\12\12"+
    "\1\6\15\12\1\6\5\12\1\6\1\12\1\6\2\12"+
    "\1\6\2\12\1\6\154\12\41\6\153\12\22\6\100\12"+
    "\2\6\66\12\50\6\15\12\3\6\20\0\20\6\7\0"+
    "\14\6\2\12\30\6\3\12\31\6\1\12\6\6\5\12"+
    "\1\6\207\12\2\6\1\0\4\6\1\12\13\6\12\0"+
    "\7\6\32\12\4\6\1\12\1\6\32\12\13\6\131\12"+
    "\3\6\6\12\2\6\6\12\2\6\6\12\2\6\3\12"+
    "\3\6\2\12\3\6\2\12\22\6\3\0\4\6\14\12"+
    "\1\6\32\12\1\6\23\12\1\6\2\12\1\6\17\12"+
    "\2\6\16\12\42\6\173\12\105\6\65\12\210\6\1\0"+
    "\202\6\35\12\3\6\61\12\57\6\37\12\21\6\33\12"+
    "\65\6\36\12\2\6\44\12\4\6\10\12\1\6\5\12"+
    "\52\6\236\12\2\6\12\0\126\6\6\12\2\6\1\12"+
    "\1\6\54\12\1\6\2\12\3\6\1\12\2\6\27\12"+
    "\252\6\26\12\12\6\32\12\106\6\70\12\6\6\2\12"+
    "\100\6\1\12\3\0\1\6\2\0\5\6\4\0\4\12"+
    "\1\6\3\12\1\6\33\12\4\6\3\0\4\6\1\0"+
    "\40\6\35\12\203\6\66\12\12\6\26\12\12\6\23\12"+
    "\215\6\111\12\267\6\3\0\65\12\17\0\37\6\12\0"+
    "\20\6\3\0\55\12\13\0\2\6\1\0\22\6\31\12"+
    "\7\6\12\0\6\6\3\0\44\12\16\0\1\6\12\0"+
    "\100\6\3\0\60\12\16\0\4\12\13\6\12\0\246\6"+
    "\53\12\15\0\10\6\12\0\66\6\157\12\221\6\143\12"+
    "\235\6\57\12\321\6\71\12\307\6\105\12\13\6\1\12"+
    "\56\0\20\6\4\0\15\12\140\6\2\12\u0163\6\5\0"+
    "\3\6\26\0\2\6\7\0\36\6\4\0\224\6\3\0"+
    "\273\6\125\12\1\6\107\12\1\6\2\12\2\6\1\12"+
    "\2\6\2\12\2\6\4\12\1\6\14\12\1\6\1\12"+
    "\1\6\7\12\1\6\101\12\1\6\4\12\2\6\10\12"+
    "\1\6\7\12\1\6\34\12\1\6\4\12\1\6\5\12"+
    "\1\6\1\12\3\6\7\12\1\6\u0154\12\2\6\31\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\10\12\2\6\62\0\4\12\1\6"+
    "\33\12\1\6\2\12\1\6\1\12\2\6\1\12\1\6"+
    "\12\12\1\6\4\12\1\6\1\12\1\6\1\12\6\6"+
    "\1\12\4\6\1\12\1\6\1\12\1\6\1\12\1\6"+
    "\3\12\1\6\2\12\1\6\1\12\2\6\1\12\1\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\1\12\1\6"+
    "\2\12\1\6\1\12\2\6\4\12\1\6\7\12\1\6"+
    "\4\12\1\6\4\12\1\6\1\12\1\6\12\12\1\6"+
    "\21\12\5\6\3\12\1\6\5\12\1\6\21\12\104\6"+
    "\327\12\51\6\65\12\13\6\336\12\343\6\1\0\36\6"+
    "\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21504];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\4\0\1\2\2\3\1\4\1\5\3\4"+
    "\1\6\1\2\1\4\1\7\23\4\1\2\1\10\1\11"+
    "\1\2\15\10\1\12\2\10\15\2\4\13\2\14\2\13"+
    "\1\15\1\2\1\10\1\16\15\10\1\2\2\17\16\2"+
    "\1\1\2\20\15\1\1\14\1\21\5\22\16\14\1\23"+
    "\1\24\5\25\1\2\1\0\1\26\1\27\1\30\1\4"+
    "\1\31\47\4\1\10\2\0\2\10\1\31\26\10\2\0"+
    "\1\31\26\0\1\32\2\10\1\31\26\10\2\0\2\1"+
    "\1\33\2\0\1\31\26\0\2\1\1\31\26\1\1\0"+
    "\1\34\21\4\1\31\23\4\1\35\1\4\2\0\6\10"+
    "\1\31\16\10\6\0\1\31\16\0\6\10\1\31\16\10"+
    "\6\0\1\31\16\0\6\1\1\31\16\1\1\0\3\4"+
    "\1\31\1\36\6\4\1\37\17\4\1\36\6\4\1\31"+
    "\25\10\1\31\25\0\1\31\25\10\1\31\25\0\1\31"+
    "\25\1\1\31\2\4\1\31\26\4\17\10\17\0\17\10"+
    "\17\0\17\1\1\4\2\31\7\4\1\31\2\4\4\10"+
    "\1\31\1\10\4\0\1\31\1\0\4\10\1\31\1\10"+
    "\4\0\1\31\1\0\4\1\1\31\1\1\5\4\4\10"+
    "\4\0\4\10\4\0\4\1\2\4\1\10\1\0\1\10"+
    "\1\0\1\1\2\4\1\10\1\0\1\10\1\0\1\1"+
    "\2\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[820];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02c4\0\u02ff\0\u033a"+
    "\0\u02c4\0\u0375\0\u02c4\0\u03b0\0\u02c4\0\u03eb\0\u0426\0\u0461"+
    "\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639"+
    "\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811"+
    "\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u02c4\0\u0973\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u02c4\0\u0cad\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u02c4\0\u1022\0\u105d\0\u1098"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u0d99\0\u11bf\0\u11fa\0\u02c4"+
    "\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2"+
    "\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u02c4\0\u156f"+
    "\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747"+
    "\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u02c4"+
    "\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u02c4\0\u02c4"+
    "\0\u02c4\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\u1d45\0\u02c4\0\u02c4\0\u1d80\0\u02c4\0\u1dbb"+
    "\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u02c4\0\u02c4\0\u1ee2\0\u1f1d"+
    "\0\u0375\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba"+
    "\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292"+
    "\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a"+
    "\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642"+
    "\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a"+
    "\0\u02c4\0\u2855\0\u2890\0\u28cb\0\u2906\0\u0938\0\u2941\0\u297c"+
    "\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54"+
    "\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c"+
    "\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u02c4\0\u2ec9"+
    "\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1"+
    "\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279"+
    "\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u10d3\0\u33db\0\u3416"+
    "\0\u11fa\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3"+
    "\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b"+
    "\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u1534"+
    "\0\u3963\0\u02c4\0\u399e\0\u3963\0\u39d9\0\u3a14\0\u1534\0\u3a4f"+
    "\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27"+
    "\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff"+
    "\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u18e4"+
    "\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u4174"+
    "\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311\0\u434c"+
    "\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u4524"+
    "\0\u455f\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1\0\u46fc"+
    "\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899\0\u48d4"+
    "\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71\0\u4aac"+
    "\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84"+
    "\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u0375\0\u4de6\0\u4e21"+
    "\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9"+
    "\0\u5034\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1"+
    "\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e\0\u53a9"+
    "\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b\0\u5546\0\u5581"+
    "\0\u55bc\0\u55f7\0\u5632\0\u566d\0\u56a8\0\u56e3\0\u571e\0\u5759"+
    "\0\u5794\0\u57cf\0\u580a\0\u5845\0\u5880\0\u58bb\0\u58f6\0\u5931"+
    "\0\u596c\0\u59a7\0\u59e2\0\u5a1d\0\u5a58\0\u5a93\0\u5ace\0\u5b09"+
    "\0\u5b44\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b\0\u5ca6\0\u5ce1"+
    "\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd\0\u5e08\0\u5e43\0\u5e7e\0\u5eb9"+
    "\0\u5ef4\0\u5f2f\0\u5f6a\0\u5fa5\0\u5fe0\0\u601b\0\u6056\0\u6091"+
    "\0\u60cc\0\u6107\0\u6142\0\u617d\0\u61b8\0\u61f3\0\u622e\0\u6269"+
    "\0\u62a4\0\u62df\0\u631a\0\u6355\0\u6390\0\u63cb\0\u6406\0\u6441"+
    "\0\u647c\0\u64b7\0\u64f2\0\u652d\0\u6568\0\u65a3\0\u65de\0\u6619"+
    "\0\u6654\0\u668f\0\u4524\0\u66ca\0\u6705\0\u6740\0\u677b\0\u67b6"+
    "\0\u67f1\0\u682c\0\u6867\0\u68a2\0\u68dd\0\u6918\0\u02c4\0\u6953"+
    "\0\u698e\0\u69c9\0\u6a04\0\u6a3f\0\u6a7a\0\u6ab5\0\u6af0\0\u6b2b"+
    "\0\u6b66\0\u6ba1\0\u6bdc\0\u6c17\0\u6c52\0\u6c8d\0\u0375\0\u6cc8"+
    "\0\u6d03\0\u6d3e\0\u6d79\0\u6db4\0\u6def\0\u6e2a\0\u6e65\0\u6ea0"+
    "\0\u6edb\0\u6f16\0\u6f51\0\u6f8c\0\u6fc7\0\u7002\0\u703d\0\u7078"+
    "\0\u70b3\0\u70ee\0\u7129\0\u7164\0\u719f\0\u71da\0\u7215\0\u7250"+
    "\0\u728b\0\u72c6\0\u7301\0\u733c\0\u7377\0\u73b2\0\u73ed\0\u7428"+
    "\0\u7463\0\u749e\0\u74d9\0\u7514\0\u754f\0\u758a\0\u75c5\0\u7600"+
    "\0\u763b\0\u7676\0\u76b1\0\u76ec\0\u7727\0\u7762\0\u779d\0\u77d8"+
    "\0\u7813\0\u784e\0\u7889\0\u78c4\0\u78ff\0\u793a\0\u7975\0\u79b0"+
    "\0\u79eb\0\u7a26\0\u7a61\0\u7a9c\0\u7ad7\0\u7b12\0\u7b4d\0\u7b88"+
    "\0\u7bc3\0\u7bfe\0\u7c39\0\u7c74\0\u7caf\0\u7cea\0\u7d25\0\u7d60"+
    "\0\u7d9b\0\u7dd6\0\u7e11\0\u7e4c\0\u7e87\0\u7ec2\0\u7efd\0\u7f38"+
    "\0\u7f73\0\u7fae\0\u7fe9\0\u8024\0\u805f\0\u809a\0\u80d5\0\u8110"+
    "\0\u814b\0\u8186\0\u81c1\0\u81fc\0\u8237\0\u8272\0\u82ad\0\u82e8"+
    "\0\u8323\0\u835e\0\u8399\0\u83d4\0\u840f\0\u844a\0\u8485\0\u84c0"+
    "\0\u84fb\0\u8536\0\u8571\0\u85ac\0\u85e7\0\u8622\0\u865d\0\u8698"+
    "\0\u86d3\0\u870e\0\u8749\0\u8784\0\u87bf\0\u87fa\0\u8835\0\u8870"+
    "\0\u88ab\0\u88e6\0\u8921\0\u895c\0\u8997\0\u89d2\0\u8a0d\0\u8a48"+
    "\0\u8a83\0\u8abe\0\u8af9\0\u8b34\0\u8b6f\0\u8baa\0\u8be5\0\u8c20"+
    "\0\u8c5b\0\u8c96\0\u8cd1\0\u8d0c\0\u8d47\0\u8d82\0\u8dbd\0\u8df8"+
    "\0\u8e33\0\u8e6e\0\u8ea9\0\u8ee4\0\u8f1f\0\u8f5a\0\u8f95\0\u8fd0"+
    "\0\u900b\0\u9046\0\u9081\0\u90bc\0\u90f7\0\u9132\0\u916d\0\u91a8"+
    "\0\u91e3\0\u921e\0\u9259\0\u9294\0\u92cf\0\u930a\0\u9345\0\u9380"+
    "\0\u93bb\0\u93f6\0\u9431\0\u946c\0\u94a7\0\u94e2\0\u951d\0\u9558"+
    "\0\u9593\0\u95ce\0\u9609\0\u9644\0\u967f\0\u96ba\0\u96f5\0\u9730"+
    "\0\u976b\0\u97a6\0\u97e1\0\u981c\0\u9857\0\u9892\0\u98cd\0\u9908"+
    "\0\u9943\0\u997e\0\u99b9\0\u99f4\0\u9a2f\0\u9a6a\0\u9aa5\0\u9ae0"+
    "\0\u9b1b\0\u9b56\0\u9b91\0\u9bcc\0\u9c07\0\u9c42\0\u9c7d\0\u9cb8"+
    "\0\u9cf3\0\u9d2e\0\u9d69\0\u9da4\0\u9ddf\0\u9e1a\0\u9e55\0\u9e90"+
    "\0\u9ecb\0\u9f06\0\u9f41\0\u9f7c\0\u9fb7\0\u9ff2\0\ua02d\0\ua068"+
    "\0\ua0a3\0\ua0de\0\u4c84\0\ua119\0\ua154\0\ua18f\0\ua1ca\0\ua205"+
    "\0\ua240\0\u5247\0\ua27b\0\ua2b6\0\ua2f1\0\ua32c\0\ua367\0\u571e"+
    "\0\ua3a2\0\ua3dd\0\ua418\0\ua453\0\ua48e\0\u5bf5\0\ua4c9\0\ua504"+
    "\0\ua53f\0\ua57a\0\ua5b5\0\u60cc\0\ua5f0\0\ua62b\0\ua666\0\ua6a1"+
    "\0\ua6dc\0\u65a3\0\ua717\0\ua752\0\ua78d\0\ua7c8\0\ua803\0\ua83e"+
    "\0\ua879\0\ua8b4\0\ua8ef\0\ua92a\0\ua965\0\ua9a0\0\ua9db\0\uaa16"+
    "\0\uaa51\0\uaa8c\0\uaac7\0\uab02\0\uab3d\0\uab78\0\uabb3\0\uabee"+
    "\0\uac29\0\uac64\0\uac9f\0\uacda\0\uad15\0\uad50\0\uad8b\0\uadc6"+
    "\0\uae01\0\uae3c\0\uae77\0\uaeb2\0\uaeed\0\uaf28\0\uaf63\0\uaf9e"+
    "\0\uafd9\0\ub014\0\ub04f\0\ub08a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[820];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\2\16\1\15\1\16\1\17\1\15\1\16\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\2\20\1\26\1\27"+
    "\11\30\1\31\1\20\1\32\2\22\1\15\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\22\1\41\1\42\2\22"+
    "\1\43\2\22\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\22\1\53\1\22\1\54\1\15\11\55\1\56"+
    "\26\55\1\57\2\55\1\60\1\61\1\62\1\63\2\55"+
    "\1\64\2\55\1\65\2\55\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\5\55\11\15\1\75\10\15\11\76"+
    "\3\15\1\77\4\15\1\100\1\101\1\102\1\103\2\15"+
    "\1\104\2\15\1\105\2\15\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\6\15\2\115\1\15\1\115\1\116"+
    "\1\15\1\115\1\117\2\15\1\115\1\120\1\15\2\117"+
    "\1\121\1\117\11\122\1\123\1\117\1\124\5\15\1\100"+
    "\1\101\1\125\1\103\2\15\1\104\2\15\1\105\2\15"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\3\15"+
    "\1\126\2\15\2\115\1\15\1\115\1\116\1\15\1\115"+
    "\1\117\2\15\1\115\1\120\1\15\2\117\1\15\1\117"+
    "\11\122\1\123\1\117\1\124\5\15\1\100\1\101\1\102"+
    "\1\103\2\15\1\104\2\15\1\105\2\15\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\3\15\1\126\1\15"+
    "\2\127\1\15\2\127\1\15\3\127\1\15\3\127\1\130"+
    "\22\127\1\15\2\127\1\131\1\132\1\133\1\134\2\127"+
    "\1\135\2\127\1\136\2\127\1\137\1\140\1\141\1\142"+
    "\1\143\1\144\1\145\5\127\2\146\1\147\2\146\1\150"+
    "\10\146\1\151\24\146\1\152\1\153\1\154\1\155\2\146"+
    "\1\156\2\146\1\157\2\146\1\160\1\161\1\162\1\163"+
    "\1\164\1\165\1\166\5\146\2\167\1\170\2\15\1\171"+
    "\35\167\1\172\1\173\1\174\1\175\2\167\1\176\2\167"+
    "\1\177\2\167\1\200\1\201\1\202\1\203\1\204\1\205"+
    "\1\206\4\167\1\15\2\207\1\210\4\207\1\211\1\212"+
    "\2\207\1\211\1\213\1\207\2\212\1\207\1\212\11\207"+
    "\1\214\1\212\1\215\5\207\1\216\1\217\1\220\1\221"+
    "\2\207\1\222\2\207\1\223\2\207\1\224\1\225\1\226"+
    "\1\227\1\230\1\231\1\232\3\207\1\233\3\207\1\234"+
    "\40\207\1\216\1\217\1\220\1\221\2\207\1\222\2\207"+
    "\1\223\2\207\1\224\1\225\1\226\1\227\1\230\1\231"+
    "\1\232\7\207\1\235\40\207\1\216\1\217\1\220\1\221"+
    "\2\207\1\222\2\207\1\223\2\207\1\224\1\225\1\226"+
    "\1\227\1\230\1\231\1\232\5\207\10\15\1\236\2\15"+
    "\1\237\1\240\1\15\2\236\1\15\1\236\11\15\1\241"+
    "\1\236\1\242\5\15\1\100\1\101\1\102\1\103\2\15"+
    "\1\104\2\15\1\105\2\15\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\3\15\1\243\1\15\75\0\1\16"+
    "\124\0\1\23\36\0\1\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\30\22\1\0\1\22\14\0\1\23"+
    "\76\0\1\244\1\0\11\30\56\0\1\245\2\0\1\246"+
    "\12\0\1\23\50\0\1\247\7\0\11\30\3\0\2\247"+
    "\1\0\30\247\35\0\2\23\72\0\2\23\35\0\1\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\3\22"+
    "\1\250\14\22\1\251\7\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\1\252\14\22\1\253"+
    "\1\22\1\254\6\22\1\255\1\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\1\256\14\22"+
    "\1\257\12\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\1\260\3\22\1\261\10\22\1\251"+
    "\12\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\12\22\1\262\1\22\1\263\4\22\1\264"+
    "\6\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\1\265\7\22\1\266\4\22\1\267\1\22"+
    "\1\270\2\22\1\271\5\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\4\22\1\272\10\22"+
    "\1\273\12\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\5\22\1\251\5\22\1\274\1\275"+
    "\13\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\1\276\7\22\1\277\4\22\1\300\12\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\1\301\16\22\1\302\2\22\1\303\5\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\4\22\1\304\23\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\4\22\1\305\10\22\1\306"+
    "\3\22\1\307\5\22\1\310\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\7\22\1\311\7\22"+
    "\1\312\10\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\5\22\1\313\2\22\1\314\17\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\1\267\7\22\1\315\17\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\4\22\1\316"+
    "\2\22\1\317\20\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\4\22\1\320\23\22\1\0"+
    "\1\22\71\0\1\23\1\0\11\55\1\0\26\55\1\0"+
    "\32\55\55\0\1\321\5\0\1\322\2\0\1\323\4\0"+
    "\11\55\1\0\26\55\1\0\15\55\1\324\25\55\1\0"+
    "\26\55\1\0\4\55\1\325\10\55\1\326\25\55\1\0"+
    "\26\55\1\0\12\55\1\327\1\55\1\330\26\55\1\0"+
    "\26\55\1\0\1\331\14\55\1\332\1\55\1\333\2\55"+
    "\1\334\20\55\1\0\26\55\1\0\5\55\1\326\5\55"+
    "\1\335\1\336\26\55\1\0\26\55\1\0\1\337\14\55"+
    "\1\340\25\55\1\0\26\55\1\0\1\341\16\55\1\342"+
    "\2\55\1\343\20\55\1\0\26\55\1\0\4\55\1\344"+
    "\36\55\1\0\26\55\1\0\15\55\1\345\3\55\1\346"+
    "\21\55\1\0\26\55\1\0\7\55\1\347\7\55\1\350"+
    "\23\55\1\0\26\55\1\0\5\55\1\351\2\55\1\352"+
    "\32\55\1\0\26\55\1\0\1\332\7\55\1\353\32\55"+
    "\1\0\26\55\1\0\7\55\1\354\22\55\22\0\11\76"+
    "\76\0\1\77\112\0\1\355\61\0\1\356\10\0\1\357"+
    "\67\0\1\360\1\0\1\361\56\0\1\362\14\0\1\363"+
    "\1\0\1\364\2\0\1\365\55\0\1\357\5\0\1\366"+
    "\1\367\56\0\1\370\14\0\1\371\55\0\1\372\16\0"+
    "\1\373\2\0\1\374\54\0\1\375\103\0\1\376\3\0"+
    "\1\377\60\0\1\u0100\7\0\1\u0101\60\0\1\u0102\2\0"+
    "\1\u0103\62\0\1\363\7\0\1\u0104\71\0\1\u0105\24\0"+
    "\1\115\124\0\1\115\52\0\1\115\76\0\1\u0106\74\0"+
    "\11\122\73\0\2\115\72\0\2\115\126\0\1\115\1\0"+
    "\2\127\1\0\2\127\1\0\3\127\1\0\3\127\1\0"+
    "\22\127\1\0\34\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\15\127\1\u0107\16\127\1\0"+
    "\2\127\1\0\3\127\1\0\3\127\1\0\22\127\1\0"+
    "\4\127\1\u0108\10\127\1\u0109\16\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\22\127\1\0\12\127\1\u010a"+
    "\1\127\1\u010b\17\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\1\u010c\14\127\1\u010d\1\127"+
    "\1\u010e\2\127\1\u010f\11\127\1\0\2\127\1\0\3\127"+
    "\1\0\3\127\1\0\22\127\1\0\5\127\1\u0109\5\127"+
    "\1\u0110\1\u0111\17\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\1\u0112\14\127\1\u0113\16\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\1\u0114\16\127\1\u0115\2\127\1\u0116\11\127\1\0"+
    "\2\127\1\0\3\127\1\0\3\127\1\0\22\127\1\0"+
    "\4\127\1\u0117\27\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\15\127\1\u0118\3\127\1\u0119"+
    "\12\127\1\0\2\127\1\0\3\127\1\0\3\127\1\0"+
    "\22\127\1\0\7\127\1\u011a\7\127\1\u011b\14\127\1\0"+
    "\2\127\1\0\3\127\1\0\3\127\1\0\22\127\1\0"+
    "\5\127\1\u011c\2\127\1\u011d\23\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\22\127\1\0\1\u010d\7\127"+
    "\1\u011e\23\127\1\0\2\127\1\0\3\127\1\0\3\127"+
    "\1\0\22\127\1\0\7\127\1\u011f\22\127\2\u0120\1\147"+
    "\2\u0120\1\150\65\u0120\2\0\1\147\70\0\2\u0121\1\u0122"+
    "\2\u0121\1\u0123\13\u0121\1\u0124\51\u0121\2\u0120\1\147\2\u0120"+
    "\1\150\50\u0120\1\u0125\16\u0120\1\147\2\u0120\1\150\37\u0120"+
    "\1\u0126\10\u0120\1\u0127\16\u0120\1\147\2\u0120\1\150\45\u0120"+
    "\1\u0128\1\u0120\1\u0129\17\u0120\1\147\2\u0120\1\150\33\u0120"+
    "\1\u012a\14\u0120\1\u012b\1\u0120\1\u012c\2\u0120\1\u012d\11\u0120"+
    "\1\147\2\u0120\1\150\40\u0120\1\u0127\5\u0120\1\u012e\1\u012f"+
    "\17\u0120\1\147\2\u0120\1\150\33\u0120\1\u0130\14\u0120\1\u0131"+
    "\16\u0120\1\147\2\u0120\1\150\33\u0120\1\u0132\16\u0120\1\u0133"+
    "\2\u0120\1\u0134\11\u0120\1\147\2\u0120\1\150\37\u0120\1\u0135"+
    "\27\u0120\1\147\2\u0120\1\150\50\u0120\1\u0136\3\u0120\1\u0137"+
    "\12\u0120\1\147\2\u0120\1\150\42\u0120\1\u0138\7\u0120\1\u0139"+
    "\14\u0120\1\147\2\u0120\1\150\40\u0120\1\u013a\2\u0120\1\u013b"+
    "\23\u0120\1\147\2\u0120\1\150\33\u0120\1\u012b\7\u0120\1\u013c"+
    "\23\u0120\1\147\2\u0120\1\150\42\u0120\1\u013d\22\u0120\2\167"+
    "\4\0\64\167\3\0\1\170\70\0\2\167\4\0\50\167"+
    "\1\u013e\13\167\1\0\2\167\4\0\37\167\1\u013f\10\167"+
    "\1\u0140\13\167\1\0\2\167\4\0\45\167\1\u0141\1\167"+
    "\1\u0142\14\167\1\0\2\167\4\0\33\167\1\u0143\14\167"+
    "\1\u0144\1\167\1\u0145\2\167\1\u0146\6\167\1\0\2\167"+
    "\4\0\40\167\1\u0140\5\167\1\u0147\1\u0148\14\167\1\0"+
    "\2\167\4\0\33\167\1\u0149\14\167\1\u014a\13\167\1\0"+
    "\2\167\4\0\33\167\1\u014b\16\167\1\u014c\2\167\1\u014d"+
    "\6\167\1\0\2\167\4\0\37\167\1\u014e\24\167\1\0"+
    "\2\167\4\0\50\167\1\u014f\3\167\1\u0150\7\167\1\0"+
    "\2\167\4\0\42\167\1\u0151\7\167\1\u0152\11\167\1\0"+
    "\2\167\4\0\40\167\1\u0153\2\167\1\u0154\20\167\1\0"+
    "\2\167\4\0\33\167\1\u0144\7\167\1\u0155\20\167\1\0"+
    "\2\167\4\0\42\167\1\u0156\21\167\35\0\1\211\52\0"+
    "\1\211\111\0\2\211\72\0\2\211\126\0\1\211\35\0"+
    "\1\237\52\0\1\237\111\0\2\237\72\0\2\237\126\0"+
    "\1\237\20\0\1\u0157\1\244\1\0\11\u0158\40\0\1\247"+
    "\11\0\1\247\7\0\11\247\3\0\2\247\1\0\30\247"+
    "\1\0\1\247\1\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\3\22\1\u0159\24\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\12\22\1\u015a"+
    "\15\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\15\22\1\u015b\12\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\4\22\1\u015c"+
    "\23\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\21\22\1\u015d\6\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\12\22\1\u015e"+
    "\15\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\14\22\1\u015f\13\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\26\22\1\u0160"+
    "\1\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\12\22\1\u0161\15\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\20\22\1\u0162"+
    "\7\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\22\22\1\u0163\5\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\7\22\1\u0164"+
    "\20\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\12\22\1\262\15\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\14\22\1\u0165"+
    "\13\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\17\22\1\251\10\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\15\22\1\u0163"+
    "\12\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\14\22\1\u0166\13\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\25\22\1\u0167"+
    "\2\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\22\22\1\u0168\5\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\16\22\1\u0169"+
    "\11\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\21\22\1\u016a\6\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\16\22\1\u016b"+
    "\11\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\14\22\1\u016c\13\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\3\22\1\u016d"+
    "\24\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\26\22\1\u016e\1\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\1\u016f\7\22"+
    "\1\u0170\17\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\1\22\1\u0171\26\22\1\0\2\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\21\22"+
    "\1\u0172\6\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\2\22\1\u0173\11\22\1\u0174\13\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\12\22\1\u0175\15\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\17\22\1\u0176\10\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\1\u0177\27\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\10\22\1\u0178\17\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\1\u0179\21\22\1\u0162\5\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\10\22\1\u017a\17\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\14\22\1\u017b\13\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\4\22\1\u017c\23\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\4\22\1\u017d\3\22\1\u017e\17\22\1\0\2\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\10\22"+
    "\1\u017f\17\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\1\u0168\27\22\1\0\1\22\37\0"+
    "\1\u0180\72\0\1\u0181\33\0\11\55\1\0\26\55\1\0"+
    "\14\55\1\u0182\26\55\1\0\26\55\1\0\12\55\1\u0183"+
    "\30\55\1\0\26\55\1\0\20\55\1\u0184\22\55\1\0"+
    "\26\55\1\0\22\55\1\u0185\20\55\1\0\26\55\1\0"+
    "\12\55\1\327\30\55\1\0\26\55\1\0\17\55\1\326"+
    "\23\55\1\0\26\55\1\0\15\55\1\u0185\25\55\1\0"+
    "\26\55\1\0\14\55\1\u0186\26\55\1\0\26\55\1\0"+
    "\16\55\1\u0187\24\55\1\0\26\55\1\0\21\55\1\u0188"+
    "\21\55\1\0\26\55\1\0\16\55\1\u0189\24\55\1\0"+
    "\26\55\1\0\3\55\1\u018a\37\55\1\0\26\55\1\0"+
    "\26\55\1\u018b\14\55\1\0\26\55\1\0\1\u018c\7\55"+
    "\1\u018d\32\55\1\0\26\55\1\0\1\55\1\u018e\41\55"+
    "\1\0\26\55\1\0\21\55\1\u018f\21\55\1\0\26\55"+
    "\1\0\12\55\1\u0190\30\55\1\0\26\55\1\0\17\55"+
    "\1\u0191\23\55\1\0\26\55\1\0\10\55\1\u0192\32\55"+
    "\1\0\26\55\1\0\22\55\1\u0184\20\55\1\0\26\55"+
    "\1\0\10\55\1\u0193\32\55\1\0\26\55\1\0\14\55"+
    "\1\u0194\26\55\1\0\26\55\1\0\4\55\1\u0195\36\55"+
    "\1\0\26\55\1\0\10\55\1\u0196\21\55\55\0\1\u0197"+
    "\70\0\1\u0198\100\0\1\u0199\74\0\1\u019a\62\0\1\360"+
    "\77\0\1\357\70\0\1\u019a\71\0\1\u019b\74\0\1\u019c"+
    "\75\0\1\u019d\67\0\1\u019e\57\0\1\u019f\115\0\1\u01a0"+
    "\44\0\1\u01a1\7\0\1\u01a2\63\0\1\u01a3\112\0\1\u01a4"+
    "\63\0\1\u01a5\77\0\1\u01a6\63\0\1\u01a7\104\0\1\u0199"+
    "\60\0\1\u01a8\76\0\1\u01a9\62\0\1\u01aa\76\0\1\u01ab"+
    "\21\0\2\127\1\0\2\127\1\0\3\127\1\0\3\127"+
    "\1\0\22\127\1\0\14\127\1\u01ac\17\127\1\0\2\127"+
    "\1\0\3\127\1\0\3\127\1\0\22\127\1\0\12\127"+
    "\1\u01ad\21\127\1\0\2\127\1\0\3\127\1\0\3\127"+
    "\1\0\22\127\1\0\20\127\1\u01ae\13\127\1\0\2\127"+
    "\1\0\3\127\1\0\3\127\1\0\22\127\1\0\22\127"+
    "\1\u01af\11\127\1\0\2\127\1\0\3\127\1\0\3\127"+
    "\1\0\22\127\1\0\12\127\1\u010a\21\127\1\0\2\127"+
    "\1\0\3\127\1\0\3\127\1\0\22\127\1\0\17\127"+
    "\1\u0109\14\127\1\0\2\127\1\0\3\127\1\0\3\127"+
    "\1\0\22\127\1\0\15\127\1\u01af\16\127\1\0\2\127"+
    "\1\0\3\127\1\0\3\127\1\0\22\127\1\0\14\127"+
    "\1\u01b0\17\127\1\0\2\127\1\0\3\127\1\0\3\127"+
    "\1\0\22\127\1\0\16\127\1\u01b1\15\127\1\0\2\127"+
    "\1\0\3\127\1\0\3\127\1\0\22\127\1\0\21\127"+
    "\1\u01b2\12\127\1\0\2\127\1\0\3\127\1\0\3\127"+
    "\1\0\22\127\1\0\16\127\1\u01b3\15\127\1\0\2\127"+
    "\1\0\3\127\1\0\3\127\1\0\22\127\1\0\3\127"+
    "\1\u01b4\30\127\1\0\2\127\1\0\3\127\1\0\3\127"+
    "\1\0\22\127\1\0\26\127\1\u01b5\5\127\1\0\2\127"+
    "\1\0\3\127\1\0\3\127\1\0\22\127\1\0\1\u01b6"+
    "\7\127\1\u01b7\23\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\1\127\1\u01b8\32\127\1\0"+
    "\2\127\1\0\3\127\1\0\3\127\1\0\22\127\1\0"+
    "\21\127\1\u01b9\12\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\12\127\1\u01ba\21\127\1\0"+
    "\2\127\1\0\3\127\1\0\3\127\1\0\22\127\1\0"+
    "\17\127\1\u01bb\14\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\10\127\1\u01bc\23\127\1\0"+
    "\2\127\1\0\3\127\1\0\3\127\1\0\22\127\1\0"+
    "\22\127\1\u01ae\11\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\10\127\1\u01bd\23\127\1\0"+
    "\2\127\1\0\3\127\1\0\3\127\1\0\22\127\1\0"+
    "\14\127\1\u01be\17\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\4\127\1\u01bf\27\127\1\0"+
    "\2\127\1\0\3\127\1\0\3\127\1\0\22\127\1\0"+
    "\10\127\1\u01c0\21\127\2\u0121\1\u0122\2\u0121\1\u0123\65\u0121"+
    "\2\0\1\u0122\70\0\2\u0120\1\147\2\u0120\1\150\47\u0120"+
    "\1\u01c1\17\u0120\1\147\2\u0120\1\150\45\u0120\1\u01c2\21\u0120"+
    "\1\147\2\u0120\1\150\53\u0120\1\u01c3\13\u0120\1\147\2\u0120"+
    "\1\150\55\u0120\1\u01c4\11\u0120\1\147\2\u0120\1\150\45\u0120"+
    "\1\u0128\21\u0120\1\147\2\u0120\1\150\52\u0120\1\u0127\14\u0120"+
    "\1\147\2\u0120\1\150\50\u0120\1\u01c4\16\u0120\1\147\2\u0120"+
    "\1\150\47\u0120\1\u01c5\17\u0120\1\147\2\u0120\1\150\51\u0120"+
    "\1\u01c6\15\u0120\1\147\2\u0120\1\150\54\u0120\1\u01c7\12\u0120"+
    "\1\147\2\u0120\1\150\51\u0120\1\u01c8\15\u0120\1\147\2\u0120"+
    "\1\150\36\u0120\1\u01c9\30\u0120\1\147\2\u0120\1\150\61\u0120"+
    "\1\u01ca\5\u0120\1\147\2\u0120\1\150\33\u0120\1\u01cb\7\u0120"+
    "\1\u01cc\23\u0120\1\147\2\u0120\1\150\34\u0120\1\u01cd\32\u0120"+
    "\1\147\2\u0120\1\150\54\u0120\1\u01ce\12\u0120\1\147\2\u0120"+
    "\1\150\45\u0120\1\u01cf\21\u0120\1\147\2\u0120\1\150\52\u0120"+
    "\1\u01d0\14\u0120\1\147\2\u0120\1\150\43\u0120\1\u01d1\23\u0120"+
    "\1\147\2\u0120\1\150\55\u0120\1\u01c3\11\u0120\1\147\2\u0120"+
    "\1\150\43\u0120\1\u01d2\23\u0120\1\147\2\u0120\1\150\47\u0120"+
    "\1\u01d3\17\u0120\1\147\2\u0120\1\150\37\u0120\1\u01d4\27\u0120"+
    "\1\147\2\u0120\1\150\43\u0120\1\u01d5\21\u0120\2\167\4\0"+
    "\47\167\1\u01d6\14\167\1\0\2\167\4\0\45\167\1\u01d7"+
    "\16\167\1\0\2\167\4\0\53\167\1\u01d8\10\167\1\0"+
    "\2\167\4\0\55\167\1\u01d9\6\167\1\0\2\167\4\0"+
    "\45\167\1\u0141\16\167\1\0\2\167\4\0\52\167\1\u0140"+
    "\11\167\1\0\2\167\4\0\50\167\1\u01d9\13\167\1\0"+
    "\2\167\4\0\47\167\1\u01da\14\167\1\0\2\167\4\0"+
    "\51\167\1\u01db\12\167\1\0\2\167\4\0\54\167\1\u01dc"+
    "\7\167\1\0\2\167\4\0\51\167\1\u01dd\12\167\1\0"+
    "\2\167\4\0\36\167\1\u01de\25\167\1\0\2\167\4\0"+
    "\61\167\1\u01df\2\167\1\0\2\167\4\0\33\167\1\u01e0"+
    "\7\167\1\u01e1\20\167\1\0\2\167\4\0\34\167\1\u01e2"+
    "\27\167\1\0\2\167\4\0\54\167\1\u01e3\7\167\1\0"+
    "\2\167\4\0\45\167\1\u01e4\16\167\1\0\2\167\4\0"+
    "\52\167\1\u01e5\11\167\1\0\2\167\4\0\43\167\1\u01e6"+
    "\20\167\1\0\2\167\4\0\55\167\1\u01d8\6\167\1\0"+
    "\2\167\4\0\43\167\1\u01e7\20\167\1\0\2\167\4\0"+
    "\47\167\1\u01e8\14\167\1\0\2\167\4\0\37\167\1\u01e9"+
    "\24\167\1\0\2\167\4\0\43\167\1\u01ea\20\167\20\0"+
    "\1\u0157\1\u01eb\1\0\11\u0158\62\0\11\u0158\40\0\1\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\17\22"+
    "\1\u01ec\10\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\1\u01ed\27\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\12\22\1\251"+
    "\15\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\1\u01ee\27\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\4\22\1\u01ef\23\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\12\22\1\u01f0\15\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\20\22\1\u01f1\1\u01f2"+
    "\6\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\20\22\1\u017e\7\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\4\22\1\u01f3"+
    "\23\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\4\22\1\251\23\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\13\22\1\251"+
    "\14\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\4\22\1\u01f4\23\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\14\22\1\u01f5"+
    "\13\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\2\22\1\u01f6\25\22\1\0\2\22\10\0"+
    "\1\u01f7\1\22\7\0\11\22\3\0\2\22\1\0\30\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\17\22\1\u0160\10\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\15\22\1\u01f8\12\22"+
    "\1\0\2\22\11\0\1\22\7\0\1\22\1\u01f9\1\u01fa"+
    "\1\u01fb\2\22\1\u01fc\1\22\1\251\3\0\2\22\1\0"+
    "\4\22\1\u01fd\23\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\16\22\1\u01fe\11\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\22\22\1\u01ff\5\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\10\22\1\u0200\17\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\1\u0201\27\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\6\22\1\u0202\21\22\1\0\2\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\23\22"+
    "\1\u0203\4\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\12\22\1\u0204\15\22\1\0\2\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\22\22"+
    "\1\u0205\5\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\15\22\1\u0206\12\22\1\0\2\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\3\22"+
    "\1\u0207\24\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\10\22\1\u0208\17\22\1\0\2\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\10\22"+
    "\1\u0209\11\22\1\u020a\5\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\1\22\1\u020b\26\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\20\22\1\251\7\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\14\22\1\u020c\13\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\25\22\1\u020d\2\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\21\22\1\u020e\6\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\24\22\1\251\3\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\11\22\1\u0160\16\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\12\22\1\u0162\15\22\1\0\1\22\37\0\1\323"+
    "\72\0\1\321\33\0\11\55\1\0\26\55\1\0\20\55"+
    "\1\u020f\1\u0210\21\55\1\0\26\55\1\0\4\55\1\u0211"+
    "\36\55\1\0\26\55\1\0\4\55\1\326\36\55\1\0"+
    "\26\55\1\0\13\55\1\326\27\55\1\0\26\55\1\0"+
    "\2\55\1\u0212\40\55\1\0\26\55\1\0\15\55\1\u0213"+
    "\25\55\1\0\11\55\1\u0214\1\u0215\1\u0216\2\55\1\u0217"+
    "\1\55\1\326\5\55\1\0\4\55\1\u0218\36\55\1\0"+
    "\26\55\1\0\16\55\1\u0219\24\55\1\0\26\55\1\0"+
    "\10\55\1\u021a\32\55\1\0\26\55\1\0\1\u021b\42\55"+
    "\1\0\26\55\1\0\6\55\1\u021c\34\55\1\0\26\55"+
    "\1\0\23\55\1\u021d\17\55\1\0\26\55\1\0\12\55"+
    "\1\u021e\30\55\1\0\26\55\1\0\22\55\1\u021f\20\55"+
    "\1\0\26\55\1\0\10\55\1\u0220\32\55\1\0\26\55"+
    "\1\0\10\55\1\u0221\11\55\1\u0222\20\55\1\0\26\55"+
    "\1\0\20\55\1\326\22\55\1\0\26\55\1\0\25\55"+
    "\1\u0223\15\55\1\0\26\55\1\0\21\55\1\u0224\21\55"+
    "\1\0\26\55\1\0\24\55\1\326\16\55\1\0\26\55"+
    "\1\0\12\55\1\u0184\17\55\61\0\1\u0225\1\u0226\55\0"+
    "\1\u0227\72\0\1\357\101\0\1\357\61\0\1\u0228\105\0"+
    "\1\u0229\37\0\1\u022a\1\u022b\1\u022c\2\0\1\u022d\1\0"+
    "\1\357\12\0\1\u022e\104\0\1\u022f\64\0\1\u0230\62\0"+
    "\1\u0231\100\0\1\u0232\107\0\1\u0233\61\0\1\u0234\102\0"+
    "\1\u0235\60\0\1\u0236\72\0\1\u0237\11\0\1\u0238\70\0"+
    "\1\357\77\0\1\u0239\66\0\1\u023a\75\0\1\357\60\0"+
    "\1\u0199\17\0\2\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\20\127\1\u023b\1\u023c\12\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\4\127\1\u023d\27\127\1\0\2\127\1\0\3\127"+
    "\1\0\3\127\1\0\22\127\1\0\4\127\1\u0109\27\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\13\127\1\u0109\20\127\1\0\2\127\1\0\3\127"+
    "\1\0\3\127\1\0\22\127\1\0\2\127\1\u023e\31\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\15\127\1\u023f\16\127\1\0\2\127\1\0\3\127"+
    "\1\0\3\127\1\0\5\127\1\u0240\1\u0241\1\u0242\2\127"+
    "\1\u0243\1\127\1\u0109\5\127\1\0\4\127\1\u0244\27\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\16\127\1\u0245\15\127\1\0\2\127\1\0\3\127"+
    "\1\0\3\127\1\0\22\127\1\0\10\127\1\u0246\23\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\1\u0247\33\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\6\127\1\u0248\25\127\1\0"+
    "\2\127\1\0\3\127\1\0\3\127\1\0\22\127\1\0"+
    "\23\127\1\u0249\10\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\12\127\1\u024a\21\127\1\0"+
    "\2\127\1\0\3\127\1\0\3\127\1\0\22\127\1\0"+
    "\22\127\1\u024b\11\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\10\127\1\u024c\23\127\1\0"+
    "\2\127\1\0\3\127\1\0\3\127\1\0\22\127\1\0"+
    "\10\127\1\u024d\11\127\1\u024e\11\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\22\127\1\0\20\127\1\u0109"+
    "\13\127\1\0\2\127\1\0\3\127\1\0\3\127\1\0"+
    "\22\127\1\0\25\127\1\u024f\6\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\22\127\1\0\21\127\1\u0250"+
    "\12\127\1\0\2\127\1\0\3\127\1\0\3\127\1\0"+
    "\22\127\1\0\24\127\1\u0109\7\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\22\127\1\0\12\127\1\u01ae"+
    "\17\127\2\u0120\1\147\2\u0120\1\150\53\u0120\1\u0251\1\u0252"+
    "\12\u0120\1\147\2\u0120\1\150\37\u0120\1\u0253\27\u0120\1\147"+
    "\2\u0120\1\150\37\u0120\1\u0127\27\u0120\1\147\2\u0120\1\150"+
    "\46\u0120\1\u0127\20\u0120\1\147\2\u0120\1\150\35\u0120\1\u0254"+
    "\31\u0120\1\147\2\u0120\1\150\50\u0120\1\u0255\16\u0120\1\147"+
    "\2\u0120\1\150\15\u0120\1\u0256\1\u0257\1\u0258\2\u0120\1\u0259"+
    "\1\u0120\1\u0127\12\u0120\1\u025a\27\u0120\1\147\2\u0120\1\150"+
    "\51\u0120\1\u025b\15\u0120\1\147\2\u0120\1\150\43\u0120\1\u025c"+
    "\23\u0120\1\147\2\u0120\1\150\33\u0120\1\u025d\33\u0120\1\147"+
    "\2\u0120\1\150\41\u0120\1\u025e\25\u0120\1\147\2\u0120\1\150"+
    "\56\u0120\1\u025f\10\u0120\1\147\2\u0120\1\150\45\u0120\1\u0260"+
    "\21\u0120\1\147\2\u0120\1\150\55\u0120\1\u0261\11\u0120\1\147"+
    "\2\u0120\1\150\43\u0120\1\u0262\23\u0120\1\147\2\u0120\1\150"+
    "\43\u0120\1\u0263\11\u0120\1\u0264\11\u0120\1\147\2\u0120\1\150"+
    "\53\u0120\1\u0127\13\u0120\1\147\2\u0120\1\150\60\u0120\1\u0265"+
    "\6\u0120\1\147\2\u0120\1\150\54\u0120\1\u0266\12\u0120\1\147"+
    "\2\u0120\1\150\57\u0120\1\u0127\7\u0120\1\147\2\u0120\1\150"+
    "\45\u0120\1\u01c3\17\u0120\2\167\4\0\53\167\1\u0267\1\u0268"+
    "\7\167\1\0\2\167\4\0\37\167\1\u0269\24\167\1\0"+
    "\2\167\4\0\37\167\1\u0140\24\167\1\0\2\167\4\0"+
    "\46\167\1\u0140\15\167\1\0\2\167\4\0\35\167\1\u026a"+
    "\26\167\1\0\2\167\4\0\50\167\1\u026b\13\167\1\0"+
    "\2\167\4\0\15\167\1\u026c\1\u026d\1\u026e\2\167\1\u026f"+
    "\1\167\1\u0140\12\167\1\u0270\24\167\1\0\2\167\4\0"+
    "\51\167\1\u0271\12\167\1\0\2\167\4\0\43\167\1\u0272"+
    "\20\167\1\0\2\167\4\0\33\167\1\u0273\30\167\1\0"+
    "\2\167\4\0\41\167\1\u0274\22\167\1\0\2\167\4\0"+
    "\56\167\1\u0275\5\167\1\0\2\167\4\0\45\167\1\u0276"+
    "\16\167\1\0\2\167\4\0\55\167\1\u0277\6\167\1\0"+
    "\2\167\4\0\43\167\1\u0278\20\167\1\0\2\167\4\0"+
    "\43\167\1\u0279\11\167\1\u027a\6\167\1\0\2\167\4\0"+
    "\53\167\1\u0140\10\167\1\0\2\167\4\0\60\167\1\u027b"+
    "\3\167\1\0\2\167\4\0\54\167\1\u027c\7\167\1\0"+
    "\2\167\4\0\57\167\1\u0140\4\167\1\0\2\167\4\0"+
    "\45\167\1\u01d8\16\167\1\0\1\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\4\22\1\u027d\23\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\14\22\1\u027e\13\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\11\22\1\251\16\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\20\22\1\u027f\7\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\2\22\1\u0280\25\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\21\22\1\u0281\6\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\10\22\1\u0282\6\22\1\u0283"+
    "\10\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\6\22\1\u0284\12\22\1\u0162\6\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\17\22\1\u017e\10\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\4\22\1\u0285\23\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\21\22\1\u0286\6\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\17\22\1\u0287\10\22\1\0"+
    "\2\22\11\0\1\22\7\0\2\22\1\u0288\3\22\1\251"+
    "\2\22\3\0\2\22\1\0\30\22\1\0\2\22\11\0"+
    "\1\22\7\0\5\22\1\u0289\3\22\3\0\2\22\1\0"+
    "\30\22\1\0\2\22\11\0\1\22\7\0\2\22\1\251"+
    "\6\22\3\0\2\22\1\0\30\22\1\0\2\22\11\0"+
    "\1\22\7\0\4\22\1\251\4\22\3\0\2\22\1\0"+
    "\30\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\17\22\1\u028a\10\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\10\22\1\u0209"+
    "\17\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\21\22\1\u028b\6\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\5\22\1\u028c"+
    "\22\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\1\22\1\u017f\26\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\13\22\1\u028d"+
    "\14\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\1\u028e\27\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\10\22\1\u028f\17\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\17\22\1\u0290\10\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\14\22\1\u0291\13\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\3\22\1\u0292\24\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\14\22\1\u0293\13\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\2\22\1\u0287\25\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\15\22\1\u017e\12\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\20\22\1\u0294\7\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\4\22\1\u0295\23\22"+
    "\1\0\2\22\11\0\1\22\7\0\1\22\1\u01f9\1\u01fa"+
    "\1\u01fb\2\22\1\u01fc\1\22\1\251\3\0\2\22\1\0"+
    "\30\22\1\0\1\22\11\55\1\0\26\55\1\0\21\55"+
    "\1\u0296\21\55\1\0\26\55\1\0\10\55\1\u0297\6\55"+
    "\1\u0298\23\55\1\0\26\55\1\0\21\55\1\u0184\21\55"+
    "\1\0\26\55\1\0\21\55\1\u0299\21\55\1\0\26\55"+
    "\1\0\17\55\1\u029a\23\55\1\0\12\55\1\u029b\3\55"+
    "\1\326\7\55\1\0\43\55\1\0\15\55\1\u029c\10\55"+
    "\1\0\43\55\1\0\12\55\1\326\13\55\1\0\43\55"+
    "\1\0\14\55\1\326\11\55\1\0\43\55\1\0\26\55"+
    "\1\0\17\55\1\u029d\23\55\1\0\26\55\1\0\10\55"+
    "\1\u0221\32\55\1\0\26\55\1\0\5\55\1\u029e\35\55"+
    "\1\0\26\55\1\0\1\55\1\u0196\41\55\1\0\26\55"+
    "\1\0\13\55\1\u029f\27\55\1\0\26\55\1\0\1\u0211"+
    "\42\55\1\0\26\55\1\0\10\55\1\u02a0\32\55\1\0"+
    "\26\55\1\0\17\55\1\u02a1\23\55\1\0\26\55\1\0"+
    "\3\55\1\u02a2\37\55\1\0\26\55\1\0\14\55\1\u02a3"+
    "\26\55\1\0\26\55\1\0\2\55\1\u029a\40\55\1\0"+
    "\26\55\1\0\4\55\1\u02a4\36\55\1\0\11\55\1\u0214"+
    "\1\u0215\1\u0216\2\55\1\u0217\1\55\1\326\5\55\1\0"+
    "\32\55\62\0\1\u02a5\61\0\1\u02a6\6\0\1\u02a7\74\0"+
    "\1\u0199\72\0\1\u02a8\70\0\1\u02a9\36\0\1\u02aa\3\0"+
    "\1\357\71\0\1\u02ab\67\0\1\357\74\0\1\357\124\0"+
    "\1\u02ac\63\0\1\u0237\67\0\1\u02ad\66\0\1\u01ab\104\0"+
    "\1\u02ae\57\0\1\u0227\102\0\1\u02af\101\0\1\u02b0\56\0"+
    "\1\u02b1\103\0\1\u02b2\60\0\1\u02a9\74\0\1\u02b3\50\0"+
    "\1\u022a\1\u022b\1\u022c\2\0\1\u022d\1\0\1\357\40\0"+
    "\2\127\1\0\2\127\1\0\3\127\1\0\3\127\1\0"+
    "\22\127\1\0\21\127\1\u02b4\12\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\22\127\1\0\10\127\1\u02b5"+
    "\6\127\1\u02b6\14\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\21\127\1\u01ae\12\127\1\0"+
    "\2\127\1\0\3\127\1\0\3\127\1\0\22\127\1\0"+
    "\21\127\1\u02b7\12\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\17\127\1\u02b8\14\127\1\0"+
    "\2\127\1\0\3\127\1\0\3\127\1\0\6\127\1\u02b9"+
    "\3\127\1\u0109\7\127\1\0\34\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\11\127\1\u02ba\10\127\1\0"+
    "\34\127\1\0\2\127\1\0\3\127\1\0\3\127\1\0"+
    "\6\127\1\u0109\13\127\1\0\34\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\10\127\1\u0109\11\127\1\0"+
    "\34\127\1\0\2\127\1\0\3\127\1\0\3\127\1\0"+
    "\22\127\1\0\17\127\1\u02bb\14\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\22\127\1\0\10\127\1\u024d"+
    "\23\127\1\0\2\127\1\0\3\127\1\0\3\127\1\0"+
    "\22\127\1\0\5\127\1\u02bc\26\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\22\127\1\0\1\127\1\u01c0"+
    "\32\127\1\0\2\127\1\0\3\127\1\0\3\127\1\0"+
    "\22\127\1\0\13\127\1\u02bd\20\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\22\127\1\0\1\u023d\33\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\10\127\1\u02be\23\127\1\0\2\127\1\0\3\127"+
    "\1\0\3\127\1\0\22\127\1\0\17\127\1\u02bf\14\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\3\127\1\u02c0\30\127\1\0\2\127\1\0\3\127"+
    "\1\0\3\127\1\0\22\127\1\0\14\127\1\u02c1\17\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\2\127\1\u02b8\31\127\1\0\2\127\1\0\3\127"+
    "\1\0\3\127\1\0\22\127\1\0\4\127\1\u02c2\27\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\5\127"+
    "\1\u0240\1\u0241\1\u0242\2\127\1\u0243\1\127\1\u0109\5\127"+
    "\1\0\32\127\2\u0120\1\147\2\u0120\1\150\54\u0120\1\u02c3"+
    "\12\u0120\1\147\2\u0120\1\150\43\u0120\1\u02c4\6\u0120\1\u02c5"+
    "\14\u0120\1\147\2\u0120\1\150\54\u0120\1\u01c3\12\u0120\1\147"+
    "\2\u0120\1\150\54\u0120\1\u02c6\12\u0120\1\147\2\u0120\1\150"+
    "\52\u0120\1\u02c7\14\u0120\1\147\2\u0120\1\150\16\u0120\1\u02c8"+
    "\3\u0120\1\u0127\44\u0120\1\147\2\u0120\1\150\21\u0120\1\u02c9"+
    "\45\u0120\1\147\2\u0120\1\150\16\u0120\1\u0127\50\u0120\1\147"+
    "\2\u0120\1\150\20\u0120\1\u0127\46\u0120\1\147\2\u0120\1\150"+
    "\52\u0120\1\u02ca\14\u0120\1\147\2\u0120\1\150\43\u0120\1\u0263"+
    "\23\u0120\1\147\2\u0120\1\150\40\u0120\1\u02cb\26\u0120\1\147"+
    "\2\u0120\1\150\34\u0120\1\u01d5\32\u0120\1\147\2\u0120\1\150"+
    "\46\u0120\1\u02cc\20\u0120\1\147\2\u0120\1\150\33\u0120\1\u0253"+
    "\33\u0120\1\147\2\u0120\1\150\43\u0120\1\u02cd\23\u0120\1\147"+
    "\2\u0120\1\150\52\u0120\1\u02ce\14\u0120\1\147\2\u0120\1\150"+
    "\36\u0120\1\u02cf\30\u0120\1\147\2\u0120\1\150\47\u0120\1\u02d0"+
    "\17\u0120\1\147\2\u0120\1\150\35\u0120\1\u02c7\31\u0120\1\147"+
    "\2\u0120\1\150\37\u0120\1\u02d1\27\u0120\1\147\2\u0120\1\150"+
    "\15\u0120\1\u0256\1\u0257\1\u0258\2\u0120\1\u0259\1\u0120\1\u0127"+
    "\40\u0120\2\167\4\0\54\167\1\u02d2\7\167\1\0\2\167"+
    "\4\0\43\167\1\u02d3\6\167\1\u02d4\11\167\1\0\2\167"+
    "\4\0\54\167\1\u01d8\7\167\1\0\2\167\4\0\54\167"+
    "\1\u02d5\7\167\1\0\2\167\4\0\52\167\1\u02d6\11\167"+
    "\1\0\2\167\4\0\16\167\1\u02d7\3\167\1\u0140\41\167"+
    "\1\0\2\167\4\0\21\167\1\u02d8\42\167\1\0\2\167"+
    "\4\0\16\167\1\u0140\45\167\1\0\2\167\4\0\20\167"+
    "\1\u0140\43\167\1\0\2\167\4\0\52\167\1\u02d9\11\167"+
    "\1\0\2\167\4\0\43\167\1\u0279\20\167\1\0\2\167"+
    "\4\0\40\167\1\u02da\23\167\1\0\2\167\4\0\34\167"+
    "\1\u01ea\27\167\1\0\2\167\4\0\46\167\1\u02db\15\167"+
    "\1\0\2\167\4\0\33\167\1\u0269\30\167\1\0\2\167"+
    "\4\0\43\167\1\u02dc\20\167\1\0\2\167\4\0\52\167"+
    "\1\u02dd\11\167\1\0\2\167\4\0\36\167\1\u02de\25\167"+
    "\1\0\2\167\4\0\47\167\1\u02df\14\167\1\0\2\167"+
    "\4\0\35\167\1\u02d6\26\167\1\0\2\167\4\0\37\167"+
    "\1\u02e0\24\167\1\0\2\167\4\0\15\167\1\u026c\1\u026d"+
    "\1\u026e\2\167\1\u026f\1\167\1\u0140\37\167\1\0\1\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\20\22"+
    "\1\u0178\7\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\2\22\1\u02e1\25\22\1\0\2\22"+
    "\11\0\1\22\7\0\1\22\2\u02e2\1\u02e3\5\251\3\0"+
    "\2\22\1\0\30\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\15\22\1\u02e4\12\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\17\22\1\u02e5\10\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\14\22\1\u02e6\13\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\1\u020a\27\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\1\u02e7\27\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\26\22\1\u017e"+
    "\1\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\10\22\1\u02e8\17\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\21\22\1\251"+
    "\6\22\1\0\2\22\11\0\1\22\7\0\10\22\1\251"+
    "\3\0\2\22\1\0\30\22\1\0\2\22\11\0\1\22"+
    "\7\0\6\22\1\251\2\22\3\0\2\22\1\0\30\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\14\22\1\u02e9\13\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\4\22\1\u0160\23\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\10\22\1\u02ea\17\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\1\251\27\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\21\22\1\u0162\6\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\2\22\1\251\25\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\14\22\1\u02eb\13\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\3\22\1\u0160\24\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\10\22\1\u02ec\17\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\6\22\1\251\21\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\5\22\1\u02ed\22\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\3\22\1\251\24\22\1\0"+
    "\1\22\11\55\1\0\26\55\1\0\17\55\1\u02ee\23\55"+
    "\1\0\26\55\1\0\14\55\1\350\26\55\1\0\26\55"+
    "\1\0\1\u0222\42\55\1\0\26\55\1\0\10\55\1\u02ef"+
    "\32\55\1\0\26\55\1\0\21\55\1\326\21\55\1\0"+
    "\20\55\1\326\5\55\1\0\43\55\1\0\16\55\1\326"+
    "\7\55\1\0\43\55\1\0\26\55\1\0\14\55\1\u02f0"+
    "\26\55\1\0\26\55\1\0\10\55\1\u02f1\32\55\1\0"+
    "\26\55\1\0\1\326\42\55\1\0\26\55\1\0\2\55"+
    "\1\326\40\55\1\0\26\55\1\0\14\55\1\u02f2\26\55"+
    "\1\0\26\55\1\0\10\55\1\u02f3\32\55\1\0\26\55"+
    "\1\0\6\55\1\326\34\55\1\0\26\55\1\0\3\55"+
    "\1\326\26\55\60\0\1\u02f4\67\0\1\u0101\56\0\1\u0238"+
    "\102\0\1\u02f5\103\0\1\357\42\0\1\357\70\0\1\357"+
    "\117\0\1\u02f6\66\0\1\u02f7\62\0\1\357\74\0\1\357"+
    "\104\0\1\u02f8\66\0\1\u02f9\70\0\1\357\67\0\1\357"+
    "\26\0\2\127\1\0\2\127\1\0\3\127\1\0\3\127"+
    "\1\0\22\127\1\0\17\127\1\u02fa\14\127\1\0\2\127"+
    "\1\0\3\127\1\0\3\127\1\0\22\127\1\0\14\127"+
    "\1\u011b\17\127\1\0\2\127\1\0\3\127\1\0\3\127"+
    "\1\0\22\127\1\0\1\u024e\33\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\22\127\1\0\10\127\1\u02fb"+
    "\23\127\1\0\2\127\1\0\3\127\1\0\3\127\1\0"+
    "\22\127\1\0\21\127\1\u0109\12\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\14\127\1\u0109\5\127\1\0"+
    "\34\127\1\0\2\127\1\0\3\127\1\0\3\127\1\0"+
    "\12\127\1\u0109\7\127\1\0\34\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\22\127\1\0\14\127\1\u02fc"+
    "\17\127\1\0\2\127\1\0\3\127\1\0\3\127\1\0"+
    "\22\127\1\0\10\127\1\u02fd\23\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\22\127\1\0\1\u0109\33\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\2\127\1\u0109\31\127\1\0\2\127\1\0\3\127"+
    "\1\0\3\127\1\0\22\127\1\0\14\127\1\u02fe\17\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\10\127\1\u02ff\23\127\1\0\2\127\1\0\3\127"+
    "\1\0\3\127\1\0\22\127\1\0\6\127\1\u0109\25\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\3\127\1\u0109\26\127\2\u0120\1\147\2\u0120\1\150"+
    "\52\u0120\1\u0300\14\u0120\1\147\2\u0120\1\150\47\u0120\1\u0139"+
    "\17\u0120\1\147\2\u0120\1\150\33\u0120\1\u0264\33\u0120\1\147"+
    "\2\u0120\1\150\43\u0120\1\u0301\23\u0120\1\147\2\u0120\1\150"+
    "\54\u0120\1\u0127\12\u0120\1\147\2\u0120\1\150\24\u0120\1\u0127"+
    "\42\u0120\1\147\2\u0120\1\150\22\u0120\1\u0127\44\u0120\1\147"+
    "\2\u0120\1\150\47\u0120\1\u0302\17\u0120\1\147\2\u0120\1\150"+
    "\43\u0120\1\u0303\23\u0120\1\147\2\u0120\1\150\33\u0120\1\u0127"+
    "\33\u0120\1\147\2\u0120\1\150\35\u0120\1\u0127\31\u0120\1\147"+
    "\2\u0120\1\150\47\u0120\1\u0304\17\u0120\1\147\2\u0120\1\150"+
    "\43\u0120\1\u0305\23\u0120\1\147\2\u0120\1\150\41\u0120\1\u0127"+
    "\25\u0120\1\147\2\u0120\1\150\36\u0120\1\u0127\26\u0120\2\167"+
    "\4\0\52\167\1\u0306\11\167\1\0\2\167\4\0\47\167"+
    "\1\u0152\14\167\1\0\2\167\4\0\33\167\1\u027a\30\167"+
    "\1\0\2\167\4\0\43\167\1\u0307\20\167\1\0\2\167"+
    "\4\0\54\167\1\u0140\7\167\1\0\2\167\4\0\24\167"+
    "\1\u0140\37\167\1\0\2\167\4\0\22\167\1\u0140\41\167"+
    "\1\0\2\167\4\0\47\167\1\u0308\14\167\1\0\2\167"+
    "\4\0\43\167\1\u0309\20\167\1\0\2\167\4\0\33\167"+
    "\1\u0140\30\167\1\0\2\167\4\0\35\167\1\u0140\26\167"+
    "\1\0\2\167\4\0\47\167\1\u030a\14\167\1\0\2\167"+
    "\4\0\43\167\1\u030b\20\167\1\0\2\167\4\0\41\167"+
    "\1\u0140\22\167\1\0\2\167\4\0\36\167\1\u0140\25\167"+
    "\1\0\1\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\4\22\1\u0207\23\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\251\3\0\2\22\1\0\30\22\1\0\2\22"+
    "\11\0\1\22\7\0\3\251\6\22\3\0\2\22\1\0"+
    "\30\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\3\22\1\u02e1\24\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\22\22\1\u030c"+
    "\5\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\22\22\1\u0162\5\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\21\22\1\u030d"+
    "\6\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\15\22\1\u030e\12\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\1\u015b\27\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\4\22\1\267\23\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\21\22\1\u030f\6\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\4\22\1\u0310\23\22\1\0\1\22\11\55\1\0"+
    "\26\55\1\0\22\55\1\u0311\20\55\1\0\26\55\1\0"+
    "\15\55\1\u0312\25\55\1\0\26\55\1\0\1\u0313\42\55"+
    "\1\0\26\55\1\0\4\55\1\332\36\55\1\0\26\55"+
    "\1\0\21\55\1\u0314\10\55\63\0\1\u0315\65\0\1\u0316"+
    "\55\0\1\u0317\76\0\1\363\107\0\1\u0318\10\0\2\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\22\127\1\u0319\11\127\1\0\2\127\1\0\3\127"+
    "\1\0\3\127\1\0\22\127\1\0\15\127\1\u031a\16\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\1\u031b\33\127\1\0\2\127\1\0\3\127\1\0"+
    "\3\127\1\0\22\127\1\0\4\127\1\u010d\27\127\1\0"+
    "\2\127\1\0\3\127\1\0\3\127\1\0\22\127\1\0"+
    "\21\127\1\u031c\10\127\2\u0120\1\147\2\u0120\1\150\55\u0120"+
    "\1\u031d\11\u0120\1\147\2\u0120\1\150\50\u0120\1\u031e\16\u0120"+
    "\1\147\2\u0120\1\150\33\u0120\1\u031f\33\u0120\1\147\2\u0120"+
    "\1\150\37\u0120\1\u012b\27\u0120\1\147\2\u0120\1\150\54\u0120"+
    "\1\u0320\10\u0120\2\167\4\0\55\167\1\u0321\6\167\1\0"+
    "\2\167\4\0\50\167\1\u0322\13\167\1\0\2\167\4\0"+
    "\33\167\1\u0323\30\167\1\0\2\167\4\0\37\167\1\u0144"+
    "\24\167\1\0\2\167\4\0\54\167\1\u0324\7\167\1\0"+
    "\1\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\2\22\1\u0325\25\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\4\22\1\u0326\23\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\14\22\1\251\13\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\26\22\1\251\1\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\17\22\1\u0207\10\22\1\0\1\22\11\55\1\0\26\55"+
    "\1\0\2\55\1\u0327\40\55\1\0\26\55\1\0\14\55"+
    "\1\326\26\55\1\0\26\55\1\0\12\55\1\326\30\55"+
    "\1\0\26\55\1\0\26\55\1\326\3\55\43\0\1\u0328"+
    "\104\0\1\357\70\0\1\357\106\0\1\357\3\0\2\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\2\127\1\u0329\31\127\1\0\2\127\1\0\3\127"+
    "\1\0\3\127\1\0\22\127\1\0\14\127\1\u0109\17\127"+
    "\1\0\2\127\1\0\3\127\1\0\3\127\1\0\22\127"+
    "\1\0\12\127\1\u0109\21\127\1\0\2\127\1\0\3\127"+
    "\1\0\3\127\1\0\22\127\1\0\26\127\1\u0109\3\127"+
    "\2\u0120\1\147\2\u0120\1\150\35\u0120\1\u032a\31\u0120\1\147"+
    "\2\u0120\1\150\47\u0120\1\u0127\17\u0120\1\147\2\u0120\1\150"+
    "\45\u0120\1\u0127\21\u0120\1\147\2\u0120\1\150\61\u0120\1\u0127"+
    "\3\u0120\2\167\4\0\35\167\1\u032b\26\167\1\0\2\167"+
    "\4\0\47\167\1\u0140\14\167\1\0\2\167\4\0\45\167"+
    "\1\u0140\16\167\1\0\2\167\4\0\61\167\1\u0140\2\167"+
    "\1\0\1\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\21\22\1\u032c\6\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\2\22\1\u032d\25\22"+
    "\1\0\1\22\11\55\1\0\26\55\1\0\21\55\1\u032e"+
    "\10\55\62\0\1\u032f\10\0\2\127\1\0\2\127\1\0"+
    "\3\127\1\0\3\127\1\0\22\127\1\0\21\127\1\u0330"+
    "\10\127\2\u0120\1\147\2\u0120\1\150\54\u0120\1\u0331\10\u0120"+
    "\2\167\4\0\54\167\1\u0332\7\167\1\0\1\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\15\22\1\267"+
    "\12\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\1\u0333\27\22\1\0\1\22\11\55\1\0"+
    "\26\55\1\0\15\55\1\332\14\55\56\0\1\363\14\0"+
    "\2\127\1\0\2\127\1\0\3\127\1\0\3\127\1\0"+
    "\22\127\1\0\15\127\1\u010d\14\127\2\u0120\1\147\2\u0120"+
    "\1\150\50\u0120\1\u012b\14\u0120\2\167\4\0\50\167\1\u0144"+
    "\13\167\1\0\1\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\12\22\1\u0334\15\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\12\22\1\u0207"+
    "\15\22\1\0\1\22";

  private static int [] zzUnpackTrans() {
    int [] result = new int[45253];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\1\4\0\2\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\30\1\1\11\16\1\1\11\17\1\1\11"+
    "\12\1\1\11\16\1\1\11\20\1\1\11\16\1\3\11"+
    "\22\1\2\11\1\1\1\11\4\1\1\0\2\11\52\1"+
    "\1\11\2\0\31\1\2\0\1\11\26\0\32\1\2\0"+
    "\1\11\2\1\2\0\1\1\26\0\31\1\1\0\50\1"+
    "\2\0\25\1\6\0\1\1\16\0\25\1\6\0\1\1"+
    "\16\0\25\1\1\0\13\1\1\11\55\1\25\0\27\1"+
    "\25\0\77\1\17\0\17\1\17\0\42\1\4\0\1\1"+
    "\1\0\6\1\4\0\1\1\1\0\17\1\4\0\4\1"+
    "\4\0\7\1\1\0\1\1\1\0\4\1\1\0\1\1"+
    "\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[820];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    public static int errorLine = -1;
    public static int errorColumn = -1;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case Comments: {
              errores.add(new Token("/**", yyline, yycolumn, "Error: llave comentario abierta"));
            }  // fall though
            case 821: break;
            default:
          {   for(Token t: tokens){
    t.print();
  }

  System.out.println("\nErrores\n");
  for(Token t: errores){
    t.print();
  }
  return 0;
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 32: break;
          case 2:
            { System.out.println(yyline);
                                  System.out.println(yycolumn);
                                  throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 33: break;
          case 3:
            { /* ignore */
            }
            // fall through
          case 34: break;
          case 4:
            { string.setLength(0); string.append(yytext()); yybegin(indetifierState);
            }
            // fall through
          case 35: break;
          case 5:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 36: break;
          case 6:
            { string.setLength(0); yybegin(Chars);
            }
            // fall through
          case 37: break;
          case 7:
            { string.setLength(0);
                                    string.append(yytext());
                                    yybegin(numberState);
            }
            // fall through
          case 38: break;
          case 8:
            { string.append( yytext() );
            }
            // fall through
          case 39: break;
          case 9:
            { yybegin(YYINITIAL);
                                   tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 40: break;
          case 10:
            { yybegin(YYINITIAL);
                                    string.append( yytext() ); 
                                    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada"));
            }
            // fall through
          case 41: break;
          case 11:
            { yybegin(YYINITIAL);
                                    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
            }
            // fall through
          case 42: break;
          case 12:
            { string.append(yytext());
            }
            // fall through
          case 43: break;
          case 13:
            { yybegin(NaturalNumbers);
                                    string.append(yytext());
            }
            // fall through
          case 44: break;
          case 14:
            { yybegin(YYINITIAL);
                                   tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
            }
            // fall through
          case 45: break;
          case 15:
            { if(errorLine == -1){
                                                                    errorLine = yyline;
                                                                    errorColumn = yycolumn;
                                                                  }
            }
            // fall through
          case 46: break;
          case 16:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 47: break;
          case 17:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "identificador"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 48: break;
          case 18:
            { string.append(yytext()); yybegin(indetifierError);
            }
            // fall through
          case 49: break;
          case 19:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Error de identificador"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 50: break;
          case 20:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Error Decimal"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 51: break;
          case 21:
            { {tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));}
                   yybegin(YYINITIAL);
            }
            // fall through
          case 52: break;
          case 22:
            { errorLine = -1;
                                    errorColumn = -1; 
                                    yybegin(Comments);
            }
            // fall through
          case 53: break;
          case 23:
            { yybegin(lineComment);
            }
            // fall through
          case 54: break;
          case 24:
            { string.setLength(0); string.append(yytext()); yybegin(indetifierError);
            }
            // fall through
          case 55: break;
          case 25:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 56: break;
          case 26:
            { string.append(yytext()); yybegin(decimalError);
            }
            // fall through
          case 57: break;
          case 27:
            { if(errorLine != -1){
                                      errores.add(new Token("*", errorLine, errorColumn, "Error: linea sin * <comentario bloque>"));
                                    }
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 58: break;
          case 28:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Error decimal"));
            }
            // fall through
          case 59: break;
          case 29:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 60: break;
          case 30:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 61: break;
          case 31:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
