// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

/* JFlex example: partial Java language lexer specification */
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int hexaState = 4;
  public static final int numberState = 6;
  public static final int NaturalNumbers = 8;
  public static final int Chars = 10;
  public static final int Comments = 12;
  public static final int lineComment = 14;
  public static final int indetifierState = 16;
  public static final int indetifierError = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\3\u1f00"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\3\u1f00\1\u3f00\1\u4000"+
    "\4\u1f00\1\u4100\11\u1f00\3\u0100\1\u4200\1\u4300\13\u1f00\4\u0100"+
    "\1\u4400\63\u1f00\2\u0100\1\u4500\4\u1f00\1\u4600\100\u1f00\1\u4700"+
    "\40\u1f00\1\u4800\1\u4900\1\u1f00\1\u4a00\1\u4b00\1\u4c00\1\u4d00"+
    "\26\u1f00\1\u4e00\21\u1f00\246\u0100\1\u4f00\20\u0100\1\u5000\1\u5100"+
    "\77\u1f00\2\u0100\1\u5100\u0b05\u1f00\1\u5200\1\u5300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\6\1\11\1\12\1\13\1\14"+
    "\2\12\1\15\1\7\1\12\1\7\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\27\2\12\1\31\1\32\1\33\1\12\1\6\6\34"+
    "\7\11\1\35\14\11\1\12\1\36\2\12\1\11\1\6"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\11\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\11\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\12\1\67\2\12\6\0\1\70\32\0"+
    "\2\6\4\11\4\6\1\11\2\6\1\0\7\6\1\11"+
    "\4\6\1\11\5\6\27\11\1\6\37\11\1\6\u01ca\11"+
    "\4\6\14\11\16\6\5\11\7\6\1\11\1\6\1\11"+
    "\21\6\160\0\5\11\1\6\2\11\2\6\4\11\10\6"+
    "\1\11\1\6\3\11\1\6\1\11\1\6\24\11\1\6"+
    "\123\11\1\6\213\11\1\6\5\0\2\6\236\11\11\6"+
    "\46\11\2\6\1\11\7\6\47\11\7\6\1\11\1\6"+
    "\55\0\1\6\1\0\1\6\2\0\1\6\2\0\1\6"+
    "\1\0\10\6\33\11\5\6\3\11\15\6\5\0\6\6"+
    "\1\11\4\6\13\0\5\6\53\11\37\0\4\6\2\11"+
    "\1\0\143\11\1\6\1\11\10\0\1\6\6\0\2\11"+
    "\2\0\1\6\4\0\2\11\12\0\3\11\2\6\1\11"+
    "\17\6\1\0\1\11\1\0\36\11\33\0\2\6\131\11"+
    "\13\0\1\11\16\6\12\0\41\11\11\0\2\11\4\6"+
    "\1\11\5\6\26\11\4\0\1\11\11\0\1\11\3\0"+
    "\1\11\5\0\22\6\31\11\3\0\104\6\1\11\1\6"+
    "\13\11\67\6\33\0\1\6\4\0\66\11\3\0\1\11"+
    "\22\0\1\11\7\0\12\11\2\0\2\6\12\0\1\6"+
    "\7\11\1\6\7\11\1\6\3\0\1\6\10\11\2\6"+
    "\2\11\2\6\26\11\1\6\7\11\1\6\1\11\3\6"+
    "\4\11\2\6\1\0\1\11\7\0\2\6\2\0\2\6"+
    "\3\0\1\11\10\6\1\0\4\6\2\11\1\6\3\11"+
    "\2\0\2\6\12\0\4\11\7\6\1\11\5\6\3\0"+
    "\1\6\6\11\4\6\2\11\2\6\26\11\1\6\7\11"+
    "\1\6\2\11\1\6\2\11\1\6\2\11\2\6\1\0"+
    "\1\6\5\0\4\6\2\0\2\6\3\0\3\6\1\0"+
    "\7\6\4\11\1\6\1\11\7\6\14\0\3\11\1\0"+
    "\13\6\3\0\1\6\11\11\1\6\3\11\1\6\26\11"+
    "\1\6\7\11\1\6\2\11\1\6\5\11\2\6\1\0"+
    "\1\11\10\0\1\6\3\0\1\6\3\0\2\6\1\11"+
    "\17\6\2\11\2\0\2\6\12\0\1\6\1\11\17\6"+
    "\3\0\1\6\10\11\2\6\2\11\2\6\26\11\1\6"+
    "\7\11\1\6\2\11\1\6\5\11\2\6\1\0\1\11"+
    "\7\0\2\6\2\0\2\6\3\0\10\6\2\0\4\6"+
    "\2\11\1\6\3\11\2\0\2\6\12\0\1\6\1\11"+
    "\20\6\1\0\1\11\1\6\6\11\3\6\3\11\1\6"+
    "\4\11\3\6\2\11\1\6\1\11\1\6\2\11\3\6"+
    "\2\11\3\6\3\11\3\6\14\11\4\6\5\0\3\6"+
    "\3\0\1\6\4\0\2\6\1\11\6\6\1\0\16\6"+
    "\12\0\11\6\1\11\7\6\3\0\1\6\10\11\1\6"+
    "\3\11\1\6\27\11\1\6\12\11\1\6\5\11\3\6"+
    "\1\11\7\0\1\6\3\0\1\6\4\0\7\6\2\0"+
    "\1\6\2\11\6\6\2\11\2\0\2\6\12\0\22\6"+
    "\2\0\1\6\10\11\1\6\3\11\1\6\27\11\1\6"+
    "\12\11\1\6\5\11\2\6\1\0\1\11\7\0\1\6"+
    "\3\0\1\6\4\0\7\6\2\0\7\6\1\11\1\6"+
    "\2\11\2\0\2\6\12\0\1\6\2\11\17\6\2\0"+
    "\1\6\10\11\1\6\3\11\1\6\51\11\2\6\1\11"+
    "\7\0\1\6\3\0\1\6\4\0\1\11\10\6\1\0"+
    "\10\6\2\11\2\0\2\6\12\0\12\6\6\11\2\6"+
    "\2\0\1\6\22\11\3\6\30\11\1\6\11\11\1\6"+
    "\1\11\2\6\7\11\3\6\1\0\4\6\6\0\1\6"+
    "\1\0\1\6\10\0\22\6\2\0\15\6\60\11\1\0"+
    "\2\11\7\0\4\6\10\11\10\0\1\6\12\0\47\6"+
    "\2\11\1\6\1\11\2\6\2\11\1\6\1\11\2\6"+
    "\1\11\6\6\4\11\1\6\7\11\1\6\3\11\1\6"+
    "\1\11\1\6\1\11\2\6\2\11\1\6\4\11\1\0"+
    "\2\11\6\0\1\6\2\0\1\11\2\6\5\11\1\6"+
    "\1\11\1\6\6\0\2\6\12\0\2\6\4\11\40\6"+
    "\1\11\27\6\2\0\6\6\12\0\13\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\2\0\10\11\1\6\44\11"+
    "\4\6\24\0\1\6\2\0\5\11\13\0\1\6\44\0"+
    "\11\6\1\0\71\6\53\11\24\0\1\11\12\0\6\6"+
    "\6\11\4\0\4\11\3\0\1\11\3\0\2\11\7\0"+
    "\3\11\4\0\15\11\14\0\1\11\17\0\2\6\46\11"+
    "\1\6\1\11\5\6\1\11\2\6\53\11\1\6\115\11"+
    "\1\6\4\11\2\6\7\11\1\6\1\11\1\6\4\11"+
    "\2\6\51\11\1\6\4\11\2\6\41\11\1\6\4\11"+
    "\2\6\7\11\1\6\1\11\1\6\4\11\2\6\17\11"+
    "\1\6\71\11\1\6\4\11\2\6\103\11\2\6\3\0"+
    "\40\6\20\11\20\6\125\11\14\6\u016c\11\2\6\21\11"+
    "\1\6\32\11\5\6\113\11\3\6\3\11\17\6\15\11"+
    "\1\6\4\11\3\0\13\6\22\11\3\0\13\6\22\11"+
    "\2\0\14\6\15\11\1\6\3\11\1\6\2\0\14\6"+
    "\64\11\40\0\3\6\1\11\3\6\2\11\1\0\2\6"+
    "\12\0\41\6\3\0\2\6\12\0\6\6\130\11\10\6"+
    "\51\11\1\0\1\11\5\6\106\11\12\6\35\11\3\6"+
    "\14\0\4\6\14\0\12\6\12\0\36\11\2\6\5\11"+
    "\13\6\54\11\4\6\21\0\7\11\2\0\6\6\12\0"+
    "\46\6\27\11\5\0\4\6\65\11\12\0\1\6\35\0"+
    "\2\6\13\0\6\6\12\0\15\6\1\11\130\6\5\0"+
    "\57\11\21\0\7\11\4\6\12\0\21\6\11\0\14\6"+
    "\3\0\36\11\15\0\2\11\12\0\54\11\16\0\14\6"+
    "\44\11\24\0\10\6\12\0\3\6\3\11\12\0\44\11"+
    "\122\6\3\0\1\6\25\0\4\11\1\0\4\11\3\0"+
    "\2\11\11\6\300\11\47\0\25\6\4\0\26\11\2\6"+
    "\6\11\2\6\46\11\2\6\6\11\2\6\10\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\37\11\2\6"+
    "\65\11\1\6\7\11\1\6\1\11\3\6\3\11\1\6"+
    "\7\11\3\6\4\11\2\6\6\11\4\6\15\11\5\6"+
    "\3\11\1\6\7\11\16\6\5\0\30\6\2\3\5\0"+
    "\20\6\2\11\23\6\1\11\13\6\5\0\5\6\6\0"+
    "\1\6\1\11\15\6\1\11\20\6\15\11\3\6\33\11"+
    "\25\6\15\0\4\6\1\0\3\6\14\0\21\6\1\11"+
    "\4\6\1\11\2\6\12\11\1\6\1\11\3\6\5\11"+
    "\6\6\1\11\1\6\1\11\1\6\1\11\1\6\4\11"+
    "\1\6\13\11\2\6\4\11\5\6\5\11\4\6\1\11"+
    "\21\6\51\11\u0177\6\57\11\1\6\57\11\1\6\205\11"+
    "\6\6\4\11\3\0\2\11\14\6\46\11\1\6\1\11"+
    "\5\6\1\11\2\6\70\11\7\6\1\11\17\6\1\0"+
    "\27\11\11\6\7\11\1\6\7\11\1\6\7\11\1\6"+
    "\7\11\1\6\7\11\1\6\7\11\1\6\7\11\1\6"+
    "\7\11\1\6\40\0\57\6\1\11\325\6\3\11\31\6"+
    "\11\11\6\0\1\6\5\11\2\6\5\11\4\6\126\11"+
    "\2\6\2\0\2\6\3\11\1\6\132\11\1\6\4\11"+
    "\5\6\51\11\3\6\136\11\21\6\33\11\65\6\306\11"+
    "\112\6\315\11\63\6\215\11\103\6\56\11\2\6\15\11"+
    "\3\6\20\11\12\0\2\11\24\6\57\11\1\0\4\6"+
    "\12\0\1\6\31\11\7\6\1\0\120\11\2\0\45\6"+
    "\11\11\2\6\147\11\2\6\4\11\1\6\4\11\14\6"+
    "\13\11\115\6\12\11\1\0\3\11\1\0\4\11\1\0"+
    "\27\11\5\0\20\6\1\11\7\6\64\11\14\6\2\0"+
    "\62\11\21\0\13\6\12\0\6\6\22\0\6\11\3\6"+
    "\1\11\4\6\12\0\34\11\10\0\2\6\27\11\15\0"+
    "\14\6\35\11\3\6\4\0\57\11\16\0\16\6\1\11"+
    "\12\0\46\6\51\11\16\0\11\6\3\11\1\0\10\11"+
    "\2\0\2\6\12\0\6\6\27\11\3\6\1\11\1\0"+
    "\4\6\60\11\1\0\1\11\3\0\2\11\2\0\5\11"+
    "\2\0\1\11\1\0\1\11\30\6\3\11\2\6\13\11"+
    "\5\0\2\6\3\11\2\0\12\6\6\11\2\6\6\11"+
    "\2\6\6\11\11\6\7\11\1\6\7\11\221\6\43\11"+
    "\10\0\1\6\2\0\2\6\12\0\6\6\244\11\14\6"+
    "\27\11\4\6\61\11\4\6\u0100\3\156\11\2\6\152\11"+
    "\46\6\7\11\14\6\5\11\5\6\1\11\1\0\12\11"+
    "\1\6\15\11\1\6\5\11\1\6\1\11\1\6\2\11"+
    "\1\6\2\11\1\6\154\11\41\6\153\11\22\6\100\11"+
    "\2\6\66\11\50\6\15\11\3\6\20\0\20\6\7\0"+
    "\14\6\2\11\30\6\3\11\31\6\1\11\6\6\5\11"+
    "\1\6\207\11\2\6\1\0\4\6\1\11\13\6\12\0"+
    "\7\6\32\11\4\6\1\11\1\6\32\11\13\6\131\11"+
    "\3\6\6\11\2\6\6\11\2\6\6\11\2\6\3\11"+
    "\3\6\2\11\3\6\2\11\22\6\3\0\4\6\14\11"+
    "\1\6\32\11\1\6\23\11\1\6\2\11\1\6\17\11"+
    "\2\6\16\11\42\6\173\11\105\6\65\11\210\6\1\0"+
    "\202\6\35\11\3\6\61\11\57\6\37\11\21\6\33\11"+
    "\65\6\36\11\2\6\44\11\4\6\10\11\1\6\5\11"+
    "\52\6\236\11\2\6\12\0\126\6\6\11\2\6\1\11"+
    "\1\6\54\11\1\6\2\11\3\6\1\11\2\6\27\11"+
    "\252\6\26\11\12\6\32\11\106\6\70\11\6\6\2\11"+
    "\100\6\1\11\3\0\1\6\2\0\5\6\4\0\4\11"+
    "\1\6\3\11\1\6\33\11\4\6\3\0\4\6\1\0"+
    "\40\6\35\11\203\6\66\11\12\6\26\11\12\6\23\11"+
    "\215\6\111\11\267\6\3\0\65\11\17\0\37\6\12\0"+
    "\20\6\3\0\55\11\13\0\2\6\1\0\22\6\31\11"+
    "\7\6\12\0\6\6\3\0\44\11\16\0\1\6\12\0"+
    "\100\6\3\0\60\11\16\0\4\11\13\6\12\0\246\6"+
    "\53\11\15\0\10\6\12\0\66\6\157\11\221\6\143\11"+
    "\235\6\57\11\321\6\71\11\307\6\105\11\13\6\1\11"+
    "\56\0\20\6\4\0\15\11\140\6\2\11\u0163\6\5\0"+
    "\3\6\26\0\2\6\7\0\36\6\4\0\224\6\3\0"+
    "\273\6\125\11\1\6\107\11\1\6\2\11\2\6\1\11"+
    "\2\6\2\11\2\6\4\11\1\6\14\11\1\6\1\11"+
    "\1\6\7\11\1\6\101\11\1\6\4\11\2\6\10\11"+
    "\1\6\7\11\1\6\34\11\1\6\4\11\1\6\5\11"+
    "\1\6\1\11\3\6\7\11\1\6\u0154\11\2\6\31\11"+
    "\1\6\31\11\1\6\37\11\1\6\31\11\1\6\37\11"+
    "\1\6\31\11\1\6\37\11\1\6\31\11\1\6\37\11"+
    "\1\6\31\11\1\6\10\11\2\6\62\0\4\11\1\6"+
    "\33\11\1\6\2\11\1\6\1\11\2\6\1\11\1\6"+
    "\12\11\1\6\4\11\1\6\1\11\1\6\1\11\6\6"+
    "\1\11\4\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\3\11\1\6\2\11\1\6\1\11\2\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\2\11\1\6\1\11\2\6\4\11\1\6\7\11\1\6"+
    "\4\11\1\6\4\11\1\6\1\11\1\6\12\11\1\6"+
    "\21\11\5\6\3\11\1\6\5\11\1\6\21\11\104\6"+
    "\327\11\51\6\65\11\13\6\336\11\343\6\1\0\36\6"+
    "\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21504];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\6\0\1\2\2\0\1\3\2\4\1\5\1\6"+
    "\3\5\1\7\1\10\1\5\1\11\23\5\1\3\1\12"+
    "\1\13\1\3\15\12\1\14\2\12\15\3\4\15\2\16"+
    "\2\15\1\17\1\3\1\12\1\20\15\12\1\3\2\21"+
    "\16\3\1\2\2\22\15\2\1\23\5\1\16\16\1\24"+
    "\1\25\1\26\1\1\1\5\1\27\47\5\1\12\2\0"+
    "\2\12\1\27\26\12\2\0\1\27\26\0\2\12\1\27"+
    "\26\12\2\0\2\2\1\30\2\0\1\27\26\0\2\2"+
    "\1\27\26\2\1\0\21\5\1\27\23\5\1\31\1\5"+
    "\2\0\6\12\1\27\16\12\6\0\1\27\16\0\6\12"+
    "\1\27\16\12\6\0\1\27\16\0\6\2\1\27\16\2"+
    "\1\0\3\5\1\27\1\32\6\5\1\33\17\5\1\32"+
    "\6\5\1\27\25\12\1\27\25\0\1\27\25\12\1\27"+
    "\25\0\1\27\25\2\1\27\2\5\1\27\26\5\17\12"+
    "\17\0\17\12\17\0\17\2\1\5\2\27\7\5\1\27"+
    "\2\5\4\12\1\27\1\12\4\0\1\27\1\0\4\12"+
    "\1\27\1\12\4\0\1\27\1\0\4\2\1\27\1\2"+
    "\5\5\4\12\4\0\4\12\4\0\4\2\2\5\1\12"+
    "\1\0\1\12\1\0\1\2\2\5\1\12\1\0\1\12"+
    "\1\0\1\2\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[807];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u023a\0\u0273\0\u02ac\0\u023a\0\u02e5"+
    "\0\u023a\0\u031e\0\u023a\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b"+
    "\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603"+
    "\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb"+
    "\0\u0804\0\u083d\0\u0876\0\u023a\0\u08af\0\u08e8\0\u0921\0\u095a"+
    "\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u023a\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u023a\0\u0f24\0\u0f5d\0\u0f96\0\u023a\0\u0fcf"+
    "\0\u1008\0\u1041\0\u0cb1\0\u107a\0\u10b3\0\u023a\0\u10ec\0\u1125"+
    "\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed"+
    "\0\u1326\0\u135f\0\u1398\0\u13d1\0\u023a\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644"+
    "\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u023a\0\u179a\0\u17d3"+
    "\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b"+
    "\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u023a\0\u1ab8\0\u023a\0\u1af1"+
    "\0\u1b2a\0\u1b63\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c"+
    "\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u1b9c"+
    "\0\u023a\0\u023a\0\u023a\0\u1bd5\0\u1c0e\0\u02e5\0\u1c47\0\u1c80"+
    "\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48"+
    "\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010"+
    "\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8"+
    "\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0"+
    "\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd\0\u023a\0\u24f6\0\u252f"+
    "\0\u2568\0\u25a1\0\u0876\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886"+
    "\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e"+
    "\0\u2a87\0\u2ac0\0\u2af9\0\u023a\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd"+
    "\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5"+
    "\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d"+
    "\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u10b3\0\u308a\0\u30c3\0\u30fc"+
    "\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4"+
    "\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c"+
    "\0\u34c5\0\u34fe\0\u3537\0\u13d1\0\u3570\0\u023a\0\u35a9\0\u3570"+
    "\0\u35e2\0\u361b\0\u13d1\0\u3654\0\u368d\0\u36c6\0\u36ff\0\u3738"+
    "\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e\0\u38c7\0\u3900"+
    "\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8"+
    "\0\u3b01\0\u3b3a\0\u3b73\0\u1761\0\u3bac\0\u3be5\0\u3c1e\0\u3c57"+
    "\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6\0\u3e1f"+
    "\0\u3e58\0\u3e91\0\u3eca\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7"+
    "\0\u4020\0\u4059\0\u4092\0\u40cb\0\u4104\0\u413d\0\u4176\0\u41af"+
    "\0\u41e8\0\u4221\0\u425a\0\u4293\0\u42cc\0\u4305\0\u433e\0\u4377"+
    "\0\u43b0\0\u43e9\0\u4422\0\u445b\0\u4494\0\u44cd\0\u4506\0\u453f"+
    "\0\u4578\0\u45b1\0\u45ea\0\u4623\0\u465c\0\u4695\0\u46ce\0\u4707"+
    "\0\u4740\0\u4779\0\u47b2\0\u47eb\0\u4824\0\u485d\0\u4896\0\u48cf"+
    "\0\u02e5\0\u4908\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\u4a5e"+
    "\0\u4a97\0\u4ad0\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4\0\u4bed\0\u4c26"+
    "\0\u4c5f\0\u4c98\0\u4cd1\0\u4d0a\0\u4d43\0\u4d7c\0\u4db5\0\u4dee"+
    "\0\u4e27\0\u4e60\0\u4e99\0\u4ed2\0\u4f0b\0\u4f44\0\u4f7d\0\u4fb6"+
    "\0\u4fef\0\u5028\0\u5061\0\u509a\0\u50d3\0\u510c\0\u5145\0\u517e"+
    "\0\u51b7\0\u51f0\0\u5229\0\u5262\0\u529b\0\u52d4\0\u530d\0\u5346"+
    "\0\u537f\0\u53b8\0\u53f1\0\u542a\0\u5463\0\u549c\0\u54d5\0\u550e"+
    "\0\u5547\0\u5580\0\u55b9\0\u55f2\0\u562b\0\u5664\0\u569d\0\u56d6"+
    "\0\u570f\0\u5748\0\u5781\0\u57ba\0\u57f3\0\u582c\0\u5865\0\u589e"+
    "\0\u58d7\0\u5910\0\u5949\0\u5982\0\u59bb\0\u59f4\0\u5a2d\0\u5a66"+
    "\0\u5a9f\0\u5ad8\0\u5b11\0\u5b4a\0\u5b83\0\u5bbc\0\u5bf5\0\u5c2e"+
    "\0\u5c67\0\u5ca0\0\u5cd9\0\u5d12\0\u5d4b\0\u5d84\0\u5dbd\0\u5df6"+
    "\0\u5e2f\0\u5e68\0\u5ea1\0\u5eda\0\u5f13\0\u5f4c\0\u5f85\0\u5fbe"+
    "\0\u5ff7\0\u6030\0\u6069\0\u60a2\0\u60db\0\u6114\0\u614d\0\u6186"+
    "\0\u61bf\0\u61f8\0\u6231\0\u626a\0\u62a3\0\u62dc\0\u6315\0\u634e"+
    "\0\u6387\0\u023a\0\u63c0\0\u63f9\0\u6432\0\u646b\0\u64a4\0\u64dd"+
    "\0\u6516\0\u654f\0\u6588\0\u65c1\0\u65fa\0\u6633\0\u666c\0\u66a5"+
    "\0\u66de\0\u02e5\0\u6717\0\u6750\0\u6789\0\u67c2\0\u67fb\0\u6834"+
    "\0\u686d\0\u68a6\0\u68df\0\u6918\0\u6951\0\u698a\0\u69c3\0\u69fc"+
    "\0\u6a35\0\u6a6e\0\u6aa7\0\u6ae0\0\u6b19\0\u6b52\0\u6b8b\0\u6bc4"+
    "\0\u6bfd\0\u6c36\0\u6c6f\0\u6ca8\0\u6ce1\0\u6d1a\0\u6d53\0\u6d8c"+
    "\0\u6dc5\0\u6dfe\0\u6e37\0\u6e70\0\u6ea9\0\u6ee2\0\u6f1b\0\u6f54"+
    "\0\u6f8d\0\u6fc6\0\u6fff\0\u7038\0\u7071\0\u70aa\0\u70e3\0\u711c"+
    "\0\u7155\0\u718e\0\u71c7\0\u7200\0\u7239\0\u7272\0\u72ab\0\u72e4"+
    "\0\u731d\0\u7356\0\u738f\0\u73c8\0\u7401\0\u743a\0\u7473\0\u74ac"+
    "\0\u74e5\0\u751e\0\u7557\0\u7590\0\u75c9\0\u7602\0\u763b\0\u7674"+
    "\0\u76ad\0\u76e6\0\u771f\0\u7758\0\u7791\0\u77ca\0\u7803\0\u783c"+
    "\0\u7875\0\u78ae\0\u78e7\0\u7920\0\u7959\0\u7992\0\u79cb\0\u7a04"+
    "\0\u7a3d\0\u7a76\0\u7aaf\0\u7ae8\0\u7b21\0\u7b5a\0\u7b93\0\u7bcc"+
    "\0\u7c05\0\u7c3e\0\u7c77\0\u7cb0\0\u7ce9\0\u7d22\0\u7d5b\0\u7d94"+
    "\0\u7dcd\0\u7e06\0\u7e3f\0\u7e78\0\u7eb1\0\u7eea\0\u7f23\0\u7f5c"+
    "\0\u7f95\0\u7fce\0\u8007\0\u8040\0\u8079\0\u80b2\0\u80eb\0\u8124"+
    "\0\u815d\0\u8196\0\u81cf\0\u8208\0\u8241\0\u827a\0\u82b3\0\u82ec"+
    "\0\u8325\0\u835e\0\u8397\0\u83d0\0\u8409\0\u8442\0\u847b\0\u84b4"+
    "\0\u84ed\0\u8526\0\u855f\0\u8598\0\u85d1\0\u860a\0\u8643\0\u867c"+
    "\0\u86b5\0\u86ee\0\u8727\0\u8760\0\u8799\0\u87d2\0\u880b\0\u8844"+
    "\0\u887d\0\u88b6\0\u88ef\0\u8928\0\u8961\0\u899a\0\u89d3\0\u8a0c"+
    "\0\u8a45\0\u8a7e\0\u8ab7\0\u8af0\0\u8b29\0\u8b62\0\u8b9b\0\u8bd4"+
    "\0\u8c0d\0\u8c46\0\u8c7f\0\u8cb8\0\u8cf1\0\u8d2a\0\u8d63\0\u8d9c"+
    "\0\u8dd5\0\u8e0e\0\u8e47\0\u8e80\0\u8eb9\0\u8ef2\0\u8f2b\0\u8f64"+
    "\0\u8f9d\0\u8fd6\0\u900f\0\u9048\0\u9081\0\u90ba\0\u90f3\0\u912c"+
    "\0\u9165\0\u919e\0\u91d7\0\u9210\0\u9249\0\u9282\0\u92bb\0\u92f4"+
    "\0\u932d\0\u9366\0\u939f\0\u93d8\0\u9411\0\u944a\0\u9483\0\u94bc"+
    "\0\u94f5\0\u952e\0\u9567\0\u95a0\0\u95d9\0\u9612\0\u964b\0\u9684"+
    "\0\u96bd\0\u96f6\0\u972f\0\u9768\0\u97a1\0\u97da\0\u9813\0\u984c"+
    "\0\u9885\0\u98be\0\u98f7\0\u9930\0\u9969\0\u47b2\0\u99a2\0\u99db"+
    "\0\u9a14\0\u9a4d\0\u9a86\0\u9abf\0\u4d43\0\u9af8\0\u9b31\0\u9b6a"+
    "\0\u9ba3\0\u9bdc\0\u51f0\0\u9c15\0\u9c4e\0\u9c87\0\u9cc0\0\u9cf9"+
    "\0\u569d\0\u9d32\0\u9d6b\0\u9da4\0\u9ddd\0\u9e16\0\u5b4a\0\u9e4f"+
    "\0\u9e88\0\u9ec1\0\u9efa\0\u9f33\0\u5ff7\0\u9f6c\0\u9fa5\0\u9fde"+
    "\0\ua017\0\ua050\0\ua089\0\ua0c2\0\ua0fb\0\ua134\0\ua16d\0\ua1a6"+
    "\0\ua1df\0\ua218\0\ua251\0\ua28a\0\ua2c3\0\ua2fc\0\ua335\0\ua36e"+
    "\0\ua3a7\0\ua3e0\0\ua419\0\ua452\0\ua48b\0\ua4c4\0\ua4fd\0\ua536"+
    "\0\ua56f\0\ua5a8\0\ua5e1\0\ua61a\0\ua653\0\ua68c\0\ua6c5\0\ua6fe"+
    "\0\ua737\0\ua770\0\ua7a9\0\ua7e2\0\ua81b\0\ua854\0\ua88d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[807];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\2\14\1\13\1\14\1\15\1\13\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\16\1\24\1\25\11\26"+
    "\1\27\1\16\1\30\2\20\1\13\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\20\1\37\1\40\2\20\1\41"+
    "\2\20\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\20\1\51\1\20\1\52\1\13\10\53\1\54\25\53"+
    "\1\55\2\53\1\56\1\57\1\60\1\61\2\53\1\62"+
    "\2\53\1\63\2\53\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\5\53\10\13\1\73\7\13\11\74\3\13"+
    "\1\75\4\13\1\76\1\77\1\100\1\101\2\13\1\102"+
    "\2\13\1\103\2\13\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\6\13\2\113\1\13\1\113\1\114\1\13"+
    "\1\115\2\13\1\113\1\116\1\13\1\115\1\117\1\115"+
    "\11\120\1\121\1\115\1\122\5\13\1\76\1\77\1\123"+
    "\1\101\2\13\1\102\2\13\1\103\2\13\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\3\13\1\124\2\13"+
    "\2\113\1\13\1\113\1\114\1\13\1\115\2\13\1\113"+
    "\1\116\1\13\1\115\1\13\1\115\11\120\1\121\1\115"+
    "\1\122\5\13\1\76\1\77\1\100\1\101\2\13\1\102"+
    "\2\13\1\103\2\13\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\3\13\1\124\1\13\2\125\1\13\2\125"+
    "\1\13\2\125\1\13\3\125\1\126\21\125\1\13\2\125"+
    "\1\127\1\130\1\131\1\132\2\125\1\133\2\125\1\134"+
    "\2\125\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
    "\5\125\2\144\1\145\2\144\1\146\7\144\1\147\23\144"+
    "\1\150\1\151\1\152\1\153\2\144\1\154\2\144\1\155"+
    "\2\144\1\156\1\157\1\160\1\161\1\162\1\163\1\164"+
    "\5\144\2\165\1\166\2\13\1\167\33\165\1\170\1\171"+
    "\1\172\1\173\2\165\1\174\2\165\1\175\2\165\1\176"+
    "\1\177\1\200\1\201\1\202\1\203\1\204\4\165\1\13"+
    "\2\117\1\205\4\117\1\206\2\117\1\207\1\210\1\117"+
    "\1\206\1\117\1\206\11\117\1\211\1\206\1\212\5\117"+
    "\1\213\1\214\1\215\1\216\2\117\1\217\2\117\1\220"+
    "\2\117\1\221\1\222\1\223\1\224\1\225\1\226\1\227"+
    "\3\117\1\230\3\117\1\231\36\117\1\213\1\214\1\215"+
    "\1\216\2\117\1\217\2\117\1\220\2\117\1\221\1\222"+
    "\1\223\1\224\1\225\1\226\1\227\5\117\73\0\1\14"+
    "\120\0\1\21\36\0\1\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\30\20\1\0\1\20\13\0\1\21"+
    "\75\0\11\26\55\0\1\232\1\0\1\233\12\0\1\21"+
    "\47\0\1\234\6\0\11\26\3\0\2\234\1\0\30\234"+
    "\33\0\2\21\70\0\2\21\35\0\1\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\3\20\1\235\14\20"+
    "\1\236\7\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\1\237\14\20\1\240\1\20\1\241"+
    "\6\20\1\242\1\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\1\243\14\20\1\244\12\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\1\245\3\20\1\246\10\20\1\236\12\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\12\20\1\247\1\20\1\250\4\20\1\251\6\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\1\252\7\20\1\253\4\20\1\254\1\20\1\255\2\20"+
    "\1\256\5\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\4\20\1\257\10\20\1\260\12\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\5\20\1\236\5\20\1\261\1\262\13\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\1\263\7\20\1\264\4\20\1\265\12\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\1\266"+
    "\16\20\1\267\2\20\1\270\5\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\4\20\1\271"+
    "\23\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\4\20\1\272\10\20\1\273\3\20\1\274"+
    "\5\20\1\275\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\7\20\1\276\7\20\1\277\10\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\5\20\1\300\2\20\1\301\17\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\1\254"+
    "\7\20\1\302\17\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\4\20\1\303\2\20\1\304"+
    "\20\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\4\20\1\305\23\20\1\0\1\20\67\0"+
    "\1\21\1\0\10\53\1\0\25\53\1\0\32\53\53\0"+
    "\1\306\5\0\1\307\2\0\1\310\4\0\10\53\1\0"+
    "\25\53\1\0\15\53\1\311\24\53\1\0\25\53\1\0"+
    "\4\53\1\312\10\53\1\313\24\53\1\0\25\53\1\0"+
    "\12\53\1\314\1\53\1\315\25\53\1\0\25\53\1\0"+
    "\1\316\14\53\1\317\1\53\1\320\2\53\1\321\17\53"+
    "\1\0\25\53\1\0\5\53\1\313\5\53\1\322\1\323"+
    "\25\53\1\0\25\53\1\0\1\324\14\53\1\325\24\53"+
    "\1\0\25\53\1\0\1\326\16\53\1\327\2\53\1\330"+
    "\17\53\1\0\25\53\1\0\4\53\1\331\35\53\1\0"+
    "\25\53\1\0\15\53\1\332\3\53\1\333\20\53\1\0"+
    "\25\53\1\0\7\53\1\334\7\53\1\335\22\53\1\0"+
    "\25\53\1\0\5\53\1\336\2\53\1\337\31\53\1\0"+
    "\25\53\1\0\1\317\7\53\1\340\31\53\1\0\25\53"+
    "\1\0\7\53\1\341\22\53\20\0\11\74\74\0\1\75"+
    "\110\0\1\342\57\0\1\343\10\0\1\344\65\0\1\345"+
    "\1\0\1\346\54\0\1\347\14\0\1\350\1\0\1\351"+
    "\2\0\1\352\53\0\1\344\5\0\1\353\1\354\54\0"+
    "\1\355\14\0\1\356\53\0\1\357\16\0\1\360\2\0"+
    "\1\361\52\0\1\362\101\0\1\363\3\0\1\364\56\0"+
    "\1\365\7\0\1\366\56\0\1\367\2\0\1\370\60\0"+
    "\1\350\7\0\1\371\67\0\1\372\24\0\1\113\120\0"+
    "\1\113\51\0\1\113\75\0\11\120\71\0\2\113\70\0"+
    "\2\113\124\0\1\113\1\0\2\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\34\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\21\125\1\0"+
    "\15\125\1\373\16\125\1\0\2\125\1\0\2\125\1\0"+
    "\3\125\1\0\21\125\1\0\4\125\1\374\10\125\1\375"+
    "\16\125\1\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\21\125\1\0\12\125\1\376\1\125\1\377\17\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\21\125\1\0"+
    "\1\u0100\14\125\1\u0101\1\125\1\u0102\2\125\1\u0103\11\125"+
    "\1\0\2\125\1\0\2\125\1\0\3\125\1\0\21\125"+
    "\1\0\5\125\1\375\5\125\1\u0104\1\u0105\17\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\21\125\1\0"+
    "\1\u0106\14\125\1\u0107\16\125\1\0\2\125\1\0\2\125"+
    "\1\0\3\125\1\0\21\125\1\0\1\u0108\16\125\1\u0109"+
    "\2\125\1\u010a\11\125\1\0\2\125\1\0\2\125\1\0"+
    "\3\125\1\0\21\125\1\0\4\125\1\u010b\27\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\21\125\1\0"+
    "\15\125\1\u010c\3\125\1\u010d\12\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\7\125\1\u010e"+
    "\7\125\1\u010f\14\125\1\0\2\125\1\0\2\125\1\0"+
    "\3\125\1\0\21\125\1\0\5\125\1\u0110\2\125\1\u0111"+
    "\23\125\1\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\21\125\1\0\1\u0101\7\125\1\u0112\23\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\7\125"+
    "\1\u0113\22\125\2\u0114\1\145\2\u0114\1\146\63\u0114\2\0"+
    "\1\145\66\0\2\u0115\1\u0116\2\u0115\1\u0117\11\u0115\1\u0118"+
    "\51\u0115\2\u0114\1\145\2\u0114\1\146\46\u0114\1\u0119\16\u0114"+
    "\1\145\2\u0114\1\146\35\u0114\1\u011a\10\u0114\1\u011b\16\u0114"+
    "\1\145\2\u0114\1\146\43\u0114\1\u011c\1\u0114\1\u011d\17\u0114"+
    "\1\145\2\u0114\1\146\31\u0114\1\u011e\14\u0114\1\u011f\1\u0114"+
    "\1\u0120\2\u0114\1\u0121\11\u0114\1\145\2\u0114\1\146\36\u0114"+
    "\1\u011b\5\u0114\1\u0122\1\u0123\17\u0114\1\145\2\u0114\1\146"+
    "\31\u0114\1\u0124\14\u0114\1\u0125\16\u0114\1\145\2\u0114\1\146"+
    "\31\u0114\1\u0126\16\u0114\1\u0127\2\u0114\1\u0128\11\u0114\1\145"+
    "\2\u0114\1\146\35\u0114\1\u0129\27\u0114\1\145\2\u0114\1\146"+
    "\46\u0114\1\u012a\3\u0114\1\u012b\12\u0114\1\145\2\u0114\1\146"+
    "\40\u0114\1\u012c\7\u0114\1\u012d\14\u0114\1\145\2\u0114\1\146"+
    "\36\u0114\1\u012e\2\u0114\1\u012f\23\u0114\1\145\2\u0114\1\146"+
    "\31\u0114\1\u011f\7\u0114\1\u0130\23\u0114\1\145\2\u0114\1\146"+
    "\40\u0114\1\u0131\22\u0114\2\165\4\0\62\165\3\0\1\166"+
    "\66\0\2\165\4\0\46\165\1\u0132\13\165\1\0\2\165"+
    "\4\0\35\165\1\u0133\10\165\1\u0134\13\165\1\0\2\165"+
    "\4\0\43\165\1\u0135\1\165\1\u0136\14\165\1\0\2\165"+
    "\4\0\31\165\1\u0137\14\165\1\u0138\1\165\1\u0139\2\165"+
    "\1\u013a\6\165\1\0\2\165\4\0\36\165\1\u0134\5\165"+
    "\1\u013b\1\u013c\14\165\1\0\2\165\4\0\31\165\1\u013d"+
    "\14\165\1\u013e\13\165\1\0\2\165\4\0\31\165\1\u013f"+
    "\16\165\1\u0140\2\165\1\u0141\6\165\1\0\2\165\4\0"+
    "\35\165\1\u0142\24\165\1\0\2\165\4\0\46\165\1\u0143"+
    "\3\165\1\u0144\7\165\1\0\2\165\4\0\40\165\1\u0145"+
    "\7\165\1\u0146\11\165\1\0\2\165\4\0\36\165\1\u0147"+
    "\2\165\1\u0148\20\165\1\0\2\165\4\0\31\165\1\u0138"+
    "\7\165\1\u0149\20\165\1\0\2\165\4\0\40\165\1\u014a"+
    "\21\165\33\0\1\207\51\0\1\207\106\0\2\207\70\0"+
    "\2\207\124\0\1\207\1\0\1\234\10\0\1\234\4\0"+
    "\1\u014b\1\0\11\234\3\0\2\234\1\0\30\234\1\0"+
    "\1\234\1\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\3\20\1\u014c\24\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\12\20\1\u014d\15\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\15\20\1\u014e\12\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\4\20\1\u014f\23\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\21\20\1\u0150\6\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\12\20\1\u0151\15\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\14\20\1\u0152\13\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\26\20\1\u0153\1\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\12\20\1\u0154\15\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\20\20\1\u0155\7\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\22\20\1\u0156\5\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\7\20\1\u0157\20\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\12\20\1\247\15\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\14\20\1\u0158\13\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\17\20\1\236\10\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\15\20\1\u0156\12\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\14\20\1\u0159\13\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\25\20\1\u015a\2\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\22\20\1\u015b\5\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\16\20\1\u015c\11\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\21\20\1\u015d\6\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\16\20\1\u015e\11\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\14\20\1\u015f\13\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\3\20\1\u0160\24\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\26\20\1\u0161\1\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\1\u0162\7\20\1\u0163"+
    "\17\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\1\20\1\u0164\26\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\21\20\1\u0165"+
    "\6\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\2\20\1\u0166\11\20\1\u0167\13\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\12\20\1\u0168\15\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\17\20\1\u0169\10\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\1\u016a\27\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\10\20\1\u016b\17\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\1\u016c"+
    "\21\20\1\u0155\5\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\10\20\1\u016d\17\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\14\20\1\u016e\13\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\4\20\1\u016f\23\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\4\20\1\u0170\3\20\1\u0171\17\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\10\20\1\u0172"+
    "\17\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\1\u015b\27\20\1\0\1\20\35\0\1\u0173"+
    "\70\0\1\u0174\33\0\10\53\1\0\25\53\1\0\14\53"+
    "\1\u0175\25\53\1\0\25\53\1\0\12\53\1\u0176\27\53"+
    "\1\0\25\53\1\0\20\53\1\u0177\21\53\1\0\25\53"+
    "\1\0\22\53\1\u0178\17\53\1\0\25\53\1\0\12\53"+
    "\1\314\27\53\1\0\25\53\1\0\17\53\1\313\22\53"+
    "\1\0\25\53\1\0\15\53\1\u0178\24\53\1\0\25\53"+
    "\1\0\14\53\1\u0179\25\53\1\0\25\53\1\0\16\53"+
    "\1\u017a\23\53\1\0\25\53\1\0\21\53\1\u017b\20\53"+
    "\1\0\25\53\1\0\16\53\1\u017c\23\53\1\0\25\53"+
    "\1\0\3\53\1\u017d\36\53\1\0\25\53\1\0\26\53"+
    "\1\u017e\13\53\1\0\25\53\1\0\1\u017f\7\53\1\u0180"+
    "\31\53\1\0\25\53\1\0\1\53\1\u0181\40\53\1\0"+
    "\25\53\1\0\21\53\1\u0182\20\53\1\0\25\53\1\0"+
    "\12\53\1\u0183\27\53\1\0\25\53\1\0\17\53\1\u0184"+
    "\22\53\1\0\25\53\1\0\10\53\1\u0185\31\53\1\0"+
    "\25\53\1\0\22\53\1\u0177\17\53\1\0\25\53\1\0"+
    "\10\53\1\u0186\31\53\1\0\25\53\1\0\14\53\1\u0187"+
    "\25\53\1\0\25\53\1\0\4\53\1\u0188\35\53\1\0"+
    "\25\53\1\0\10\53\1\u0189\21\53\53\0\1\u018a\66\0"+
    "\1\u018b\76\0\1\u018c\72\0\1\u018d\60\0\1\345\75\0"+
    "\1\344\66\0\1\u018d\67\0\1\u018e\72\0\1\u018f\73\0"+
    "\1\u0190\65\0\1\u0191\55\0\1\u0192\113\0\1\u0193\42\0"+
    "\1\u0194\7\0\1\u0195\61\0\1\u0196\110\0\1\u0197\61\0"+
    "\1\u0198\75\0\1\u0199\61\0\1\u019a\102\0\1\u018c\56\0"+
    "\1\u019b\74\0\1\u019c\60\0\1\u019d\74\0\1\u019e\21\0"+
    "\2\125\1\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\21\125\1\0\14\125\1\u019f\17\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\12\125\1\u01a0"+
    "\21\125\1\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\21\125\1\0\20\125\1\u01a1\13\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\22\125\1\u01a2"+
    "\11\125\1\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\21\125\1\0\12\125\1\376\21\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\17\125\1\375"+
    "\14\125\1\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\21\125\1\0\15\125\1\u01a2\16\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\14\125\1\u01a3"+
    "\17\125\1\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\21\125\1\0\16\125\1\u01a4\15\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\21\125\1\u01a5"+
    "\12\125\1\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\21\125\1\0\16\125\1\u01a6\15\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\3\125\1\u01a7"+
    "\30\125\1\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\21\125\1\0\26\125\1\u01a8\5\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\1\u01a9\7\125"+
    "\1\u01aa\23\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\1\125\1\u01ab\32\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\21\125"+
    "\1\u01ac\12\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\12\125\1\u01ad\21\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\17\125"+
    "\1\u01ae\14\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\10\125\1\u01af\23\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\22\125"+
    "\1\u01a1\11\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\10\125\1\u01b0\23\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\14\125"+
    "\1\u01b1\17\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\4\125\1\u01b2\27\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\10\125"+
    "\1\u01b3\21\125\2\u0115\1\u0116\2\u0115\1\u0117\63\u0115\2\0"+
    "\1\u0116\66\0\2\u0114\1\145\2\u0114\1\146\45\u0114\1\u01b4"+
    "\17\u0114\1\145\2\u0114\1\146\43\u0114\1\u01b5\21\u0114\1\145"+
    "\2\u0114\1\146\51\u0114\1\u01b6\13\u0114\1\145\2\u0114\1\146"+
    "\53\u0114\1\u01b7\11\u0114\1\145\2\u0114\1\146\43\u0114\1\u011c"+
    "\21\u0114\1\145\2\u0114\1\146\50\u0114\1\u011b\14\u0114\1\145"+
    "\2\u0114\1\146\46\u0114\1\u01b7\16\u0114\1\145\2\u0114\1\146"+
    "\45\u0114\1\u01b8\17\u0114\1\145\2\u0114\1\146\47\u0114\1\u01b9"+
    "\15\u0114\1\145\2\u0114\1\146\52\u0114\1\u01ba\12\u0114\1\145"+
    "\2\u0114\1\146\47\u0114\1\u01bb\15\u0114\1\145\2\u0114\1\146"+
    "\34\u0114\1\u01bc\30\u0114\1\145\2\u0114\1\146\57\u0114\1\u01bd"+
    "\5\u0114\1\145\2\u0114\1\146\31\u0114\1\u01be\7\u0114\1\u01bf"+
    "\23\u0114\1\145\2\u0114\1\146\32\u0114\1\u01c0\32\u0114\1\145"+
    "\2\u0114\1\146\52\u0114\1\u01c1\12\u0114\1\145\2\u0114\1\146"+
    "\43\u0114\1\u01c2\21\u0114\1\145\2\u0114\1\146\50\u0114\1\u01c3"+
    "\14\u0114\1\145\2\u0114\1\146\41\u0114\1\u01c4\23\u0114\1\145"+
    "\2\u0114\1\146\53\u0114\1\u01b6\11\u0114\1\145\2\u0114\1\146"+
    "\41\u0114\1\u01c5\23\u0114\1\145\2\u0114\1\146\45\u0114\1\u01c6"+
    "\17\u0114\1\145\2\u0114\1\146\35\u0114\1\u01c7\27\u0114\1\145"+
    "\2\u0114\1\146\41\u0114\1\u01c8\21\u0114\2\165\4\0\45\165"+
    "\1\u01c9\14\165\1\0\2\165\4\0\43\165\1\u01ca\16\165"+
    "\1\0\2\165\4\0\51\165\1\u01cb\10\165\1\0\2\165"+
    "\4\0\53\165\1\u01cc\6\165\1\0\2\165\4\0\43\165"+
    "\1\u0135\16\165\1\0\2\165\4\0\50\165\1\u0134\11\165"+
    "\1\0\2\165\4\0\46\165\1\u01cc\13\165\1\0\2\165"+
    "\4\0\45\165\1\u01cd\14\165\1\0\2\165\4\0\47\165"+
    "\1\u01ce\12\165\1\0\2\165\4\0\52\165\1\u01cf\7\165"+
    "\1\0\2\165\4\0\47\165\1\u01d0\12\165\1\0\2\165"+
    "\4\0\34\165\1\u01d1\25\165\1\0\2\165\4\0\57\165"+
    "\1\u01d2\2\165\1\0\2\165\4\0\31\165\1\u01d3\7\165"+
    "\1\u01d4\20\165\1\0\2\165\4\0\32\165\1\u01d5\27\165"+
    "\1\0\2\165\4\0\52\165\1\u01d6\7\165\1\0\2\165"+
    "\4\0\43\165\1\u01d7\16\165\1\0\2\165\4\0\50\165"+
    "\1\u01d8\11\165\1\0\2\165\4\0\41\165\1\u01d9\20\165"+
    "\1\0\2\165\4\0\53\165\1\u01cb\6\165\1\0\2\165"+
    "\4\0\41\165\1\u01da\20\165\1\0\2\165\4\0\45\165"+
    "\1\u01db\14\165\1\0\2\165\4\0\35\165\1\u01dc\24\165"+
    "\1\0\2\165\4\0\41\165\1\u01dd\20\165\21\0\11\u01de"+
    "\40\0\1\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\17\20\1\u01df\10\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\1\u01e0\27\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\12\20\1\236\15\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\1\u01e1\27\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\4\20"+
    "\1\u01e2\23\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\12\20\1\u01e3\15\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\20\20"+
    "\1\u01e4\1\u01e5\6\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\20\20\1\u0171\7\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\4\20\1\u01e6\23\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\4\20\1\236\23\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\13\20\1\236\14\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\4\20\1\u01e7\23\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\14\20\1\u01e8\13\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\2\20\1\u01e9\25\20\1\0"+
    "\2\20\7\0\1\u01ea\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\30\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\17\20\1\u0153\10\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\15\20"+
    "\1\u01eb\12\20\1\0\2\20\10\0\1\20\6\0\1\20"+
    "\1\u01ec\1\u01ed\1\u01ee\2\20\1\u01ef\1\20\1\236\3\0"+
    "\2\20\1\0\4\20\1\u01f0\23\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\16\20\1\u01f1"+
    "\11\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\22\20\1\u01f2\5\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\10\20\1\u01f3"+
    "\17\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\1\u01f4\27\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\6\20\1\u01f5\21\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\23\20\1\u01f6\4\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\12\20\1\u01f7\15\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\22\20\1\u01f8\5\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\15\20\1\u01f9\12\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\3\20\1\u01fa\24\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\10\20\1\u01fb\17\20"+
    "\1\0\2\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\10\20\1\u01fc\11\20\1\u01fd\5\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\1\20"+
    "\1\u01fe\26\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\20\20\1\236\7\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\14\20"+
    "\1\u01ff\13\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\25\20\1\u0200\2\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\21\20"+
    "\1\u0201\6\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\24\20\1\236\3\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\11\20"+
    "\1\u0153\16\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\12\20\1\u0155\15\20\1\0\1\20"+
    "\35\0\1\310\70\0\1\306\33\0\10\53\1\0\25\53"+
    "\1\0\20\53\1\u0202\1\u0203\20\53\1\0\25\53\1\0"+
    "\4\53\1\u0204\35\53\1\0\25\53\1\0\4\53\1\313"+
    "\35\53\1\0\25\53\1\0\13\53\1\313\26\53\1\0"+
    "\25\53\1\0\2\53\1\u0205\37\53\1\0\25\53\1\0"+
    "\15\53\1\u0206\24\53\1\0\10\53\1\u0207\1\u0208\1\u0209"+
    "\2\53\1\u020a\1\53\1\313\5\53\1\0\4\53\1\u020b"+
    "\35\53\1\0\25\53\1\0\16\53\1\u020c\23\53\1\0"+
    "\25\53\1\0\10\53\1\u020d\31\53\1\0\25\53\1\0"+
    "\1\u020e\41\53\1\0\25\53\1\0\6\53\1\u020f\33\53"+
    "\1\0\25\53\1\0\23\53\1\u0210\16\53\1\0\25\53"+
    "\1\0\12\53\1\u0211\27\53\1\0\25\53\1\0\22\53"+
    "\1\u0212\17\53\1\0\25\53\1\0\10\53\1\u0213\31\53"+
    "\1\0\25\53\1\0\10\53\1\u0214\11\53\1\u0215\17\53"+
    "\1\0\25\53\1\0\20\53\1\313\21\53\1\0\25\53"+
    "\1\0\25\53\1\u0216\14\53\1\0\25\53\1\0\21\53"+
    "\1\u0217\20\53\1\0\25\53\1\0\24\53\1\313\15\53"+
    "\1\0\25\53\1\0\12\53\1\u0177\17\53\57\0\1\u0218"+
    "\1\u0219\53\0\1\u021a\70\0\1\344\77\0\1\344\57\0"+
    "\1\u021b\103\0\1\u021c\35\0\1\u021d\1\u021e\1\u021f\2\0"+
    "\1\u0220\1\0\1\344\12\0\1\u0221\102\0\1\u0222\62\0"+
    "\1\u0223\60\0\1\u0224\76\0\1\u0225\105\0\1\u0226\57\0"+
    "\1\u0227\100\0\1\u0228\56\0\1\u0229\70\0\1\u022a\11\0"+
    "\1\u022b\66\0\1\344\75\0\1\u022c\64\0\1\u022d\73\0"+
    "\1\344\56\0\1\u018c\17\0\2\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\20\125\1\u022e"+
    "\1\u022f\12\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\4\125\1\u0230\27\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\4\125"+
    "\1\375\27\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\13\125\1\375\20\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\2\125"+
    "\1\u0231\31\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\15\125\1\u0232\16\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\4\125\1\u0233\1\u0234"+
    "\1\u0235\2\125\1\u0236\1\125\1\375\5\125\1\0\4\125"+
    "\1\u0237\27\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\16\125\1\u0238\15\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\10\125"+
    "\1\u0239\23\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\1\u023a\33\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\6\125\1\u023b"+
    "\25\125\1\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\21\125\1\0\23\125\1\u023c\10\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\12\125\1\u023d"+
    "\21\125\1\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\21\125\1\0\22\125\1\u023e\11\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\10\125\1\u023f"+
    "\23\125\1\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\21\125\1\0\10\125\1\u0240\11\125\1\u0241\11\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\21\125\1\0"+
    "\20\125\1\375\13\125\1\0\2\125\1\0\2\125\1\0"+
    "\3\125\1\0\21\125\1\0\25\125\1\u0242\6\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\21\125\1\0"+
    "\21\125\1\u0243\12\125\1\0\2\125\1\0\2\125\1\0"+
    "\3\125\1\0\21\125\1\0\24\125\1\375\7\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\21\125\1\0"+
    "\12\125\1\u01a1\17\125\2\u0114\1\145\2\u0114\1\146\51\u0114"+
    "\1\u0244\1\u0245\12\u0114\1\145\2\u0114\1\146\35\u0114\1\u0246"+
    "\27\u0114\1\145\2\u0114\1\146\35\u0114\1\u011b\27\u0114\1\145"+
    "\2\u0114\1\146\44\u0114\1\u011b\20\u0114\1\145\2\u0114\1\146"+
    "\33\u0114\1\u0247\31\u0114\1\145\2\u0114\1\146\46\u0114\1\u0248"+
    "\16\u0114\1\145\2\u0114\1\146\13\u0114\1\u0249\1\u024a\1\u024b"+
    "\2\u0114\1\u024c\1\u0114\1\u011b\12\u0114\1\u024d\27\u0114\1\145"+
    "\2\u0114\1\146\47\u0114\1\u024e\15\u0114\1\145\2\u0114\1\146"+
    "\41\u0114\1\u024f\23\u0114\1\145\2\u0114\1\146\31\u0114\1\u0250"+
    "\33\u0114\1\145\2\u0114\1\146\37\u0114\1\u0251\25\u0114\1\145"+
    "\2\u0114\1\146\54\u0114\1\u0252\10\u0114\1\145\2\u0114\1\146"+
    "\43\u0114\1\u0253\21\u0114\1\145\2\u0114\1\146\53\u0114\1\u0254"+
    "\11\u0114\1\145\2\u0114\1\146\41\u0114\1\u0255\23\u0114\1\145"+
    "\2\u0114\1\146\41\u0114\1\u0256\11\u0114\1\u0257\11\u0114\1\145"+
    "\2\u0114\1\146\51\u0114\1\u011b\13\u0114\1\145\2\u0114\1\146"+
    "\56\u0114\1\u0258\6\u0114\1\145\2\u0114\1\146\52\u0114\1\u0259"+
    "\12\u0114\1\145\2\u0114\1\146\55\u0114\1\u011b\7\u0114\1\145"+
    "\2\u0114\1\146\43\u0114\1\u01b6\17\u0114\2\165\4\0\51\165"+
    "\1\u025a\1\u025b\7\165\1\0\2\165\4\0\35\165\1\u025c"+
    "\24\165\1\0\2\165\4\0\35\165\1\u0134\24\165\1\0"+
    "\2\165\4\0\44\165\1\u0134\15\165\1\0\2\165\4\0"+
    "\33\165\1\u025d\26\165\1\0\2\165\4\0\46\165\1\u025e"+
    "\13\165\1\0\2\165\4\0\13\165\1\u025f\1\u0260\1\u0261"+
    "\2\165\1\u0262\1\165\1\u0134\12\165\1\u0263\24\165\1\0"+
    "\2\165\4\0\47\165\1\u0264\12\165\1\0\2\165\4\0"+
    "\41\165\1\u0265\20\165\1\0\2\165\4\0\31\165\1\u0266"+
    "\30\165\1\0\2\165\4\0\37\165\1\u0267\22\165\1\0"+
    "\2\165\4\0\54\165\1\u0268\5\165\1\0\2\165\4\0"+
    "\43\165\1\u0269\16\165\1\0\2\165\4\0\53\165\1\u026a"+
    "\6\165\1\0\2\165\4\0\41\165\1\u026b\20\165\1\0"+
    "\2\165\4\0\41\165\1\u026c\11\165\1\u026d\6\165\1\0"+
    "\2\165\4\0\51\165\1\u0134\10\165\1\0\2\165\4\0"+
    "\56\165\1\u026e\3\165\1\0\2\165\4\0\52\165\1\u026f"+
    "\7\165\1\0\2\165\4\0\55\165\1\u0134\4\165\1\0"+
    "\2\165\4\0\43\165\1\u01cb\16\165\12\0\1\234\6\0"+
    "\11\u01de\3\0\2\234\1\0\30\234\2\0\1\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\4\20\1\u0270"+
    "\23\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\14\20\1\u0271\13\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\11\20\1\236"+
    "\16\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\20\20\1\u0272\7\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\2\20\1\u0273"+
    "\25\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\21\20\1\u0274\6\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\10\20\1\u0275"+
    "\6\20\1\u0276\10\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\6\20\1\u0277\12\20\1\u0155"+
    "\6\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\17\20\1\u0171\10\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\4\20\1\u0278"+
    "\23\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\21\20\1\u0279\6\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\17\20\1\u027a"+
    "\10\20\1\0\2\20\10\0\1\20\6\0\2\20\1\u027b"+
    "\3\20\1\236\2\20\3\0\2\20\1\0\30\20\1\0"+
    "\2\20\10\0\1\20\6\0\5\20\1\u027c\3\20\3\0"+
    "\2\20\1\0\30\20\1\0\2\20\10\0\1\20\6\0"+
    "\2\20\1\236\6\20\3\0\2\20\1\0\30\20\1\0"+
    "\2\20\10\0\1\20\6\0\4\20\1\236\4\20\3\0"+
    "\2\20\1\0\30\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\17\20\1\u027d\10\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\10\20\1\u01fc\17\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\21\20\1\u027e\6\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\5\20\1\u027f\22\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\1\20\1\u0172\26\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\13\20\1\u0280\14\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\1\u0281\27\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\10\20"+
    "\1\u0282\17\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\17\20\1\u0283\10\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\14\20"+
    "\1\u0284\13\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\3\20\1\u0285\24\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\14\20"+
    "\1\u0286\13\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\2\20\1\u027a\25\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\15\20"+
    "\1\u0171\12\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\20\20\1\u0287\7\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\4\20"+
    "\1\u0288\23\20\1\0\2\20\10\0\1\20\6\0\1\20"+
    "\1\u01ec\1\u01ed\1\u01ee\2\20\1\u01ef\1\20\1\236\3\0"+
    "\2\20\1\0\30\20\1\0\1\20\10\53\1\0\25\53"+
    "\1\0\21\53\1\u0289\20\53\1\0\25\53\1\0\10\53"+
    "\1\u028a\6\53\1\u028b\22\53\1\0\25\53\1\0\21\53"+
    "\1\u0177\20\53\1\0\25\53\1\0\21\53\1\u028c\20\53"+
    "\1\0\25\53\1\0\17\53\1\u028d\22\53\1\0\11\53"+
    "\1\u028e\3\53\1\313\7\53\1\0\42\53\1\0\14\53"+
    "\1\u028f\10\53\1\0\42\53\1\0\11\53\1\313\13\53"+
    "\1\0\42\53\1\0\13\53\1\313\11\53\1\0\42\53"+
    "\1\0\25\53\1\0\17\53\1\u0290\22\53\1\0\25\53"+
    "\1\0\10\53\1\u0214\31\53\1\0\25\53\1\0\5\53"+
    "\1\u0291\34\53\1\0\25\53\1\0\1\53\1\u0189\40\53"+
    "\1\0\25\53\1\0\13\53\1\u0292\26\53\1\0\25\53"+
    "\1\0\1\u0204\41\53\1\0\25\53\1\0\10\53\1\u0293"+
    "\31\53\1\0\25\53\1\0\17\53\1\u0294\22\53\1\0"+
    "\25\53\1\0\3\53\1\u0295\36\53\1\0\25\53\1\0"+
    "\14\53\1\u0296\25\53\1\0\25\53\1\0\2\53\1\u028d"+
    "\37\53\1\0\25\53\1\0\4\53\1\u0297\35\53\1\0"+
    "\10\53\1\u0207\1\u0208\1\u0209\2\53\1\u020a\1\53\1\313"+
    "\5\53\1\0\32\53\60\0\1\u0298\57\0\1\u0299\6\0"+
    "\1\u029a\72\0\1\u018c\70\0\1\u029b\66\0\1\u029c\34\0"+
    "\1\u029d\3\0\1\344\67\0\1\u029e\65\0\1\344\72\0"+
    "\1\344\122\0\1\u029f\61\0\1\u022a\65\0\1\u02a0\64\0"+
    "\1\u019e\102\0\1\u02a1\55\0\1\u021a\100\0\1\u02a2\77\0"+
    "\1\u02a3\54\0\1\u02a4\101\0\1\u02a5\56\0\1\u029c\72\0"+
    "\1\u02a6\46\0\1\u021d\1\u021e\1\u021f\2\0\1\u0220\1\0"+
    "\1\344\40\0\2\125\1\0\2\125\1\0\2\125\1\0"+
    "\3\125\1\0\21\125\1\0\21\125\1\u02a7\12\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\21\125\1\0"+
    "\10\125\1\u02a8\6\125\1\u02a9\14\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\21\125\1\u01a1"+
    "\12\125\1\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\21\125\1\0\21\125\1\u02aa\12\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\17\125\1\u02ab"+
    "\14\125\1\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\5\125\1\u02ac\3\125\1\375\7\125\1\0\34\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\10\125\1\u02ad"+
    "\10\125\1\0\34\125\1\0\2\125\1\0\2\125\1\0"+
    "\3\125\1\0\5\125\1\375\13\125\1\0\34\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\7\125\1\375"+
    "\11\125\1\0\34\125\1\0\2\125\1\0\2\125\1\0"+
    "\3\125\1\0\21\125\1\0\17\125\1\u02ae\14\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\21\125\1\0"+
    "\10\125\1\u0240\23\125\1\0\2\125\1\0\2\125\1\0"+
    "\3\125\1\0\21\125\1\0\5\125\1\u02af\26\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\21\125\1\0"+
    "\1\125\1\u01b3\32\125\1\0\2\125\1\0\2\125\1\0"+
    "\3\125\1\0\21\125\1\0\13\125\1\u02b0\20\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\21\125\1\0"+
    "\1\u0230\33\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\10\125\1\u02b1\23\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\17\125"+
    "\1\u02b2\14\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\3\125\1\u02b3\30\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\14\125"+
    "\1\u02b4\17\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\2\125\1\u02ab\31\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\4\125"+
    "\1\u02b5\27\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\4\125\1\u0233\1\u0234\1\u0235\2\125\1\u0236\1\125"+
    "\1\375\5\125\1\0\32\125\2\u0114\1\145\2\u0114\1\146"+
    "\52\u0114\1\u02b6\12\u0114\1\145\2\u0114\1\146\41\u0114\1\u02b7"+
    "\6\u0114\1\u02b8\14\u0114\1\145\2\u0114\1\146\52\u0114\1\u01b6"+
    "\12\u0114\1\145\2\u0114\1\146\52\u0114\1\u02b9\12\u0114\1\145"+
    "\2\u0114\1\146\50\u0114\1\u02ba\14\u0114\1\145\2\u0114\1\146"+
    "\14\u0114\1\u02bb\3\u0114\1\u011b\44\u0114\1\145\2\u0114\1\146"+
    "\17\u0114\1\u02bc\45\u0114\1\145\2\u0114\1\146\14\u0114\1\u011b"+
    "\50\u0114\1\145\2\u0114\1\146\16\u0114\1\u011b\46\u0114\1\145"+
    "\2\u0114\1\146\50\u0114\1\u02bd\14\u0114\1\145\2\u0114\1\146"+
    "\41\u0114\1\u0256\23\u0114\1\145\2\u0114\1\146\36\u0114\1\u02be"+
    "\26\u0114\1\145\2\u0114\1\146\32\u0114\1\u01c8\32\u0114\1\145"+
    "\2\u0114\1\146\44\u0114\1\u02bf\20\u0114\1\145\2\u0114\1\146"+
    "\31\u0114\1\u0246\33\u0114\1\145\2\u0114\1\146\41\u0114\1\u02c0"+
    "\23\u0114\1\145\2\u0114\1\146\50\u0114\1\u02c1\14\u0114\1\145"+
    "\2\u0114\1\146\34\u0114\1\u02c2\30\u0114\1\145\2\u0114\1\146"+
    "\45\u0114\1\u02c3\17\u0114\1\145\2\u0114\1\146\33\u0114\1\u02ba"+
    "\31\u0114\1\145\2\u0114\1\146\35\u0114\1\u02c4\27\u0114\1\145"+
    "\2\u0114\1\146\13\u0114\1\u0249\1\u024a\1\u024b\2\u0114\1\u024c"+
    "\1\u0114\1\u011b\40\u0114\2\165\4\0\52\165\1\u02c5\7\165"+
    "\1\0\2\165\4\0\41\165\1\u02c6\6\165\1\u02c7\11\165"+
    "\1\0\2\165\4\0\52\165\1\u01cb\7\165\1\0\2\165"+
    "\4\0\52\165\1\u02c8\7\165\1\0\2\165\4\0\50\165"+
    "\1\u02c9\11\165\1\0\2\165\4\0\14\165\1\u02ca\3\165"+
    "\1\u0134\41\165\1\0\2\165\4\0\17\165\1\u02cb\42\165"+
    "\1\0\2\165\4\0\14\165\1\u0134\45\165\1\0\2\165"+
    "\4\0\16\165\1\u0134\43\165\1\0\2\165\4\0\50\165"+
    "\1\u02cc\11\165\1\0\2\165\4\0\41\165\1\u026c\20\165"+
    "\1\0\2\165\4\0\36\165\1\u02cd\23\165\1\0\2\165"+
    "\4\0\32\165\1\u01dd\27\165\1\0\2\165\4\0\44\165"+
    "\1\u02ce\15\165\1\0\2\165\4\0\31\165\1\u025c\30\165"+
    "\1\0\2\165\4\0\41\165\1\u02cf\20\165\1\0\2\165"+
    "\4\0\50\165\1\u02d0\11\165\1\0\2\165\4\0\34\165"+
    "\1\u02d1\25\165\1\0\2\165\4\0\45\165\1\u02d2\14\165"+
    "\1\0\2\165\4\0\33\165\1\u02c9\26\165\1\0\2\165"+
    "\4\0\35\165\1\u02d3\24\165\1\0\2\165\4\0\13\165"+
    "\1\u025f\1\u0260\1\u0261\2\165\1\u0262\1\165\1\u0134\37\165"+
    "\1\0\1\20\10\0\1\20\6\0\11\20\3\0\2\20"+
    "\1\0\20\20\1\u016b\7\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\2\20\1\u02d4\25\20"+
    "\1\0\2\20\10\0\1\20\6\0\1\20\2\u02d5\1\u02d6"+
    "\5\236\3\0\2\20\1\0\30\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\15\20\1\u02d7"+
    "\12\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\17\20\1\u02d8\10\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\14\20\1\u02d9"+
    "\13\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\1\u01fd\27\20\1\0\2\20\10\0\1\20"+
    "\6\0\11\20\3\0\2\20\1\0\1\u02da\27\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\26\20\1\u0171\1\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\10\20\1\u02db\17\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\21\20\1\236\6\20\1\0\2\20\10\0\1\20\6\0"+
    "\10\20\1\236\3\0\2\20\1\0\30\20\1\0\2\20"+
    "\10\0\1\20\6\0\6\20\1\236\2\20\3\0\2\20"+
    "\1\0\30\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\14\20\1\u02dc\13\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\4\20"+
    "\1\u0153\23\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\10\20\1\u02dd\17\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\1\236"+
    "\27\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\21\20\1\u0155\6\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\2\20\1\236"+
    "\25\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\14\20\1\u02de\13\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\3\20\1\u0153"+
    "\24\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\10\20\1\u02df\17\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\6\20\1\236"+
    "\21\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\5\20\1\u02e0\22\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\3\20\1\236"+
    "\24\20\1\0\1\20\10\53\1\0\25\53\1\0\17\53"+
    "\1\u02e1\22\53\1\0\25\53\1\0\14\53\1\335\25\53"+
    "\1\0\25\53\1\0\1\u0215\41\53\1\0\25\53\1\0"+
    "\10\53\1\u02e2\31\53\1\0\25\53\1\0\21\53\1\313"+
    "\20\53\1\0\17\53\1\313\5\53\1\0\42\53\1\0"+
    "\15\53\1\313\7\53\1\0\42\53\1\0\25\53\1\0"+
    "\14\53\1\u02e3\25\53\1\0\25\53\1\0\10\53\1\u02e4"+
    "\31\53\1\0\25\53\1\0\1\313\41\53\1\0\25\53"+
    "\1\0\2\53\1\313\37\53\1\0\25\53\1\0\14\53"+
    "\1\u02e5\25\53\1\0\25\53\1\0\10\53\1\u02e6\31\53"+
    "\1\0\25\53\1\0\6\53\1\313\33\53\1\0\25\53"+
    "\1\0\3\53\1\313\26\53\56\0\1\u02e7\65\0\1\366"+
    "\54\0\1\u022b\100\0\1\u02e8\101\0\1\344\40\0\1\344"+
    "\66\0\1\344\115\0\1\u02e9\64\0\1\u02ea\60\0\1\344"+
    "\72\0\1\344\102\0\1\u02eb\64\0\1\u02ec\66\0\1\344"+
    "\65\0\1\344\26\0\2\125\1\0\2\125\1\0\2\125"+
    "\1\0\3\125\1\0\21\125\1\0\17\125\1\u02ed\14\125"+
    "\1\0\2\125\1\0\2\125\1\0\3\125\1\0\21\125"+
    "\1\0\14\125\1\u010f\17\125\1\0\2\125\1\0\2\125"+
    "\1\0\3\125\1\0\21\125\1\0\1\u0241\33\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\21\125\1\0"+
    "\10\125\1\u02ee\23\125\1\0\2\125\1\0\2\125\1\0"+
    "\3\125\1\0\21\125\1\0\21\125\1\375\12\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\13\125\1\375"+
    "\5\125\1\0\34\125\1\0\2\125\1\0\2\125\1\0"+
    "\3\125\1\0\11\125\1\375\7\125\1\0\34\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\21\125\1\0"+
    "\14\125\1\u02ef\17\125\1\0\2\125\1\0\2\125\1\0"+
    "\3\125\1\0\21\125\1\0\10\125\1\u02f0\23\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\21\125\1\0"+
    "\1\375\33\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\2\125\1\375\31\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\14\125"+
    "\1\u02f1\17\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\10\125\1\u02f2\23\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\6\125"+
    "\1\375\25\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\3\125\1\375\26\125\2\u0114\1\145"+
    "\2\u0114\1\146\50\u0114\1\u02f3\14\u0114\1\145\2\u0114\1\146"+
    "\45\u0114\1\u012d\17\u0114\1\145\2\u0114\1\146\31\u0114\1\u0257"+
    "\33\u0114\1\145\2\u0114\1\146\41\u0114\1\u02f4\23\u0114\1\145"+
    "\2\u0114\1\146\52\u0114\1\u011b\12\u0114\1\145\2\u0114\1\146"+
    "\22\u0114\1\u011b\42\u0114\1\145\2\u0114\1\146\20\u0114\1\u011b"+
    "\44\u0114\1\145\2\u0114\1\146\45\u0114\1\u02f5\17\u0114\1\145"+
    "\2\u0114\1\146\41\u0114\1\u02f6\23\u0114\1\145\2\u0114\1\146"+
    "\31\u0114\1\u011b\33\u0114\1\145\2\u0114\1\146\33\u0114\1\u011b"+
    "\31\u0114\1\145\2\u0114\1\146\45\u0114\1\u02f7\17\u0114\1\145"+
    "\2\u0114\1\146\41\u0114\1\u02f8\23\u0114\1\145\2\u0114\1\146"+
    "\37\u0114\1\u011b\25\u0114\1\145\2\u0114\1\146\34\u0114\1\u011b"+
    "\26\u0114\2\165\4\0\50\165\1\u02f9\11\165\1\0\2\165"+
    "\4\0\45\165\1\u0146\14\165\1\0\2\165\4\0\31\165"+
    "\1\u026d\30\165\1\0\2\165\4\0\41\165\1\u02fa\20\165"+
    "\1\0\2\165\4\0\52\165\1\u0134\7\165\1\0\2\165"+
    "\4\0\22\165\1\u0134\37\165\1\0\2\165\4\0\20\165"+
    "\1\u0134\41\165\1\0\2\165\4\0\45\165\1\u02fb\14\165"+
    "\1\0\2\165\4\0\41\165\1\u02fc\20\165\1\0\2\165"+
    "\4\0\31\165\1\u0134\30\165\1\0\2\165\4\0\33\165"+
    "\1\u0134\26\165\1\0\2\165\4\0\45\165\1\u02fd\14\165"+
    "\1\0\2\165\4\0\41\165\1\u02fe\20\165\1\0\2\165"+
    "\4\0\37\165\1\u0134\22\165\1\0\2\165\4\0\34\165"+
    "\1\u0134\25\165\1\0\1\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\4\20\1\u01fa\23\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\236\3\0\2\20\1\0\30\20"+
    "\1\0\2\20\10\0\1\20\6\0\3\236\6\20\3\0"+
    "\2\20\1\0\30\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\3\20\1\u02d4\24\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\22\20\1\u02ff\5\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\22\20\1\u0155\5\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\21\20\1\u0300\6\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\15\20\1\u0301\12\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\1\u014e\27\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\4\20\1\254\23\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\21\20"+
    "\1\u0302\6\20\1\0\2\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\4\20\1\u0303\23\20\1\0\1\20"+
    "\10\53\1\0\25\53\1\0\22\53\1\u0304\17\53\1\0"+
    "\25\53\1\0\15\53\1\u0305\24\53\1\0\25\53\1\0"+
    "\1\u0306\41\53\1\0\25\53\1\0\4\53\1\317\35\53"+
    "\1\0\25\53\1\0\21\53\1\u0307\10\53\61\0\1\u0308"+
    "\63\0\1\u0309\53\0\1\u030a\74\0\1\350\105\0\1\u030b"+
    "\10\0\2\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\22\125\1\u030c\11\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\15\125"+
    "\1\u030d\16\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\1\u030e\33\125\1\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\0\21\125\1\0\4\125\1\u0101"+
    "\27\125\1\0\2\125\1\0\2\125\1\0\3\125\1\0"+
    "\21\125\1\0\21\125\1\u030f\10\125\2\u0114\1\145\2\u0114"+
    "\1\146\53\u0114\1\u0310\11\u0114\1\145\2\u0114\1\146\46\u0114"+
    "\1\u0311\16\u0114\1\145\2\u0114\1\146\31\u0114\1\u0312\33\u0114"+
    "\1\145\2\u0114\1\146\35\u0114\1\u011f\27\u0114\1\145\2\u0114"+
    "\1\146\52\u0114\1\u0313\10\u0114\2\165\4\0\53\165\1\u0314"+
    "\6\165\1\0\2\165\4\0\46\165\1\u0315\13\165\1\0"+
    "\2\165\4\0\31\165\1\u0316\30\165\1\0\2\165\4\0"+
    "\35\165\1\u0138\24\165\1\0\2\165\4\0\52\165\1\u0317"+
    "\7\165\1\0\1\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\2\20\1\u0318\25\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\4\20\1\u0319"+
    "\23\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\14\20\1\236\13\20\1\0\2\20\10\0"+
    "\1\20\6\0\11\20\3\0\2\20\1\0\26\20\1\236"+
    "\1\20\1\0\2\20\10\0\1\20\6\0\11\20\3\0"+
    "\2\20\1\0\17\20\1\u01fa\10\20\1\0\1\20\10\53"+
    "\1\0\25\53\1\0\2\53\1\u031a\37\53\1\0\25\53"+
    "\1\0\14\53\1\313\25\53\1\0\25\53\1\0\12\53"+
    "\1\313\27\53\1\0\25\53\1\0\26\53\1\313\3\53"+
    "\41\0\1\u031b\102\0\1\344\66\0\1\344\104\0\1\344"+
    "\3\0\2\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\2\125\1\u031c\31\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\14\125"+
    "\1\375\17\125\1\0\2\125\1\0\2\125\1\0\3\125"+
    "\1\0\21\125\1\0\12\125\1\375\21\125\1\0\2\125"+
    "\1\0\2\125\1\0\3\125\1\0\21\125\1\0\26\125"+
    "\1\375\3\125\2\u0114\1\145\2\u0114\1\146\33\u0114\1\u031d"+
    "\31\u0114\1\145\2\u0114\1\146\45\u0114\1\u011b\17\u0114\1\145"+
    "\2\u0114\1\146\43\u0114\1\u011b\21\u0114\1\145\2\u0114\1\146"+
    "\57\u0114\1\u011b\3\u0114\2\165\4\0\33\165\1\u031e\26\165"+
    "\1\0\2\165\4\0\45\165\1\u0134\14\165\1\0\2\165"+
    "\4\0\43\165\1\u0134\16\165\1\0\2\165\4\0\57\165"+
    "\1\u0134\2\165\1\0\1\20\10\0\1\20\6\0\11\20"+
    "\3\0\2\20\1\0\21\20\1\u031f\6\20\1\0\2\20"+
    "\10\0\1\20\6\0\11\20\3\0\2\20\1\0\2\20"+
    "\1\u0320\25\20\1\0\1\20\10\53\1\0\25\53\1\0"+
    "\21\53\1\u0321\10\53\60\0\1\u0322\10\0\2\125\1\0"+
    "\2\125\1\0\2\125\1\0\3\125\1\0\21\125\1\0"+
    "\21\125\1\u0323\10\125\2\u0114\1\145\2\u0114\1\146\52\u0114"+
    "\1\u0324\10\u0114\2\165\4\0\52\165\1\u0325\7\165\1\0"+
    "\1\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\15\20\1\254\12\20\1\0\2\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\1\u0326\27\20\1\0\1\20"+
    "\10\53\1\0\25\53\1\0\15\53\1\317\14\53\54\0"+
    "\1\350\14\0\2\125\1\0\2\125\1\0\2\125\1\0"+
    "\3\125\1\0\21\125\1\0\15\125\1\u0101\14\125\2\u0114"+
    "\1\145\2\u0114\1\146\46\u0114\1\u011f\14\u0114\2\165\4\0"+
    "\46\165\1\u0138\13\165\1\0\1\20\10\0\1\20\6\0"+
    "\11\20\3\0\2\20\1\0\12\20\1\u0327\15\20\1\0"+
    "\2\20\10\0\1\20\6\0\11\20\3\0\2\20\1\0"+
    "\12\20\1\u01fa\15\20\1\0\1\20";

  private static int [] zzUnpackTrans() {
    int [] result = new int[43206];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\6\0\1\1\2\0\2\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\30\1\1\11\16\1\1\11\17\1"+
    "\1\11\3\1\1\11\6\1\1\11\16\1\1\11\20\1"+
    "\1\11\16\1\1\11\1\1\1\11\21\1\3\11\52\1"+
    "\1\11\2\0\31\1\2\0\1\11\26\0\31\1\2\0"+
    "\1\11\2\1\2\0\1\1\26\0\31\1\1\0\47\1"+
    "\2\0\25\1\6\0\1\1\16\0\25\1\6\0\1\1"+
    "\16\0\25\1\1\0\13\1\1\11\55\1\25\0\27\1"+
    "\25\0\77\1\17\0\17\1\17\0\42\1\4\0\1\1"+
    "\1\0\6\1\4\0\1\1\1\0\17\1\4\0\4\1"+
    "\4\0\7\1\1\0\1\1\1\0\4\1\1\0\1\1"+
    "\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[807];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    public static int errorLine = -1;
    public static int errorColumn = -1;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case Comments: {
              errores.add(new Token("/**", yyline, yycolumn, "Error: llave comentario abierta"));
            }  // fall though
            case 808: break;
            default:
          {   for(Token t: tokens){
    t.print();
  }

  System.out.println("\nErrores\n");
  for(Token t: errores){
    t.print();
  }
  return 0;
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { string.append(yytext()); yybegin(indetifierError);
            }
            // fall through
          case 28: break;
          case 2:
            { 
            }
            // fall through
          case 29: break;
          case 3:
            { System.out.println(yyline);
                                  System.out.println(yycolumn);
                                  throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 30: break;
          case 4:
            { /* ignore */
            }
            // fall through
          case 31: break;
          case 5:
            { string.append(yytext()); yybegin(indetifierState);
            }
            // fall through
          case 32: break;
          case 6:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 33: break;
          case 7:
            { string.setLength(0); yybegin(Chars);
            }
            // fall through
          case 34: break;
          case 8:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 35: break;
          case 9:
            { string.setLength(0);
                                    string.append(yytext());
                                    yybegin(numberState);
            }
            // fall through
          case 36: break;
          case 10:
            { string.append( yytext() );
            }
            // fall through
          case 37: break;
          case 11:
            { yybegin(YYINITIAL);
                                   tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 38: break;
          case 12:
            { yybegin(YYINITIAL);
                                    string.append( yytext() ); 
                                    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada"));
            }
            // fall through
          case 39: break;
          case 13:
            { yybegin(YYINITIAL);
                                    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
            }
            // fall through
          case 40: break;
          case 14:
            { string.append(yytext());
            }
            // fall through
          case 41: break;
          case 15:
            { yybegin(NaturalNumbers);
                                    string.append(yytext());
            }
            // fall through
          case 42: break;
          case 16:
            { yybegin(YYINITIAL);
                                   tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
            }
            // fall through
          case 43: break;
          case 17:
            { if(errorLine == -1){
                                                                    errorLine = yyline;
                                                                    errorColumn = yycolumn;
                                                                  }
            }
            // fall through
          case 44: break;
          case 18:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 45: break;
          case 19:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "identificador"));
                   yybegin(YYINITIAL);
                   string.setLength(0);
            }
            // fall through
          case 46: break;
          case 20:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Error de identificador"));
                   yybegin(YYINITIAL);
                   string.setLength(0);
            }
            // fall through
          case 47: break;
          case 21:
            { errorLine = -1;
                                    errorColumn = -1; 
                                    yybegin(Comments);
            }
            // fall through
          case 48: break;
          case 22:
            { yybegin(lineComment);
            }
            // fall through
          case 49: break;
          case 23:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 50: break;
          case 24:
            { if(errorLine != -1){
                                      errores.add(new Token("*", errorLine, errorColumn, "Error: linea sin * <comentario bloque>"));
                                    }
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 51: break;
          case 25:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 52: break;
          case 26:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 53: break;
          case 27:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
