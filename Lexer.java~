// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

/* JFlex example: partial Java language lexer specification */
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int hexaState = 4;
  public static final int numberState = 6;
  public static final int NaturalNumbers = 8;
  public static final int Chars = 10;
  public static final int Comments = 12;
  public static final int lineComment = 14;
  public static final int errorNumeros = 16;
  public static final int stringError = 18;
  public static final int charError = 20;
  public static final int hexaStateC = 22;
  public static final int hexaStateError = 24;
  public static final int hexaStateCError = 26;
  public static final int indetifierState = 28;
  public static final int indetifierError = 30;
  public static final int decimalError = 32;
  public static final int OperadoresState = 34;
  public static final int SpaceState = 36;
  public static final int selectNumber = 38;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 
    15, 15,  8,  8, 16, 16, 17, 17
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\3\u1f00\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\3\u1f00\1\u3e00\1\u3f00\4\u1f00"+
    "\1\u4000\11\u1f00\3\u0100\1\u4100\1\u4200\13\u1f00\4\u0100\1\u4300"+
    "\63\u1f00\2\u0100\1\u4400\4\u1f00\1\u4500\100\u1f00\1\u4600\40\u1f00"+
    "\1\u4700\1\u4800\1\u1f00\1\u4900\1\u4a00\1\u4b00\1\u4c00\26\u1f00"+
    "\1\u4d00\21\u1f00\246\u0100\1\u4e00\20\u0100\1\u4f00\1\u5000\77\u1f00"+
    "\2\u0100\1\u5000\u0b05\u1f00\1\u5100\1\u5200\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\5\1\6\1\7\1\3\1\10\1\11\1\12\1\13"+
    "\2\11\1\14\1\6\1\11\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\27\1\11\1\31\1\32\1\33\1\34\1\11\1\3"+
    "\6\35\24\10\1\11\1\3\2\11\1\10\1\3\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\10\1\47\1\50\1\51\1\52\1\53\1\54\1\10"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\2\11\41\0\2\3\4\10\4\3"+
    "\1\10\2\3\1\0\7\3\1\10\4\3\1\10\5\3"+
    "\27\10\1\3\37\10\1\3\u01ca\10\4\3\14\10\16\3"+
    "\5\10\7\3\1\10\1\3\1\10\21\3\160\0\5\10"+
    "\1\3\2\10\2\3\4\10\10\3\1\10\1\3\3\10"+
    "\1\3\1\10\1\3\24\10\1\3\123\10\1\3\213\10"+
    "\1\3\5\0\2\3\236\10\11\3\46\10\2\3\1\10"+
    "\7\3\47\10\7\3\1\10\1\3\55\0\1\3\1\0"+
    "\1\3\2\0\1\3\2\0\1\3\1\0\10\3\33\10"+
    "\5\3\3\10\15\3\5\0\6\3\1\10\4\3\13\0"+
    "\5\3\53\10\37\0\4\3\2\10\1\0\143\10\1\3"+
    "\1\10\10\0\1\3\6\0\2\10\2\0\1\3\4\0"+
    "\2\10\12\0\3\10\2\3\1\10\17\3\1\0\1\10"+
    "\1\0\36\10\33\0\2\3\131\10\13\0\1\10\16\3"+
    "\12\0\41\10\11\0\2\10\4\3\1\10\5\3\26\10"+
    "\4\0\1\10\11\0\1\10\3\0\1\10\5\0\22\3"+
    "\31\10\3\0\104\3\1\10\1\3\13\10\67\3\33\0"+
    "\1\3\4\0\66\10\3\0\1\10\22\0\1\10\7\0"+
    "\12\10\2\0\2\3\12\0\1\3\7\10\1\3\7\10"+
    "\1\3\3\0\1\3\10\10\2\3\2\10\2\3\26\10"+
    "\1\3\7\10\1\3\1\10\3\3\4\10\2\3\1\0"+
    "\1\10\7\0\2\3\2\0\2\3\3\0\1\10\10\3"+
    "\1\0\4\3\2\10\1\3\3\10\2\0\2\3\12\0"+
    "\4\10\7\3\1\10\5\3\3\0\1\3\6\10\4\3"+
    "\2\10\2\3\26\10\1\3\7\10\1\3\2\10\1\3"+
    "\2\10\1\3\2\10\2\3\1\0\1\3\5\0\4\3"+
    "\2\0\2\3\3\0\3\3\1\0\7\3\4\10\1\3"+
    "\1\10\7\3\14\0\3\10\1\0\13\3\3\0\1\3"+
    "\11\10\1\3\3\10\1\3\26\10\1\3\7\10\1\3"+
    "\2\10\1\3\5\10\2\3\1\0\1\10\10\0\1\3"+
    "\3\0\1\3\3\0\2\3\1\10\17\3\2\10\2\0"+
    "\2\3\12\0\1\3\1\10\17\3\3\0\1\3\10\10"+
    "\2\3\2\10\2\3\26\10\1\3\7\10\1\3\2\10"+
    "\1\3\5\10\2\3\1\0\1\10\7\0\2\3\2\0"+
    "\2\3\3\0\10\3\2\0\4\3\2\10\1\3\3\10"+
    "\2\0\2\3\12\0\1\3\1\10\20\3\1\0\1\10"+
    "\1\3\6\10\3\3\3\10\1\3\4\10\3\3\2\10"+
    "\1\3\1\10\1\3\2\10\3\3\2\10\3\3\3\10"+
    "\3\3\14\10\4\3\5\0\3\3\3\0\1\3\4\0"+
    "\2\3\1\10\6\3\1\0\16\3\12\0\11\3\1\10"+
    "\7\3\3\0\1\3\10\10\1\3\3\10\1\3\27\10"+
    "\1\3\12\10\1\3\5\10\3\3\1\10\7\0\1\3"+
    "\3\0\1\3\4\0\7\3\2\0\1\3\2\10\6\3"+
    "\2\10\2\0\2\3\12\0\22\3\2\0\1\3\10\10"+
    "\1\3\3\10\1\3\27\10\1\3\12\10\1\3\5\10"+
    "\2\3\1\0\1\10\7\0\1\3\3\0\1\3\4\0"+
    "\7\3\2\0\7\3\1\10\1\3\2\10\2\0\2\3"+
    "\12\0\1\3\2\10\17\3\2\0\1\3\10\10\1\3"+
    "\3\10\1\3\51\10\2\3\1\10\7\0\1\3\3\0"+
    "\1\3\4\0\1\10\10\3\1\0\10\3\2\10\2\0"+
    "\2\3\12\0\12\3\6\10\2\3\2\0\1\3\22\10"+
    "\3\3\30\10\1\3\11\10\1\3\1\10\2\3\7\10"+
    "\3\3\1\0\4\3\6\0\1\3\1\0\1\3\10\0"+
    "\22\3\2\0\15\3\60\10\1\0\2\10\7\0\4\3"+
    "\10\10\10\0\1\3\12\0\47\3\2\10\1\3\1\10"+
    "\2\3\2\10\1\3\1\10\2\3\1\10\6\3\4\10"+
    "\1\3\7\10\1\3\3\10\1\3\1\10\1\3\1\10"+
    "\2\3\2\10\1\3\4\10\1\0\2\10\6\0\1\3"+
    "\2\0\1\10\2\3\5\10\1\3\1\10\1\3\6\0"+
    "\2\3\12\0\2\3\4\10\40\3\1\10\27\3\2\0"+
    "\6\3\12\0\13\3\1\0\1\3\1\0\1\3\1\0"+
    "\4\3\2\0\10\10\1\3\44\10\4\3\24\0\1\3"+
    "\2\0\5\10\13\0\1\3\44\0\11\3\1\0\71\3"+
    "\53\10\24\0\1\10\12\0\6\3\6\10\4\0\4\10"+
    "\3\0\1\10\3\0\2\10\7\0\3\10\4\0\15\10"+
    "\14\0\1\10\17\0\2\3\46\10\1\3\1\10\5\3"+
    "\1\10\2\3\53\10\1\3\115\10\1\3\4\10\2\3"+
    "\7\10\1\3\1\10\1\3\4\10\2\3\51\10\1\3"+
    "\4\10\2\3\41\10\1\3\4\10\2\3\7\10\1\3"+
    "\1\10\1\3\4\10\2\3\17\10\1\3\71\10\1\3"+
    "\4\10\2\3\103\10\2\3\3\0\40\3\20\10\20\3"+
    "\125\10\14\3\u016c\10\2\3\21\10\1\3\32\10\5\3"+
    "\113\10\3\3\3\10\17\3\15\10\1\3\4\10\3\0"+
    "\13\3\22\10\3\0\13\3\22\10\2\0\14\3\15\10"+
    "\1\3\3\10\1\3\2\0\14\3\64\10\40\0\3\3"+
    "\1\10\3\3\2\10\1\0\2\3\12\0\41\3\3\0"+
    "\2\3\12\0\6\3\130\10\10\3\51\10\1\0\1\10"+
    "\5\3\106\10\12\3\35\10\3\3\14\0\4\3\14\0"+
    "\12\3\12\0\36\10\2\3\5\10\13\3\54\10\4\3"+
    "\21\0\7\10\2\0\6\3\12\0\46\3\27\10\5\0"+
    "\4\3\65\10\12\0\1\3\35\0\2\3\13\0\6\3"+
    "\12\0\15\3\1\10\130\3\5\0\57\10\21\0\7\10"+
    "\4\3\12\0\21\3\11\0\14\3\3\0\36\10\15\0"+
    "\2\10\12\0\54\10\16\0\14\3\44\10\24\0\10\3"+
    "\12\0\3\3\3\10\12\0\44\10\122\3\3\0\1\3"+
    "\25\0\4\10\1\0\4\10\3\0\2\10\11\3\300\10"+
    "\47\0\25\3\4\0\26\10\2\3\6\10\2\3\46\10"+
    "\2\3\6\10\2\3\10\10\1\3\1\10\1\3\1\10"+
    "\1\3\1\10\1\3\37\10\2\3\65\10\1\3\7\10"+
    "\1\3\1\10\3\3\3\10\1\3\7\10\3\3\4\10"+
    "\2\3\6\10\4\3\15\10\5\3\3\10\1\3\7\10"+
    "\16\3\5\0\32\3\5\0\20\3\2\10\23\3\1\10"+
    "\13\3\5\0\5\3\6\0\1\3\1\10\15\3\1\10"+
    "\20\3\15\10\3\3\33\10\25\3\15\0\4\3\1\0"+
    "\3\3\14\0\21\3\1\10\4\3\1\10\2\3\12\10"+
    "\1\3\1\10\3\3\5\10\6\3\1\10\1\3\1\10"+
    "\1\3\1\10\1\3\4\10\1\3\13\10\2\3\4\10"+
    "\5\3\5\10\4\3\1\10\21\3\51\10\u0177\3\57\10"+
    "\1\3\57\10\1\3\205\10\6\3\4\10\3\0\2\10"+
    "\14\3\46\10\1\3\1\10\5\3\1\10\2\3\70\10"+
    "\7\3\1\10\17\3\1\0\27\10\11\3\7\10\1\3"+
    "\7\10\1\3\7\10\1\3\7\10\1\3\7\10\1\3"+
    "\7\10\1\3\7\10\1\3\7\10\1\3\40\0\57\3"+
    "\1\10\325\3\3\10\31\3\11\10\6\0\1\3\5\10"+
    "\2\3\5\10\4\3\126\10\2\3\2\0\2\3\3\10"+
    "\1\3\132\10\1\3\4\10\5\3\51\10\3\3\136\10"+
    "\21\3\33\10\65\3\306\10\112\3\315\10\63\3\215\10"+
    "\103\3\56\10\2\3\15\10\3\3\20\10\12\0\2\10"+
    "\24\3\57\10\1\0\4\3\12\0\1\3\31\10\7\3"+
    "\1\0\120\10\2\0\45\3\11\10\2\3\147\10\2\3"+
    "\4\10\1\3\4\10\14\3\13\10\115\3\12\10\1\0"+
    "\3\10\1\0\4\10\1\0\27\10\5\0\20\3\1\10"+
    "\7\3\64\10\14\3\2\0\62\10\21\0\13\3\12\0"+
    "\6\3\22\0\6\10\3\3\1\10\4\3\12\0\34\10"+
    "\10\0\2\3\27\10\15\0\14\3\35\10\3\3\4\0"+
    "\57\10\16\0\16\3\1\10\12\0\46\3\51\10\16\0"+
    "\11\3\3\10\1\0\10\10\2\0\2\3\12\0\6\3"+
    "\27\10\3\3\1\10\1\0\4\3\60\10\1\0\1\10"+
    "\3\0\2\10\2\0\5\10\2\0\1\10\1\0\1\10"+
    "\30\3\3\10\2\3\13\10\5\0\2\3\3\10\2\0"+
    "\12\3\6\10\2\3\6\10\2\3\6\10\11\3\7\10"+
    "\1\3\7\10\221\3\43\10\10\0\1\3\2\0\2\3"+
    "\12\0\6\3\244\10\14\3\27\10\4\3\61\10\4\3"+
    "\156\10\2\3\152\10\46\3\7\10\14\3\5\10\5\3"+
    "\1\10\1\0\12\10\1\3\15\10\1\3\5\10\1\3"+
    "\1\10\1\3\2\10\1\3\2\10\1\3\154\10\41\3"+
    "\153\10\22\3\100\10\2\3\66\10\50\3\15\10\3\3"+
    "\20\0\20\3\7\0\14\3\2\10\30\3\3\10\31\3"+
    "\1\10\6\3\5\10\1\3\207\10\2\3\1\0\4\3"+
    "\1\10\13\3\12\0\7\3\32\10\4\3\1\10\1\3"+
    "\32\10\13\3\131\10\3\3\6\10\2\3\6\10\2\3"+
    "\6\10\2\3\3\10\3\3\2\10\3\3\2\10\22\3"+
    "\3\0\4\3\14\10\1\3\32\10\1\3\23\10\1\3"+
    "\2\10\1\3\17\10\2\3\16\10\42\3\173\10\105\3"+
    "\65\10\210\3\1\0\202\3\35\10\3\3\61\10\57\3"+
    "\37\10\21\3\33\10\65\3\36\10\2\3\44\10\4\3"+
    "\10\10\1\3\5\10\52\3\236\10\2\3\12\0\126\3"+
    "\6\10\2\3\1\10\1\3\54\10\1\3\2\10\3\3"+
    "\1\10\2\3\27\10\252\3\26\10\12\3\32\10\106\3"+
    "\70\10\6\3\2\10\100\3\1\10\3\0\1\3\2\0"+
    "\5\3\4\0\4\10\1\3\3\10\1\3\33\10\4\3"+
    "\3\0\4\3\1\0\40\3\35\10\203\3\66\10\12\3"+
    "\26\10\12\3\23\10\215\3\111\10\267\3\3\0\65\10"+
    "\17\0\37\3\12\0\20\3\3\0\55\10\13\0\2\3"+
    "\1\0\22\3\31\10\7\3\12\0\6\3\3\0\44\10"+
    "\16\0\1\3\12\0\100\3\3\0\60\10\16\0\4\10"+
    "\13\3\12\0\246\3\53\10\15\0\10\3\12\0\66\3"+
    "\157\10\221\3\143\10\235\3\57\10\321\3\71\10\307\3"+
    "\105\10\13\3\1\10\56\0\20\3\4\0\15\10\140\3"+
    "\2\10\u0163\3\5\0\3\3\26\0\2\3\7\0\36\3"+
    "\4\0\224\3\3\0\273\3\125\10\1\3\107\10\1\3"+
    "\2\10\2\3\1\10\2\3\2\10\2\3\4\10\1\3"+
    "\14\10\1\3\1\10\1\3\7\10\1\3\101\10\1\3"+
    "\4\10\2\3\10\10\1\3\7\10\1\3\34\10\1\3"+
    "\4\10\1\3\5\10\1\3\1\10\3\3\7\10\1\3"+
    "\u0154\10\2\3\31\10\1\3\31\10\1\3\37\10\1\3"+
    "\31\10\1\3\37\10\1\3\31\10\1\3\37\10\1\3"+
    "\31\10\1\3\37\10\1\3\31\10\1\3\10\10\2\3"+
    "\62\0\4\10\1\3\33\10\1\3\2\10\1\3\1\10"+
    "\2\3\1\10\1\3\12\10\1\3\4\10\1\3\1\10"+
    "\1\3\1\10\6\3\1\10\4\3\1\10\1\3\1\10"+
    "\1\3\1\10\1\3\3\10\1\3\2\10\1\3\1\10"+
    "\2\3\1\10\1\3\1\10\1\3\1\10\1\3\1\10"+
    "\1\3\1\10\1\3\2\10\1\3\1\10\2\3\4\10"+
    "\1\3\7\10\1\3\4\10\1\3\4\10\1\3\1\10"+
    "\1\3\12\10\1\3\21\10\5\3\3\10\1\3\5\10"+
    "\1\3\21\10\104\3\327\10\51\3\65\10\13\3\336\10"+
    "\343\3\1\0\36\3\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21248];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\1\1\2\2\1\3\1\4\1\5\2\3\1\6"+
    "\4\3\2\7\2\3\21\5\1\3\1\10\2\11\1\12"+
    "\1\13\15\10\1\14\2\15\1\16\1\17\1\10\1\20"+
    "\5\10\11\14\1\21\2\22\3\23\1\21\2\24\2\23"+
    "\2\21\1\25\13\21\1\26\2\22\1\24\2\22\16\26"+
    "\2\27\1\30\1\31\1\1\2\32\16\1\1\33\2\34"+
    "\15\33\15\1\16\33\12\35\1\36\1\37\1\40\1\24"+
    "\3\40\1\41\2\40\15\24\1\40\2\42\15\24\1\43"+
    "\1\44\1\40\1\45\1\46\1\47\1\1\5\50\11\47"+
    "\3\0\1\51\1\52\1\53\1\54\1\5\1\55\47\5"+
    "\2\10\1\55\26\10\1\0\1\10\1\55\2\0\1\10"+
    "\27\0\1\33\1\56\2\0\1\55\26\0\2\33\1\55"+
    "\26\33\2\24\1\55\26\24\1\57\1\52\1\47\1\50"+
    "\1\55\2\47\1\50\23\47\1\54\1\0\1\60\16\5"+
    "\1\55\2\5\1\55\23\5\1\61\1\5\6\10\1\55"+
    "\16\10\6\0\1\55\24\0\1\55\16\0\6\33\1\55"+
    "\16\33\6\24\1\55\16\24\6\47\1\55\16\47\1\0"+
    "\3\5\1\55\1\62\6\5\1\63\1\64\17\5\1\62"+
    "\6\5\1\55\25\10\1\55\25\0\1\55\25\0\1\55"+
    "\25\33\1\55\25\24\1\55\25\47\1\55\2\5\1\55"+
    "\26\5\17\10\36\0\17\33\17\24\17\47\1\5\2\55"+
    "\7\5\1\55\2\5\4\10\1\55\1\10\4\0\1\55"+
    "\5\0\1\55\1\0\4\33\1\55\1\33\4\24\1\55"+
    "\1\24\4\47\1\55\1\47\5\5\4\10\10\0\4\33"+
    "\4\24\4\47\2\5\1\10\2\0\1\33\1\24\1\47"+
    "\2\5\1\10\2\0\1\33\1\24\1\47\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[1025];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u03f0\0\u0428\0\u0460\0\u03f0\0\u0498"+
    "\0\u03f0\0\u04d0\0\u03f0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8"+
    "\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8"+
    "\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968"+
    "\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u03f0\0\u0af0"+
    "\0\u03f0\0\u03f0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40"+
    "\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u03f0"+
    "\0\u03f0\0\u0e00\0\u03f0\0\u03f0\0\u0e38\0\u03f0\0\u0e70\0\u0ea8"+
    "\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068"+
    "\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u03f0\0\u03f0\0\u1180\0\u11b8"+
    "\0\u03f0\0\u11f0\0\u11b8\0\u03f0\0\u1228\0\u1260\0\u1298\0\u12d0"+
    "\0\u1308\0\u1340\0\u1378\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068"+
    "\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u13b0\0\u03f0\0\u13e8\0\u1420"+
    "\0\u13e8\0\u1458\0\u1490\0\u12d0\0\u1308\0\u1340\0\u1378\0\u0f88"+
    "\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148"+
    "\0\u14c8\0\u03f0\0\u1500\0\u03f0\0\u03f0\0\u1538\0\u03f0\0\u1570"+
    "\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730"+
    "\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u03f0\0\u03f0"+
    "\0\u18b8\0\u12d0\0\u1308\0\u1340\0\u1378\0\u0f88\0\u0fc0\0\u0ff8"+
    "\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u12d0\0\u1308"+
    "\0\u1340\0\u1378\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0"+
    "\0\u10d8\0\u1110\0\u1148\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0"+
    "\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90"+
    "\0\u1bc8\0\u03f0\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0"+
    "\0\u10d8\0\u1110\0\u1148\0\u03f0\0\u1c00\0\u1c38\0\u1c70\0\u03f0"+
    "\0\u1ca8\0\u1ce0\0\u03f0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8"+
    "\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8"+
    "\0\u1ff0\0\u2028\0\u2060\0\u03f0\0\u2098\0\u12d0\0\u1308\0\u1340"+
    "\0\u1378\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8"+
    "\0\u1110\0\u1148\0\u03f0\0\u03f0\0\u20d0\0\u03f0\0\u03f0\0\u2108"+
    "\0\u1228\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290"+
    "\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450"+
    "\0\u2488\0\u24c0\0\u03f0\0\u03f0\0\u24f8\0\u05e8\0\u2530\0\u0498"+
    "\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0"+
    "\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0"+
    "\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70"+
    "\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30"+
    "\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0"+
    "\0\u2e28\0\u0ab8\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78"+
    "\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138"+
    "\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8"+
    "\0\u3330\0\u3368\0\u03f0\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480"+
    "\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640"+
    "\0\u3678\0\u36b0\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800"+
    "\0\u3838\0\u3870\0\u38a8\0\u1538\0\u38e0\0\u3918\0\u38e0\0\u3950"+
    "\0\u3988\0\u1538\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8"+
    "\0\u3b10\0\u3b48\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60\0\u3c98"+
    "\0\u3cd0\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20\0\u3e58"+
    "\0\u3e90\0\u3ec8\0\u18f0\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0"+
    "\0\u4018\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u41a0"+
    "\0\u41d8\0\u4210\0\u4248\0\u4280\0\u42b8\0\u42f0\0\u4328\0\u4360"+
    "\0\u4398\0\u43d0\0\u4408\0\u1c70\0\u4440\0\u4478\0\u44b0\0\u44e8"+
    "\0\u4520\0\u4558\0\u4590\0\u45c8\0\u4600\0\u4638\0\u4670\0\u46a8"+
    "\0\u46e0\0\u4718\0\u4750\0\u4788\0\u47c0\0\u47f8\0\u4830\0\u4868"+
    "\0\u48a0\0\u48d8\0\u2098\0\u4910\0\u4948\0\u4980\0\u2108\0\u49b8"+
    "\0\u49f0\0\u4a28\0\u4a60\0\u4a98\0\u4ad0\0\u4b08\0\u4b40\0\u4b78"+
    "\0\u4bb0\0\u4be8\0\u4c20\0\u4c58\0\u4c90\0\u4cc8\0\u4d00\0\u4d38"+
    "\0\u4d70\0\u4da8\0\u4de0\0\u4e18\0\u4e50\0\u2488\0\u4e88\0\u4ec0"+
    "\0\u4ef8\0\u4f30\0\u4f68\0\u4fa0\0\u4fd8\0\u5010\0\u5048\0\u5080"+
    "\0\u50b8\0\u50f0\0\u5128\0\u5160\0\u5198\0\u51d0\0\u5208\0\u5240"+
    "\0\u5278\0\u52b0\0\u52e8\0\u5320\0\u5358\0\u5390\0\u53c8\0\u5400"+
    "\0\u5438\0\u5470\0\u54a8\0\u54e0\0\u5518\0\u5550\0\u5588\0\u55c0"+
    "\0\u55f8\0\u5630\0\u5668\0\u56a0\0\u56d8\0\u0498\0\u5710\0\u5748"+
    "\0\u5780\0\u57b8\0\u57f0\0\u5828\0\u5860\0\u5898\0\u58d0\0\u5908"+
    "\0\u5940\0\u5978\0\u59b0\0\u59e8\0\u5a20\0\u5a58\0\u5a90\0\u5ac8"+
    "\0\u5b00\0\u5b38\0\u5b70\0\u5ba8\0\u5be0\0\u5c18\0\u5c50\0\u5c88"+
    "\0\u5cc0\0\u5cf8\0\u5d30\0\u5d68\0\u5da0\0\u5dd8\0\u5e10\0\u5e48"+
    "\0\u5e80\0\u5eb8\0\u5ef0\0\u5f28\0\u5f60\0\u5f98\0\u5fd0\0\u6008"+
    "\0\u6040\0\u6078\0\u60b0\0\u60e8\0\u6120\0\u6158\0\u6190\0\u61c8"+
    "\0\u6200\0\u6238\0\u6270\0\u62a8\0\u62e0\0\u6318\0\u6350\0\u6388"+
    "\0\u63c0\0\u63f8\0\u6430\0\u6468\0\u64a0\0\u64d8\0\u6510\0\u6548"+
    "\0\u6580\0\u65b8\0\u65f0\0\u6628\0\u6660\0\u6698\0\u66d0\0\u6708"+
    "\0\u6740\0\u6778\0\u67b0\0\u67e8\0\u6820\0\u6858\0\u6890\0\u68c8"+
    "\0\u6900\0\u6938\0\u6970\0\u69a8\0\u69e0\0\u6a18\0\u6a50\0\u6a88"+
    "\0\u6ac0\0\u6af8\0\u6b30\0\u6b68\0\u6ba0\0\u6bd8\0\u6c10\0\u6c48"+
    "\0\u6c80\0\u6cb8\0\u6cf0\0\u6d28\0\u6d60\0\u6d98\0\u6dd0\0\u6e08"+
    "\0\u6e40\0\u6e78\0\u6eb0\0\u6ee8\0\u6f20\0\u6f58\0\u6f90\0\u6fc8"+
    "\0\u7000\0\u7038\0\u7070\0\u70a8\0\u70e0\0\u7118\0\u7150\0\u7188"+
    "\0\u71c0\0\u71f8\0\u7230\0\u7268\0\u72a0\0\u4ec0\0\u72d8\0\u7310"+
    "\0\u7348\0\u7380\0\u73b8\0\u73f0\0\u7428\0\u7460\0\u7498\0\u74d0"+
    "\0\u7508\0\u03f0\0\u03f0\0\u7540\0\u7578\0\u75b0\0\u75e8\0\u7620"+
    "\0\u7658\0\u7690\0\u76c8\0\u7700\0\u7738\0\u7770\0\u77a8\0\u77e0"+
    "\0\u7818\0\u7850\0\u0498\0\u7888\0\u78c0\0\u78f8\0\u7930\0\u7968"+
    "\0\u79a0\0\u79d8\0\u7a10\0\u7a48\0\u7a80\0\u7ab8\0\u7af0\0\u7b28"+
    "\0\u7b60\0\u7b98\0\u7bd0\0\u7c08\0\u7c40\0\u7c78\0\u7cb0\0\u7ce8"+
    "\0\u7d20\0\u7d58\0\u7d90\0\u7dc8\0\u7e00\0\u7e38\0\u7e70\0\u7ea8"+
    "\0\u7ee0\0\u7f18\0\u7f50\0\u7f88\0\u7fc0\0\u7ff8\0\u8030\0\u8068"+
    "\0\u80a0\0\u80d8\0\u8110\0\u8148\0\u8180\0\u81b8\0\u81f0\0\u8228"+
    "\0\u8260\0\u8298\0\u82d0\0\u8308\0\u8340\0\u8378\0\u83b0\0\u83e8"+
    "\0\u8420\0\u8458\0\u8490\0\u84c8\0\u8500\0\u8538\0\u8570\0\u85a8"+
    "\0\u85e0\0\u8618\0\u8650\0\u8688\0\u86c0\0\u86f8\0\u8730\0\u8768"+
    "\0\u87a0\0\u87d8\0\u8810\0\u8848\0\u8880\0\u88b8\0\u88f0\0\u8928"+
    "\0\u8960\0\u8998\0\u89d0\0\u8a08\0\u8a40\0\u8a78\0\u8ab0\0\u8ae8"+
    "\0\u8b20\0\u8b58\0\u8b90\0\u8bc8\0\u8c00\0\u8c38\0\u8c70\0\u8ca8"+
    "\0\u8ce0\0\u8d18\0\u8d50\0\u8d88\0\u8dc0\0\u8df8\0\u8e30\0\u8e68"+
    "\0\u8ea0\0\u8ed8\0\u8f10\0\u8f48\0\u8f80\0\u8fb8\0\u8ff0\0\u9028"+
    "\0\u9060\0\u9098\0\u90d0\0\u9108\0\u9140\0\u9178\0\u91b0\0\u91e8"+
    "\0\u9220\0\u9258\0\u9290\0\u92c8\0\u9300\0\u9338\0\u9370\0\u93a8"+
    "\0\u93e0\0\u9418\0\u9450\0\u9488\0\u94c0\0\u94f8\0\u9530\0\u9568"+
    "\0\u95a0\0\u95d8\0\u9610\0\u9648\0\u9680\0\u96b8\0\u96f0\0\u9728"+
    "\0\u9760\0\u9798\0\u97d0\0\u9808\0\u9840\0\u9878\0\u98b0\0\u98e8"+
    "\0\u9920\0\u9958\0\u9990\0\u99c8\0\u9a00\0\u9a38\0\u9a70\0\u9aa8"+
    "\0\u9ae0\0\u9b18\0\u9b50\0\u9b88\0\u9bc0\0\u9bf8\0\u9c30\0\u9c68"+
    "\0\u9ca0\0\u9cd8\0\u9d10\0\u9d48\0\u9d80\0\u9db8\0\u9df0\0\u9e28"+
    "\0\u9e60\0\u9e98\0\u9ed0\0\u9f08\0\u9f40\0\u9f78\0\u9fb0\0\u9fe8"+
    "\0\ua020\0\ua058\0\ua090\0\ua0c8\0\ua100\0\ua138\0\ua170\0\ua1a8"+
    "\0\ua1e0\0\ua218\0\ua250\0\ua288\0\ua2c0\0\ua2f8\0\ua330\0\ua368"+
    "\0\ua3a0\0\ua3d8\0\ua410\0\ua448\0\ua480\0\ua4b8\0\ua4f0\0\ua528"+
    "\0\ua560\0\ua598\0\ua5d0\0\ua608\0\ua640\0\ua678\0\ua6b0\0\ua6e8"+
    "\0\ua720\0\ua758\0\ua790\0\ua7c8\0\ua800\0\ua838\0\ua870\0\ua8a8"+
    "\0\ua8e0\0\ua918\0\ua950\0\ua988\0\ua9c0\0\ua9f8\0\uaa30\0\uaa68"+
    "\0\uaaa0\0\uaad8\0\uab10\0\uab48\0\uab80\0\uabb8\0\uabf0\0\uac28"+
    "\0\uac60\0\uac98\0\uacd0\0\uad08\0\uad40\0\uad78\0\uadb0\0\uade8"+
    "\0\uae20\0\uae58\0\uae90\0\uaec8\0\uaf00\0\uaf38\0\uaf70\0\uafa8"+
    "\0\uafe0\0\ub018\0\ub050\0\ub088\0\ub0c0\0\ub0f8\0\ub130\0\ub168"+
    "\0\ub1a0\0\ub1d8\0\ub210\0\u55c0\0\ub248\0\ub280\0\ub2b8\0\ub2f0"+
    "\0\ub328\0\ub360\0\u5ac8\0\ub398\0\ub3d0\0\ub408\0\ub440\0\ub478"+
    "\0\u5f60\0\ub4b0\0\ub4e8\0\ub520\0\ub558\0\ub590\0\u63f8\0\ub5c8"+
    "\0\ub600\0\ub638\0\ub670\0\ub6a8\0\u6890\0\ub6e0\0\ub718\0\ub750"+
    "\0\ub788\0\ub7c0\0\u6d28\0\ub7f8\0\ub830\0\ub868\0\ub8a0\0\ub8d8"+
    "\0\u71c0\0\ub910\0\ub948\0\ub980\0\ub9b8\0\ub9f0\0\uba28\0\uba60"+
    "\0\uba98\0\ubad0\0\ubb08\0\ubb40\0\ubb78\0\ubbb0\0\ubbe8\0\ubc20"+
    "\0\ubc58\0\ubc90\0\ubcc8\0\ubd00\0\ubd38\0\ubd70\0\ubda8\0\ubde0"+
    "\0\ube18\0\ube50\0\ube88\0\ubec0\0\ubef8\0\ubf30\0\ubf68\0\ubfa0"+
    "\0\ubfd8\0\uc010\0\uc048\0\uc080\0\uc0b8\0\uc0f0\0\uc128\0\uc160"+
    "\0\uc198\0\uc1d0\0\uc208\0\uc240\0\uc278\0\uc2b0\0\uc2e8\0\uc320"+
    "\0\uc358";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1025];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\2\24\1\23\1\25\1\24\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\10\41\1\31\1\42\1\26\1\43\1\30\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\30\1\52\1\53\2\30"+
    "\1\54\2\30\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\30\1\64\1\30\1\31\1\65\2\66\1\67"+
    "\1\66\1\70\2\66\1\71\3\66\1\72\24\66\1\73"+
    "\1\74\1\75\1\76\2\66\1\77\2\66\1\100\2\66"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\5\66"+
    "\1\110\2\111\1\110\1\112\1\111\1\110\1\113\3\110"+
    "\1\114\4\110\11\115\1\116\3\110\3\117\1\120\1\121"+
    "\1\122\1\123\2\110\1\124\2\110\1\125\2\110\1\126"+
    "\1\127\1\130\1\131\1\132\1\133\1\134\5\110\1\135"+
    "\2\136\1\135\1\137\1\136\1\140\2\135\1\141\1\142"+
    "\1\135\1\140\1\143\1\144\1\140\11\145\1\141\1\146"+
    "\1\140\1\147\3\135\1\150\1\151\1\152\1\153\2\135"+
    "\1\154\2\135\1\155\2\135\1\156\1\157\1\160\1\161"+
    "\1\162\1\163\1\164\3\135\1\141\1\165\1\166\2\136"+
    "\1\166\1\137\1\136\1\167\2\166\1\136\1\170\1\166"+
    "\1\167\1\171\1\166\1\167\11\145\1\136\1\172\1\167"+
    "\1\173\3\166\1\174\1\175\1\176\1\177\2\166\1\200"+
    "\2\166\1\201\2\166\1\202\1\203\1\204\1\205\1\206"+
    "\1\207\1\210\3\166\1\136\1\211\2\66\1\212\1\66"+
    "\1\213\2\66\1\214\3\66\1\215\24\66\1\73\1\74"+
    "\1\75\1\76\2\66\1\77\2\66\1\100\2\66\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\5\66\2\216"+
    "\1\217\1\216\1\220\7\216\1\221\23\216\1\222\1\223"+
    "\1\224\1\225\2\216\1\226\2\216\1\227\2\216\1\230"+
    "\1\231\1\232\1\233\1\234\1\235\1\236\5\216\2\237"+
    "\1\240\1\237\1\241\33\237\1\242\1\243\1\244\1\245"+
    "\2\237\1\246\2\237\1\247\2\237\1\250\1\251\1\252"+
    "\1\253\1\254\1\255\1\256\5\237\40\23\1\257\1\260"+
    "\1\261\1\262\2\23\1\263\2\23\1\264\2\23\1\265"+
    "\1\266\1\267\1\270\1\271\1\272\1\273\5\23\7\274"+
    "\1\240\3\274\1\240\24\274\1\275\1\276\1\277\1\300"+
    "\2\274\1\301\2\274\1\302\2\274\1\303\1\304\1\305"+
    "\1\306\1\307\1\310\1\311\5\274\1\312\2\111\1\312"+
    "\1\112\1\111\1\312\1\114\3\312\1\113\4\312\11\115"+
    "\1\116\3\312\3\117\1\120\1\121\1\122\1\123\2\312"+
    "\1\313\2\312\1\314\2\312\1\315\1\316\1\317\1\320"+
    "\1\321\1\322\1\323\5\312\7\237\1\240\30\237\1\242"+
    "\1\243\1\244\1\245\2\237\1\246\2\237\1\247\2\237"+
    "\1\250\1\251\1\252\1\253\1\254\1\255\1\256\20\237"+
    "\1\240\24\237\1\242\1\243\1\244\1\245\2\237\1\246"+
    "\2\237\1\247\2\237\1\250\1\251\1\252\1\253\1\254"+
    "\1\255\1\256\7\237\1\324\2\237\1\325\1\326\1\237"+
    "\1\327\1\330\1\331\1\237\1\332\1\326\1\330\1\326"+
    "\11\237\1\333\1\334\1\326\1\335\3\327\1\336\1\337"+
    "\1\340\1\341\2\327\1\342\2\327\1\343\2\327\1\344"+
    "\1\345\1\346\1\347\1\350\1\351\1\352\3\327\1\330"+
    "\1\353\2\144\1\354\14\144\1\355\11\144\1\354\6\144"+
    "\1\356\1\357\1\360\1\361\2\144\1\362\2\144\1\363"+
    "\2\144\1\364\1\365\1\366\1\367\1\370\1\371\1\372"+
    "\7\144\1\373\35\144\1\356\1\357\1\360\1\361\2\144"+
    "\1\362\2\144\1\363\2\144\1\364\1\365\1\366\1\367"+
    "\1\370\1\371\1\372\5\144\2\237\1\374\2\237\1\325"+
    "\1\326\1\237\1\327\1\330\1\331\1\237\1\332\1\326"+
    "\1\330\1\375\11\237\1\376\1\334\1\326\1\335\3\327"+
    "\1\336\1\337\1\340\1\341\2\327\1\342\2\327\1\343"+
    "\2\327\1\344\1\345\1\346\1\347\1\350\1\351\1\352"+
    "\3\327\1\376\1\353\2\23\1\377\5\23\1\u0100\5\23"+
    "\1\u0101\1\23\11\145\4\23\3\u0102\1\u0103\1\u0104\1\u0105"+
    "\1\u0106\2\u0100\1\u0107\2\u0100\1\u0108\2\u0100\1\u0109\1\u010a"+
    "\1\u010b\1\u010c\1\u010d\1\u010e\1\u010f\3\u0100\2\23\72\0"+
    "\1\24\120\0\1\31\34\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\31\30\14\0\1\31\71\0\1\31\16\0"+
    "\1\31\51\0\1\u0110\2\0\1\u0111\12\0\1\31\52\0"+
    "\1\u0112\1\0\11\41\53\0\1\u0113\2\0\1\u0114\13\0"+
    "\1\31\44\0\1\u0115\7\0\11\u0116\4\0\31\u0115\12\0"+
    "\1\u0115\7\0\11\41\4\0\31\u0115\34\0\2\31\67\0"+
    "\2\31\33\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\4\30\1\u0117\14\30\1\u0118\7\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\1\30\1\u0119\14\30\1\u011a"+
    "\1\30\1\u011b\6\30\1\u011c\1\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\1\30\1\u011d\14\30\1\u011e"+
    "\12\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\1\30\1\u011f\3\30\1\u0120\10\30\1\u0118\12\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\13\30\1\u0121"+
    "\1\30\1\u0122\4\30\1\u0123\6\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\1\30\1\u0124\7\30\1\u0125"+
    "\4\30\1\u0126\1\30\1\u0127\2\30\1\u0128\5\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\5\30\1\u0129"+
    "\10\30\1\u012a\12\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\6\30\1\u0118\5\30\1\u012b\1\u012c\13\30"+
    "\2\0\1\30\7\0\1\30\7\0\11\30\4\0\1\30"+
    "\1\u012d\7\30\1\u012e\4\30\1\u012f\12\30\2\0\1\30"+
    "\7\0\1\30\7\0\11\30\4\0\1\30\1\u0130\16\30"+
    "\1\u0131\2\30\1\u0132\5\30\2\0\1\30\7\0\1\30"+
    "\7\0\11\30\4\0\5\30\1\u0133\23\30\2\0\1\30"+
    "\7\0\1\30\7\0\11\30\4\0\5\30\1\u0134\10\30"+
    "\1\u0135\3\30\1\u0136\5\30\1\u0137\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\10\30\1\u0138\7\30\1\u0139"+
    "\10\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\6\30\1\u013a\2\30\1\u013b\17\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\1\30\1\u0126\7\30\1\u013c"+
    "\17\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\5\30\1\u013d\2\30\1\u013e\20\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\5\30\1\u013f\23\30\71\0"+
    "\1\31\2\66\1\0\1\66\1\0\2\66\1\0\3\66"+
    "\1\0\54\66\2\0\1\67\65\0\2\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\37\66\1\u0140\16\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\26\66"+
    "\1\u0141\10\66\1\u0142\16\66\1\0\1\66\1\0\2\66"+
    "\1\0\3\66\1\0\34\66\1\u0143\1\66\1\u0144\17\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\22\66"+
    "\1\u0145\14\66\1\u0146\1\66\1\u0147\2\66\1\u0148\11\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\27\66"+
    "\1\u0142\5\66\1\u0149\1\u014a\17\66\1\0\1\66\1\0"+
    "\2\66\1\0\3\66\1\0\22\66\1\u014b\14\66\1\u014c"+
    "\16\66\1\0\1\66\1\0\2\66\1\0\3\66\1\0"+
    "\22\66\1\u014d\16\66\1\u014e\2\66\1\u014f\11\66\1\0"+
    "\1\66\1\0\2\66\1\0\3\66\1\0\26\66\1\u0150"+
    "\27\66\1\0\1\66\1\0\2\66\1\0\3\66\1\0"+
    "\37\66\1\u0151\3\66\1\u0152\12\66\1\0\1\66\1\0"+
    "\2\66\1\0\3\66\1\0\31\66\1\u0153\7\66\1\u0154"+
    "\14\66\1\0\1\66\1\0\2\66\1\0\3\66\1\0"+
    "\27\66\1\u0155\2\66\1\u0156\23\66\1\0\1\66\1\0"+
    "\2\66\1\0\3\66\1\0\22\66\1\u0146\7\66\1\u0157"+
    "\23\66\1\0\1\66\1\0\2\66\1\0\3\66\1\0"+
    "\31\66\1\u0158\22\66\2\0\1\111\105\0\11\115\74\0"+
    "\7\117\61\0\7\117\7\0\1\u0159\51\0\5\117\1\u015a"+
    "\1\117\7\0\1\u015b\51\0\7\117\4\0\1\u015c\1\0"+
    "\1\u015d\52\0\1\117\1\u015e\5\117\7\0\1\u015f\1\0"+
    "\1\u0160\2\0\1\u0161\52\0\1\u015b\5\0\1\u0162\1\u0163"+
    "\53\0\1\u0164\14\0\1\u0165\52\0\1\u0166\16\0\1\u0167"+
    "\2\0\1\u0168\51\0\1\u0169\100\0\1\u016a\3\0\1\u016b"+
    "\55\0\1\u016c\7\0\1\u016d\55\0\1\u016e\2\0\1\u016f"+
    "\57\0\1\u015f\7\0\1\u0170\66\0\1\u0171\24\0\1\136"+
    "\120\0\1\141\46\0\1\141\75\0\11\145\71\0\2\141"+
    "\67\0\2\141\106\0\1\u0159\56\0\1\u0172\10\0\1\u015b"+
    "\64\0\1\u015c\1\0\1\u015d\53\0\1\u0173\14\0\1\u015f"+
    "\1\0\1\u0160\2\0\1\u0161\76\0\1\141\33\0\1\136"+
    "\46\0\1\136\107\0\2\136\67\0\2\136\122\0\1\136"+
    "\2\0\1\212\65\0\2\u0174\1\217\1\u0174\1\220\63\u0174"+
    "\2\0\1\217\65\0\2\u0175\1\237\1\u0175\1\u0176\12\u0175"+
    "\1\u0177\50\u0175\2\u0174\1\217\1\u0174\1\220\46\u0174\1\u0178"+
    "\16\u0174\1\217\1\u0174\1\220\35\u0174\1\u0179\10\u0174\1\u017a"+
    "\16\u0174\1\217\1\u0174\1\220\43\u0174\1\u017b\1\u0174\1\u017c"+
    "\17\u0174\1\217\1\u0174\1\220\31\u0174\1\u017d\14\u0174\1\u017e"+
    "\1\u0174\1\u017f\2\u0174\1\u0180\11\u0174\1\217\1\u0174\1\220"+
    "\36\u0174\1\u017a\5\u0174\1\u0181\1\u0182\17\u0174\1\217\1\u0174"+
    "\1\220\31\u0174\1\u0183\14\u0174\1\u0184\16\u0174\1\217\1\u0174"+
    "\1\220\31\u0174\1\u0185\16\u0174\1\u0186\2\u0174\1\u0187\11\u0174"+
    "\1\217\1\u0174\1\220\35\u0174\1\u0188\27\u0174\1\217\1\u0174"+
    "\1\220\46\u0174\1\u0189\3\u0174\1\u018a\12\u0174\1\217\1\u0174"+
    "\1\220\40\u0174\1\u018b\7\u0174\1\u018c\14\u0174\1\217\1\u0174"+
    "\1\220\36\u0174\1\u018d\2\u0174\1\u018e\23\u0174\1\217\1\u0174"+
    "\1\220\31\u0174\1\u017e\7\u0174\1\u018f\23\u0174\1\217\1\u0174"+
    "\1\220\40\u0174\1\u0190\22\u0174\2\0\1\240\65\0\7\274"+
    "\1\0\3\274\1\0\63\274\1\0\3\274\1\0\37\274"+
    "\1\u0191\23\274\1\0\3\274\1\0\26\274\1\u0192\10\274"+
    "\1\u0193\23\274\1\0\3\274\1\0\34\274\1\u0194\1\274"+
    "\1\u0195\24\274\1\0\3\274\1\0\22\274\1\u0196\14\274"+
    "\1\u0197\1\274\1\u0198\2\274\1\u0199\16\274\1\0\3\274"+
    "\1\0\27\274\1\u0193\5\274\1\u019a\1\u019b\24\274\1\0"+
    "\3\274\1\0\22\274\1\u019c\14\274\1\u019d\23\274\1\0"+
    "\3\274\1\0\22\274\1\u019e\16\274\1\u019f\2\274\1\u01a0"+
    "\16\274\1\0\3\274\1\0\26\274\1\u01a1\34\274\1\0"+
    "\3\274\1\0\37\274\1\u01a2\3\274\1\u01a3\17\274\1\0"+
    "\3\274\1\0\31\274\1\u01a4\7\274\1\u01a5\21\274\1\0"+
    "\3\274\1\0\27\274\1\u01a6\2\274\1\u01a7\30\274\1\0"+
    "\3\274\1\0\22\274\1\u0197\7\274\1\u01a8\30\274\1\0"+
    "\3\274\1\0\31\274\1\u01a9\22\274\5\0\1\325\115\0"+
    "\1\330\34\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\31\327\14\0\1\330\71\0\1\330\16\0\1\330\66\0"+
    "\2\330\67\0\2\330\33\0\1\327\7\0\1\327\7\0"+
    "\11\327\4\0\16\327\1\u01aa\12\327\2\0\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\5\327\1\u01ab\10\327\1\u01ac"+
    "\12\327\2\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\13\327\1\u01ad\1\327\1\u01ae\13\327\2\0\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\1\327\1\u01af\14\327\1\u01b0"+
    "\1\327\1\u01b1\2\327\1\u01b2\5\327\2\0\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\6\327\1\u01ac\5\327\1\u01b3"+
    "\1\u01b4\13\327\2\0\1\327\7\0\1\327\7\0\11\327"+
    "\4\0\1\327\1\u01b5\14\327\1\u01b6\12\327\2\0\1\327"+
    "\7\0\1\327\7\0\11\327\4\0\1\327\1\u01b7\16\327"+
    "\1\u01b8\2\327\1\u01b9\5\327\2\0\1\327\7\0\1\327"+
    "\7\0\11\327\4\0\5\327\1\u01ba\23\327\2\0\1\327"+
    "\7\0\1\327\7\0\11\327\4\0\16\327\1\u01bb\3\327"+
    "\1\u01bc\6\327\2\0\1\327\7\0\1\327\7\0\11\327"+
    "\4\0\10\327\1\u01bd\7\327\1\u01be\10\327\2\0\1\327"+
    "\7\0\1\327\7\0\11\327\4\0\6\327\1\u01bf\2\327"+
    "\1\u01c0\17\327\2\0\1\327\7\0\1\327\7\0\11\327"+
    "\4\0\1\327\1\u01b0\7\327\1\u01c1\17\327\2\0\1\327"+
    "\7\0\1\327\7\0\11\327\4\0\10\327\1\u01c2\20\327"+
    "\71\0\1\330\17\0\1\u01c3\67\0\1\u01c4\13\0\1\330"+
    "\34\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\31\u0100"+
    "\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\7\u0102"+
    "\22\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\7\u0102\7\u0100\1\u01c5\12\u0100\2\0\1\u0100\7\0\1\u0100"+
    "\7\0\11\u0100\4\0\5\u0102\1\u01c6\1\u0102\7\u0100\1\u01c7"+
    "\12\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\7\u0102\4\u0100\1\u01c8\1\u0100\1\u01c9\13\u0100\2\0\1\u0100"+
    "\7\0\1\u0100\7\0\11\u0100\4\0\1\u0102\1\u01ca\5\u0102"+
    "\7\u0100\1\u01cb\1\u0100\1\u01cc\2\u0100\1\u01cd\5\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\6\u0100\1\u01c7"+
    "\5\u0100\1\u01ce\1\u01cf\13\u0100\2\0\1\u0100\7\0\1\u0100"+
    "\7\0\11\u0100\4\0\1\u0100\1\u01d0\14\u0100\1\u01d1\12\u0100"+
    "\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\1\u0100"+
    "\1\u01d2\16\u0100\1\u01d3\2\u0100\1\u01d4\5\u0100\2\0\1\u0100"+
    "\7\0\1\u0100\7\0\11\u0100\4\0\5\u0100\1\u01d5\23\u0100"+
    "\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\16\u0100"+
    "\1\u01d6\3\u0100\1\u01d7\6\u0100\2\0\1\u0100\7\0\1\u0100"+
    "\7\0\11\u0100\4\0\10\u0100\1\u01d8\7\u0100\1\u01d9\10\u0100"+
    "\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\6\u0100"+
    "\1\u01da\2\u0100\1\u01db\17\u0100\2\0\1\u0100\7\0\1\u0100"+
    "\7\0\11\u0100\4\0\1\u0100\1\u01cb\7\u0100\1\u01dc\17\u0100"+
    "\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\10\u0100"+
    "\1\u01dd\20\u0100\17\0\1\u0110\2\0\1\u0111\67\0\11\u01de"+
    "\54\0\1\u01df\1\u0112\1\0\11\u01e0\37\0\1\u0115\7\0"+
    "\1\u0115\7\0\11\u0115\4\0\31\u0115\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\4\30\1\u01e1\24\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\13\30\1\u01e2"+
    "\15\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\16\30\1\u01e3\12\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\5\30\1\u01e4\23\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\22\30\1\u01e5\6\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\13\30\1\u01e6"+
    "\15\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\15\30\1\u01e7\13\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\27\30\1\u01e8\1\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\13\30\1\u01e9\15\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\21\30\1\u01ea"+
    "\7\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\23\30\1\u01eb\5\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\10\30\1\u01ec\20\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\13\30\1\u0121\15\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\15\30\1\u01ed"+
    "\13\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\20\30\1\u0118\10\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\16\30\1\u01eb\12\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\15\30\1\u01ee\13\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\26\30\1\u01ef"+
    "\2\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\23\30\1\u01f0\5\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\17\30\1\u01f1\11\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\22\30\1\u01f2\6\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\17\30\1\u01f3"+
    "\11\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\15\30\1\u01f4\13\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\4\30\1\u01f5\24\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\27\30\1\u01f6\1\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\1\30\1\u01f7"+
    "\7\30\1\u01f8\17\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\2\30\1\u01f9\26\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\22\30\1\u01fa\6\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\3\30\1\u01fb"+
    "\11\30\1\u01fc\13\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\13\30\1\u01fd\15\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\20\30\1\u01fe\10\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\1\30\1\u01ff"+
    "\27\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\11\30\1\u0200\17\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\1\30\1\u0201\21\30\1\u01ea\5\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\11\30\1\u0202"+
    "\17\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\15\30\1\u0203\13\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\5\30\1\u0204\23\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\5\30\1\u0205\3\30\1\u0206"+
    "\17\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\11\30\1\u0207\17\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\1\30\1\u01f0\27\30\2\0\2\66\1\0"+
    "\1\66\1\0\2\66\1\0\3\66\1\0\36\66\1\u0208"+
    "\17\66\1\0\1\66\1\0\2\66\1\0\3\66\1\0"+
    "\34\66\1\u0209\21\66\1\0\1\66\1\0\2\66\1\0"+
    "\3\66\1\0\42\66\1\u020a\13\66\1\0\1\66\1\0"+
    "\2\66\1\0\3\66\1\0\44\66\1\u020b\11\66\1\0"+
    "\1\66\1\0\2\66\1\0\3\66\1\0\34\66\1\u0143"+
    "\21\66\1\0\1\66\1\0\2\66\1\0\3\66\1\0"+
    "\41\66\1\u0142\14\66\1\0\1\66\1\0\2\66\1\0"+
    "\3\66\1\0\37\66\1\u020b\16\66\1\0\1\66\1\0"+
    "\2\66\1\0\3\66\1\0\36\66\1\u020c\17\66\1\0"+
    "\1\66\1\0\2\66\1\0\3\66\1\0\40\66\1\u020d"+
    "\15\66\1\0\1\66\1\0\2\66\1\0\3\66\1\0"+
    "\43\66\1\u020e\12\66\1\0\1\66\1\0\2\66\1\0"+
    "\3\66\1\0\40\66\1\u020f\15\66\1\0\1\66\1\0"+
    "\2\66\1\0\3\66\1\0\25\66\1\u0210\30\66\1\0"+
    "\1\66\1\0\2\66\1\0\3\66\1\0\50\66\1\u0211"+
    "\5\66\1\0\1\66\1\0\2\66\1\0\3\66\1\0"+
    "\22\66\1\u0212\7\66\1\u0213\23\66\1\0\1\66\1\0"+
    "\2\66\1\0\3\66\1\0\23\66\1\u0214\32\66\1\0"+
    "\1\66\1\0\2\66\1\0\3\66\1\0\43\66\1\u0215"+
    "\12\66\1\0\1\66\1\0\2\66\1\0\3\66\1\0"+
    "\34\66\1\u0216\21\66\1\0\1\66\1\0\2\66\1\0"+
    "\3\66\1\0\41\66\1\u0217\14\66\1\0\1\66\1\0"+
    "\2\66\1\0\3\66\1\0\32\66\1\u0218\23\66\1\0"+
    "\1\66\1\0\2\66\1\0\3\66\1\0\44\66\1\u020a"+
    "\11\66\1\0\1\66\1\0\2\66\1\0\3\66\1\0"+
    "\32\66\1\u0219\23\66\1\0\1\66\1\0\2\66\1\0"+
    "\3\66\1\0\36\66\1\u021a\17\66\1\0\1\66\1\0"+
    "\2\66\1\0\3\66\1\0\26\66\1\u021b\27\66\1\0"+
    "\1\66\1\0\2\66\1\0\3\66\1\0\32\66\1\u021c"+
    "\21\66\52\0\1\u021d\52\0\7\117\4\0\1\u021e\75\0"+
    "\1\u021f\71\0\1\u0220\44\0\7\117\4\0\1\u015c\74\0"+
    "\1\u015b\65\0\1\u0220\66\0\1\u0221\71\0\1\u0222\72\0"+
    "\1\u0223\64\0\1\u0224\54\0\1\u0225\112\0\1\u0226\41\0"+
    "\1\u0227\7\0\1\u0228\60\0\1\u0229\107\0\1\u022a\60\0"+
    "\1\u022b\74\0\1\u022c\60\0\1\u022d\101\0\1\u021f\55\0"+
    "\1\u022e\73\0\1\u022f\57\0\1\u0230\73\0\1\u0231\71\0"+
    "\1\u021e\67\0\1\u015c\17\0\2\u0175\1\237\1\u0175\1\u0176"+
    "\63\u0175\2\0\1\237\65\0\2\u0174\1\217\1\u0174\1\220"+
    "\45\u0174\1\u0232\17\u0174\1\217\1\u0174\1\220\43\u0174\1\u0233"+
    "\21\u0174\1\217\1\u0174\1\220\51\u0174\1\u0234\13\u0174\1\217"+
    "\1\u0174\1\220\53\u0174\1\u0235\11\u0174\1\217\1\u0174\1\220"+
    "\43\u0174\1\u017b\21\u0174\1\217\1\u0174\1\220\50\u0174\1\u017a"+
    "\14\u0174\1\217\1\u0174\1\220\46\u0174\1\u0235\16\u0174\1\217"+
    "\1\u0174\1\220\45\u0174\1\u0236\17\u0174\1\217\1\u0174\1\220"+
    "\47\u0174\1\u0237\15\u0174\1\217\1\u0174\1\220\52\u0174\1\u0238"+
    "\12\u0174\1\217\1\u0174\1\220\47\u0174\1\u0239\15\u0174\1\217"+
    "\1\u0174\1\220\34\u0174\1\u023a\30\u0174\1\217\1\u0174\1\220"+
    "\57\u0174\1\u023b\5\u0174\1\217\1\u0174\1\220\31\u0174\1\u023c"+
    "\7\u0174\1\u023d\23\u0174\1\217\1\u0174\1\220\32\u0174\1\u023e"+
    "\32\u0174\1\217\1\u0174\1\220\52\u0174\1\u023f\12\u0174\1\217"+
    "\1\u0174\1\220\43\u0174\1\u0240\21\u0174\1\217\1\u0174\1\220"+
    "\50\u0174\1\u0241\14\u0174\1\217\1\u0174\1\220\41\u0174\1\u0242"+
    "\23\u0174\1\217\1\u0174\1\220\53\u0174\1\u0234\11\u0174\1\217"+
    "\1\u0174\1\220\41\u0174\1\u0243\23\u0174\1\217\1\u0174\1\220"+
    "\45\u0174\1\u0244\17\u0174\1\217\1\u0174\1\220\35\u0174\1\u0245"+
    "\27\u0174\1\217\1\u0174\1\220\41\u0174\1\u0246\21\u0174\7\274"+
    "\1\0\3\274\1\0\36\274\1\u0247\24\274\1\0\3\274"+
    "\1\0\34\274\1\u0248\26\274\1\0\3\274\1\0\42\274"+
    "\1\u0249\20\274\1\0\3\274\1\0\44\274\1\u024a\16\274"+
    "\1\0\3\274\1\0\34\274\1\u0194\26\274\1\0\3\274"+
    "\1\0\41\274\1\u0193\21\274\1\0\3\274\1\0\37\274"+
    "\1\u024a\23\274\1\0\3\274\1\0\36\274\1\u024b\24\274"+
    "\1\0\3\274\1\0\40\274\1\u024c\22\274\1\0\3\274"+
    "\1\0\43\274\1\u024d\17\274\1\0\3\274\1\0\40\274"+
    "\1\u024e\22\274\1\0\3\274\1\0\25\274\1\u024f\35\274"+
    "\1\0\3\274\1\0\50\274\1\u0250\12\274\1\0\3\274"+
    "\1\0\22\274\1\u0251\7\274\1\u0252\30\274\1\0\3\274"+
    "\1\0\23\274\1\u0253\37\274\1\0\3\274\1\0\43\274"+
    "\1\u0254\17\274\1\0\3\274\1\0\34\274\1\u0255\26\274"+
    "\1\0\3\274\1\0\41\274\1\u0256\21\274\1\0\3\274"+
    "\1\0\32\274\1\u0257\30\274\1\0\3\274\1\0\44\274"+
    "\1\u0249\16\274\1\0\3\274\1\0\32\274\1\u0258\30\274"+
    "\1\0\3\274\1\0\36\274\1\u0259\24\274\1\0\3\274"+
    "\1\0\26\274\1\u025a\34\274\1\0\3\274\1\0\32\274"+
    "\1\u025b\21\274\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\15\327\1\u025c\13\327\2\0\1\327\7\0\1\327\7\0"+
    "\11\327\4\0\13\327\1\u025d\15\327\2\0\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\21\327\1\u025e\7\327\2\0"+
    "\1\327\7\0\1\327\7\0\11\327\4\0\23\327\1\u025f"+
    "\5\327\2\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\13\327\1\u01ad\15\327\2\0\1\327\7\0\1\327\7\0"+
    "\11\327\4\0\20\327\1\u01ac\10\327\2\0\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\16\327\1\u025f\12\327\2\0"+
    "\1\327\7\0\1\327\7\0\11\327\4\0\15\327\1\u0260"+
    "\13\327\2\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\17\327\1\u0261\11\327\2\0\1\327\7\0\1\327\7\0"+
    "\11\327\4\0\22\327\1\u0262\6\327\2\0\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\17\327\1\u0263\11\327\2\0"+
    "\1\327\7\0\1\327\7\0\11\327\4\0\4\327\1\u0264"+
    "\24\327\2\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\27\327\1\u0265\1\327\2\0\1\327\7\0\1\327\7\0"+
    "\11\327\4\0\1\327\1\u0266\7\327\1\u0267\17\327\2\0"+
    "\1\327\7\0\1\327\7\0\11\327\4\0\2\327\1\u0268"+
    "\26\327\2\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\22\327\1\u0269\6\327\2\0\1\327\7\0\1\327\7\0"+
    "\11\327\4\0\13\327\1\u026a\15\327\2\0\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\20\327\1\u026b\10\327\2\0"+
    "\1\327\7\0\1\327\7\0\11\327\4\0\11\327\1\u026c"+
    "\17\327\2\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\23\327\1\u025e\5\327\2\0\1\327\7\0\1\327\7\0"+
    "\11\327\4\0\11\327\1\u026d\17\327\2\0\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\15\327\1\u026e\13\327\2\0"+
    "\1\327\7\0\1\327\7\0\11\327\4\0\5\327\1\u026f"+
    "\23\327\2\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\11\327\1\u0270\17\327\21\0\1\u01c4\50\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\15\u0100\1\u0271\13\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\7\u0102\4\u0100"+
    "\1\u0272\15\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100"+
    "\4\0\21\u0100\1\u0273\7\u0100\2\0\1\u0100\7\0\1\u0100"+
    "\7\0\11\u0100\4\0\23\u0100\1\u0274\5\u0100\2\0\1\u0100"+
    "\7\0\1\u0100\7\0\11\u0100\4\0\7\u0102\4\u0100\1\u01c8"+
    "\15\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\20\u0100\1\u01c7\10\u0100\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\16\u0100\1\u0274\12\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\15\u0100\1\u0275\13\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\17\u0100\1\u0276"+
    "\11\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\22\u0100\1\u0277\6\u0100\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\17\u0100\1\u0278\11\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\4\u0100\1\u0279\24\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\27\u0100\1\u027a"+
    "\1\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\1\u0100\1\u027b\7\u0100\1\u027c\17\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\2\u0100\1\u027d\26\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\22\u0100\1\u027e"+
    "\6\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\13\u0100\1\u027f\15\u0100\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\20\u0100\1\u0280\10\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\11\u0100\1\u0281\17\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\23\u0100\1\u0273"+
    "\5\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\11\u0100\1\u0282\17\u0100\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\15\u0100\1\u0283\13\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\5\u0100\1\u0284\23\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\11\u0100\1\u0285"+
    "\17\u0100\17\0\1\u01df\1\u0286\1\0\11\u01e0\57\0\11\u01e0"+
    "\37\0\1\30\7\0\1\30\7\0\11\30\4\0\20\30"+
    "\1\u0287\10\30\2\0\1\30\7\0\1\30\7\0\11\30"+
    "\4\0\1\30\1\u0288\27\30\2\0\1\30\7\0\1\30"+
    "\7\0\11\30\4\0\13\30\1\u0118\15\30\2\0\1\30"+
    "\7\0\1\30\7\0\11\30\4\0\1\30\1\u0289\27\30"+
    "\2\0\1\30\7\0\1\30\7\0\11\30\4\0\5\30"+
    "\1\u028a\23\30\2\0\1\30\7\0\1\30\7\0\11\30"+
    "\4\0\13\30\1\u028b\15\30\2\0\1\30\7\0\1\30"+
    "\7\0\11\30\4\0\21\30\1\u028c\1\u028d\6\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\21\30\1\u0206"+
    "\7\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\5\30\1\u028e\23\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\5\30\1\u0118\23\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\14\30\1\u0118\14\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\5\30\1\u028f"+
    "\23\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\15\30\1\u0290\13\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\3\30\1\u0291\25\30\2\0\1\30\6\0"+
    "\1\u0292\1\30\2\0\1\u0293\4\0\11\30\4\0\31\30"+
    "\2\0\1\30\7\0\1\30\7\0\11\30\4\0\20\30"+
    "\1\u01e8\10\30\2\0\1\30\7\0\1\30\7\0\11\30"+
    "\4\0\16\30\1\u0294\12\30\2\0\1\30\7\0\1\30"+
    "\7\0\1\30\1\u0295\1\u0296\1\u0297\2\30\1\u0298\1\30"+
    "\1\u0118\4\0\5\30\1\u0299\23\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\17\30\1\u029a\11\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\23\30\1\u029b"+
    "\5\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\11\30\1\u029c\17\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\1\30\1\u029d\27\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\7\30\1\u029e\21\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\24\30\1\u029f"+
    "\4\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\13\30\1\u02a0\15\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\23\30\1\u02a1\5\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\16\30\1\u02a2\12\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\4\30\1\u02a3"+
    "\24\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\11\30\1\u02a4\17\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\11\30\1\u02a5\11\30\1\u02a6\5\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\2\30\1\u02a7"+
    "\26\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\21\30\1\u0118\7\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\15\30\1\u02a8\13\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\26\30\1\u02a9\2\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\22\30\1\u02aa"+
    "\6\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\25\30\1\u0118\3\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\12\30\1\u01e8\16\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\13\30\1\u01ea\15\30\2\0"+
    "\2\66\1\0\1\66\1\0\2\66\1\0\3\66\1\0"+
    "\42\66\1\u02ab\1\u02ac\12\66\1\0\1\66\1\0\2\66"+
    "\1\0\3\66\1\0\26\66\1\u02ad\27\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\26\66\1\u0142\27\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\35\66"+
    "\1\u0142\20\66\1\0\1\66\1\0\2\66\1\0\3\66"+
    "\1\0\24\66\1\u02ae\31\66\1\0\1\66\1\0\2\66"+
    "\1\0\3\66\1\0\37\66\1\u02af\16\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\5\66\1\u02b0\1\u02b1"+
    "\1\u02b2\2\66\1\u02b3\1\66\1\u0142\11\66\1\u02b4\27\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\40\66"+
    "\1\u02b5\15\66\1\0\1\66\1\0\2\66\1\0\3\66"+
    "\1\0\32\66\1\u02b6\23\66\1\0\1\66\1\0\2\66"+
    "\1\0\3\66\1\0\22\66\1\u02b7\33\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\30\66\1\u02b8\25\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\45\66"+
    "\1\u02b9\10\66\1\0\1\66\1\0\2\66\1\0\3\66"+
    "\1\0\34\66\1\u02ba\21\66\1\0\1\66\1\0\2\66"+
    "\1\0\3\66\1\0\44\66\1\u02bb\11\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\32\66\1\u02bc\23\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\32\66"+
    "\1\u02bd\11\66\1\u02be\11\66\1\0\1\66\1\0\2\66"+
    "\1\0\3\66\1\0\42\66\1\u0142\13\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\47\66\1\u02bf\6\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\43\66"+
    "\1\u02c0\12\66\1\0\1\66\1\0\2\66\1\0\3\66"+
    "\1\0\46\66\1\u0142\7\66\1\0\1\66\1\0\2\66"+
    "\1\0\3\66\1\0\34\66\1\u020a\17\66\56\0\1\u02c1"+
    "\1\u02c2\52\0\1\u02c3\67\0\1\u015b\76\0\1\u015b\56\0"+
    "\1\u02c4\102\0\1\u02c5\35\0\1\u02c6\1\u02c7\1\u02c8\2\0"+
    "\1\u02c9\1\0\1\u015b\11\0\1\u02ca\101\0\1\u02cb\61\0"+
    "\1\u02cc\57\0\1\u02cd\75\0\1\u02ce\104\0\1\u02cf\56\0"+
    "\1\u02d0\77\0\1\u02d1\55\0\1\u02d2\67\0\1\u02d3\11\0"+
    "\1\u02d4\65\0\1\u015b\74\0\1\u02d5\63\0\1\u02d6\72\0"+
    "\1\u015b\55\0\1\u021f\17\0\2\u0174\1\217\1\u0174\1\220"+
    "\51\u0174\1\u02d7\1\u02d8\12\u0174\1\217\1\u0174\1\220\35\u0174"+
    "\1\u02d9\27\u0174\1\217\1\u0174\1\220\35\u0174\1\u017a\27\u0174"+
    "\1\217\1\u0174\1\220\44\u0174\1\u017a\20\u0174\1\217\1\u0174"+
    "\1\220\33\u0174\1\u02da\31\u0174\1\217\1\u0174\1\220\46\u0174"+
    "\1\u02db\16\u0174\1\217\1\u0174\1\220\14\u0174\1\u02dc\1\u02dd"+
    "\1\u02de\2\u0174\1\u02df\1\u0174\1\u017a\11\u0174\1\u02e0\27\u0174"+
    "\1\217\1\u0174\1\220\47\u0174\1\u02e1\15\u0174\1\217\1\u0174"+
    "\1\220\41\u0174\1\u02e2\23\u0174\1\217\1\u0174\1\220\31\u0174"+
    "\1\u02e3\33\u0174\1\217\1\u0174\1\220\37\u0174\1\u02e4\25\u0174"+
    "\1\217\1\u0174\1\220\54\u0174\1\u02e5\10\u0174\1\217\1\u0174"+
    "\1\220\43\u0174\1\u02e6\21\u0174\1\217\1\u0174\1\220\53\u0174"+
    "\1\u02e7\11\u0174\1\217\1\u0174\1\220\41\u0174\1\u02e8\23\u0174"+
    "\1\217\1\u0174\1\220\41\u0174\1\u02e9\11\u0174\1\u02ea\11\u0174"+
    "\1\217\1\u0174\1\220\51\u0174\1\u017a\13\u0174\1\217\1\u0174"+
    "\1\220\56\u0174\1\u02eb\6\u0174\1\217\1\u0174\1\220\52\u0174"+
    "\1\u02ec\12\u0174\1\217\1\u0174\1\220\55\u0174\1\u017a\7\u0174"+
    "\1\217\1\u0174\1\220\43\u0174\1\u0234\17\u0174\7\274\1\0"+
    "\3\274\1\0\42\274\1\u02ed\1\u02ee\17\274\1\0\3\274"+
    "\1\0\26\274\1\u02ef\34\274\1\0\3\274\1\0\26\274"+
    "\1\u0193\34\274\1\0\3\274\1\0\35\274\1\u0193\25\274"+
    "\1\0\3\274\1\0\24\274\1\u02f0\36\274\1\0\3\274"+
    "\1\0\37\274\1\u02f1\23\274\1\0\3\274\1\0\5\274"+
    "\1\u02f2\1\u02f3\1\u02f4\2\274\1\u02f5\1\274\1\u0193\11\274"+
    "\1\u02f6\34\274\1\0\3\274\1\0\40\274\1\u02f7\22\274"+
    "\1\0\3\274\1\0\32\274\1\u02f8\30\274\1\0\3\274"+
    "\1\0\22\274\1\u02f9\40\274\1\0\3\274\1\0\30\274"+
    "\1\u02fa\32\274\1\0\3\274\1\0\45\274\1\u02fb\15\274"+
    "\1\0\3\274\1\0\34\274\1\u02fc\26\274\1\0\3\274"+
    "\1\0\44\274\1\u02fd\16\274\1\0\3\274\1\0\32\274"+
    "\1\u02fe\30\274\1\0\3\274\1\0\32\274\1\u02ff\11\274"+
    "\1\u0300\16\274\1\0\3\274\1\0\42\274\1\u0193\20\274"+
    "\1\0\3\274\1\0\47\274\1\u0301\13\274\1\0\3\274"+
    "\1\0\43\274\1\u0302\17\274\1\0\3\274\1\0\46\274"+
    "\1\u0193\14\274\1\0\3\274\1\0\34\274\1\u0249\17\274"+
    "\1\327\7\0\1\327\7\0\11\327\4\0\21\327\1\u0303"+
    "\1\u0304\6\327\2\0\1\327\7\0\1\327\7\0\11\327"+
    "\4\0\5\327\1\u0305\23\327\2\0\1\327\7\0\1\327"+
    "\7\0\11\327\4\0\5\327\1\u01ac\23\327\2\0\1\327"+
    "\7\0\1\327\7\0\11\327\4\0\14\327\1\u01ac\14\327"+
    "\2\0\1\327\7\0\1\327\7\0\11\327\4\0\3\327"+
    "\1\u0306\25\327\2\0\1\327\7\0\1\327\7\0\11\327"+
    "\4\0\16\327\1\u0307\12\327\2\0\1\327\7\0\1\327"+
    "\7\0\1\327\1\u0308\1\u0309\1\u030a\2\327\1\u030b\1\327"+
    "\1\u01ac\4\0\5\327\1\u030c\23\327\2\0\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\17\327\1\u030d\11\327\2\0"+
    "\1\327\7\0\1\327\7\0\11\327\4\0\11\327\1\u030e"+
    "\17\327\2\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\1\327\1\u030f\27\327\2\0\1\327\7\0\1\327\7\0"+
    "\11\327\4\0\7\327\1\u0310\21\327\2\0\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\24\327\1\u0311\4\327\2\0"+
    "\1\327\7\0\1\327\7\0\11\327\4\0\13\327\1\u0312"+
    "\15\327\2\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\23\327\1\u0313\5\327\2\0\1\327\7\0\1\327\7\0"+
    "\11\327\4\0\11\327\1\u0314\17\327\2\0\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\11\327\1\u0315\11\327\1\u0316"+
    "\5\327\2\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\21\327\1\u01ac\7\327\2\0\1\327\7\0\1\327\7\0"+
    "\11\327\4\0\26\327\1\u0317\2\327\2\0\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\22\327\1\u0318\6\327\2\0"+
    "\1\327\7\0\1\327\7\0\11\327\4\0\25\327\1\u01ac"+
    "\3\327\2\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\13\327\1\u025e\15\327\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\21\u0100\1\u0319\1\u031a\6\u0100\2\0\1\u0100"+
    "\7\0\1\u0100\7\0\11\u0100\4\0\5\u0100\1\u031b\23\u0100"+
    "\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\5\u0100"+
    "\1\u01c7\23\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100"+
    "\4\0\14\u0100\1\u01c7\14\u0100\2\0\1\u0100\7\0\1\u0100"+
    "\7\0\11\u0100\4\0\3\u0100\1\u031c\25\u0100\2\0\1\u0100"+
    "\7\0\1\u0100\7\0\11\u0100\4\0\16\u0100\1\u031d\12\u0100"+
    "\2\0\1\u0100\7\0\1\u0100\7\0\1\u0100\1\u031e\1\u031f"+
    "\1\u0320\2\u0100\1\u0321\1\u0100\1\u01c7\4\0\5\u0100\1\u0322"+
    "\23\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\17\u0100\1\u0323\11\u0100\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\11\u0100\1\u0324\17\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\1\u0100\1\u0325\27\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\7\u0100\1\u0326"+
    "\21\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\24\u0100\1\u0327\4\u0100\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\13\u0100\1\u0328\15\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\23\u0100\1\u0329\5\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\11\u0100\1\u032a"+
    "\17\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\11\u0100\1\u032b\11\u0100\1\u032c\5\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\21\u0100\1\u01c7\7\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\26\u0100\1\u032d"+
    "\2\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\22\u0100\1\u032e\6\u0100\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\25\u0100\1\u01c7\3\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\13\u0100\1\u0273\15\u0100\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\5\30\1\u032f"+
    "\23\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\15\30\1\u0330\13\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\12\30\1\u0118\16\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\21\30\1\u0331\7\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\3\30\1\u0332"+
    "\25\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\22\30\1\u0333\6\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\11\30\1\u0334\6\30\1\u0335\10\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\7\30\1\u0336"+
    "\12\30\1\u01ea\6\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\20\30\1\u0206\10\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\5\30\1\u0337\23\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\22\30\1\u0338"+
    "\6\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\20\30\1\u0339\10\30\2\0\1\30\7\0\1\30\7\0"+
    "\2\30\1\u033a\3\30\1\u0118\2\30\4\0\31\30\2\0"+
    "\1\30\7\0\1\30\7\0\5\30\1\u033b\3\30\4\0"+
    "\31\30\2\0\1\30\7\0\1\30\7\0\2\30\1\u0118"+
    "\6\30\4\0\31\30\2\0\1\30\7\0\1\30\7\0"+
    "\4\30\1\u0118\4\30\4\0\31\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\20\30\1\u033c\10\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\11\30\1\u02a5"+
    "\17\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\22\30\1\u033d\6\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\6\30\1\u033e\22\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\2\30\1\u0207\26\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\14\30\1\u033f"+
    "\14\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\1\30\1\u0340\27\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\11\30\1\u0341\17\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\20\30\1\u0342\10\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\15\30\1\u0343"+
    "\13\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\4\30\1\u0344\24\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\15\30\1\u0345\13\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\3\30\1\u0339\25\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\16\30\1\u0206"+
    "\12\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\21\30\1\u0346\7\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\5\30\1\u0347\23\30\2\0\1\30\7\0"+
    "\1\30\7\0\1\30\1\u0295\1\u0296\1\u0297\2\30\1\u0298"+
    "\1\30\1\u0118\4\0\31\30\2\0\2\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\43\66\1\u0348\12\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\32\66"+
    "\1\u0349\6\66\1\u034a\14\66\1\0\1\66\1\0\2\66"+
    "\1\0\3\66\1\0\43\66\1\u020a\12\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\43\66\1\u034b\12\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\41\66"+
    "\1\u034c\14\66\1\0\1\66\1\0\2\66\1\0\3\66"+
    "\1\0\6\66\1\u034d\3\66\1\u0142\43\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\11\66\1\u034e\44\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\6\66"+
    "\1\u0142\47\66\1\0\1\66\1\0\2\66\1\0\3\66"+
    "\1\0\10\66\1\u0142\45\66\1\0\1\66\1\0\2\66"+
    "\1\0\3\66\1\0\41\66\1\u034f\14\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\32\66\1\u02bd\23\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\27\66"+
    "\1\u0350\26\66\1\0\1\66\1\0\2\66\1\0\3\66"+
    "\1\0\23\66\1\u021c\32\66\1\0\1\66\1\0\2\66"+
    "\1\0\3\66\1\0\35\66\1\u0351\20\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\22\66\1\u02ad\33\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\32\66"+
    "\1\u0352\23\66\1\0\1\66\1\0\2\66\1\0\3\66"+
    "\1\0\41\66\1\u0353\14\66\1\0\1\66\1\0\2\66"+
    "\1\0\3\66\1\0\25\66\1\u0354\30\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\36\66\1\u0355\17\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\24\66"+
    "\1\u034c\31\66\1\0\1\66\1\0\2\66\1\0\3\66"+
    "\1\0\26\66\1\u0356\27\66\1\0\1\66\1\0\2\66"+
    "\1\0\3\66\1\0\5\66\1\u02b0\1\u02b1\1\u02b2\2\66"+
    "\1\u02b3\1\66\1\u0142\37\66\57\0\1\u0357\56\0\1\u0358"+
    "\6\0\1\u0359\71\0\1\u021f\67\0\1\u035a\65\0\1\u035b"+
    "\34\0\1\u035c\3\0\1\u015b\66\0\1\u035d\64\0\1\u015b"+
    "\71\0\1\u015b\120\0\1\u035e\60\0\1\u02d3\64\0\1\u035f"+
    "\63\0\1\u0231\101\0\1\u0360\54\0\1\u02c3\77\0\1\u0361"+
    "\76\0\1\u0362\53\0\1\u0363\100\0\1\u0364\55\0\1\u035b"+
    "\71\0\1\u0365\46\0\1\u02c6\1\u02c7\1\u02c8\2\0\1\u02c9"+
    "\1\0\1\u015b\37\0\2\u0174\1\217\1\u0174\1\220\52\u0174"+
    "\1\u0366\12\u0174\1\217\1\u0174\1\220\41\u0174\1\u0367\6\u0174"+
    "\1\u0368\14\u0174\1\217\1\u0174\1\220\52\u0174\1\u0234\12\u0174"+
    "\1\217\1\u0174\1\220\52\u0174\1\u0369\12\u0174\1\217\1\u0174"+
    "\1\220\50\u0174\1\u036a\14\u0174\1\217\1\u0174\1\220\15\u0174"+
    "\1\u036b\3\u0174\1\u017a\43\u0174\1\217\1\u0174\1\220\20\u0174"+
    "\1\u036c\44\u0174\1\217\1\u0174\1\220\15\u0174\1\u017a\47\u0174"+
    "\1\217\1\u0174\1\220\17\u0174\1\u017a\45\u0174\1\217\1\u0174"+
    "\1\220\50\u0174\1\u036d\14\u0174\1\217\1\u0174\1\220\41\u0174"+
    "\1\u02e9\23\u0174\1\217\1\u0174\1\220\36\u0174\1\u036e\26\u0174"+
    "\1\217\1\u0174\1\220\32\u0174\1\u0246\32\u0174\1\217\1\u0174"+
    "\1\220\44\u0174\1\u036f\20\u0174\1\217\1\u0174\1\220\31\u0174"+
    "\1\u02d9\33\u0174\1\217\1\u0174\1\220\41\u0174\1\u0370\23\u0174"+
    "\1\217\1\u0174\1\220\50\u0174\1\u0371\14\u0174\1\217\1\u0174"+
    "\1\220\34\u0174\1\u0372\30\u0174\1\217\1\u0174\1\220\45\u0174"+
    "\1\u0373\17\u0174\1\217\1\u0174\1\220\33\u0174\1\u036a\31\u0174"+
    "\1\217\1\u0174\1\220\35\u0174\1\u0374\27\u0174\1\217\1\u0174"+
    "\1\220\14\u0174\1\u02dc\1\u02dd\1\u02de\2\u0174\1\u02df\1\u0174"+
    "\1\u017a\37\u0174\7\274\1\0\3\274\1\0\43\274\1\u0375"+
    "\17\274\1\0\3\274\1\0\32\274\1\u0376\6\274\1\u0377"+
    "\21\274\1\0\3\274\1\0\43\274\1\u0249\17\274\1\0"+
    "\3\274\1\0\43\274\1\u0378\17\274\1\0\3\274\1\0"+
    "\41\274\1\u0379\21\274\1\0\3\274\1\0\6\274\1\u037a"+
    "\3\274\1\u0193\50\274\1\0\3\274\1\0\11\274\1\u037b"+
    "\51\274\1\0\3\274\1\0\6\274\1\u0193\54\274\1\0"+
    "\3\274\1\0\10\274\1\u0193\52\274\1\0\3\274\1\0"+
    "\41\274\1\u037c\21\274\1\0\3\274\1\0\32\274\1\u02ff"+
    "\30\274\1\0\3\274\1\0\27\274\1\u037d\33\274\1\0"+
    "\3\274\1\0\23\274\1\u025b\37\274\1\0\3\274\1\0"+
    "\35\274\1\u037e\25\274\1\0\3\274\1\0\22\274\1\u02ef"+
    "\40\274\1\0\3\274\1\0\32\274\1\u037f\30\274\1\0"+
    "\3\274\1\0\41\274\1\u0380\21\274\1\0\3\274\1\0"+
    "\25\274\1\u0381\35\274\1\0\3\274\1\0\36\274\1\u0382"+
    "\24\274\1\0\3\274\1\0\24\274\1\u0379\36\274\1\0"+
    "\3\274\1\0\26\274\1\u0383\34\274\1\0\3\274\1\0"+
    "\5\274\1\u02f2\1\u02f3\1\u02f4\2\274\1\u02f5\1\274\1\u0193"+
    "\37\274\1\327\7\0\1\327\7\0\11\327\4\0\22\327"+
    "\1\u0384\6\327\2\0\1\327\7\0\1\327\7\0\11\327"+
    "\4\0\11\327\1\u0385\6\327\1\u0386\10\327\2\0\1\327"+
    "\7\0\1\327\7\0\11\327\4\0\22\327\1\u025e\6\327"+
    "\2\0\1\327\7\0\1\327\7\0\11\327\4\0\22\327"+
    "\1\u0387\6\327\2\0\1\327\7\0\1\327\7\0\11\327"+
    "\4\0\20\327\1\u0388\10\327\2\0\1\327\7\0\1\327"+
    "\7\0\2\327\1\u0389\3\327\1\u01ac\2\327\4\0\31\327"+
    "\2\0\1\327\7\0\1\327\7\0\5\327\1\u038a\3\327"+
    "\4\0\31\327\2\0\1\327\7\0\1\327\7\0\2\327"+
    "\1\u01ac\6\327\4\0\31\327\2\0\1\327\7\0\1\327"+
    "\7\0\4\327\1\u01ac\4\327\4\0\31\327\2\0\1\327"+
    "\7\0\1\327\7\0\11\327\4\0\20\327\1\u038b\10\327"+
    "\2\0\1\327\7\0\1\327\7\0\11\327\4\0\11\327"+
    "\1\u0315\17\327\2\0\1\327\7\0\1\327\7\0\11\327"+
    "\4\0\6\327\1\u038c\22\327\2\0\1\327\7\0\1\327"+
    "\7\0\11\327\4\0\2\327\1\u0270\26\327\2\0\1\327"+
    "\7\0\1\327\7\0\11\327\4\0\14\327\1\u038d\14\327"+
    "\2\0\1\327\7\0\1\327\7\0\11\327\4\0\1\327"+
    "\1\u0305\27\327\2\0\1\327\7\0\1\327\7\0\11\327"+
    "\4\0\11\327\1\u038e\17\327\2\0\1\327\7\0\1\327"+
    "\7\0\11\327\4\0\20\327\1\u038f\10\327\2\0\1\327"+
    "\7\0\1\327\7\0\11\327\4\0\4\327\1\u0390\24\327"+
    "\2\0\1\327\7\0\1\327\7\0\11\327\4\0\15\327"+
    "\1\u0391\13\327\2\0\1\327\7\0\1\327\7\0\11\327"+
    "\4\0\3\327\1\u0388\25\327\2\0\1\327\7\0\1\327"+
    "\7\0\11\327\4\0\5\327\1\u0392\23\327\2\0\1\327"+
    "\7\0\1\327\7\0\1\327\1\u0308\1\u0309\1\u030a\2\327"+
    "\1\u030b\1\327\1\u01ac\4\0\31\327\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\22\u0100\1\u0393\6\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\11\u0100\1\u0394"+
    "\6\u0100\1\u0395\10\u0100\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\22\u0100\1\u0273\6\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\22\u0100\1\u0396\6\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\20\u0100\1\u0397"+
    "\10\u0100\2\0\1\u0100\7\0\1\u0100\7\0\2\u0100\1\u0398"+
    "\3\u0100\1\u01c7\2\u0100\4\0\31\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\5\u0100\1\u0399\3\u0100\4\0\31\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\2\u0100\1\u01c7\6\u0100\4\0"+
    "\31\u0100\2\0\1\u0100\7\0\1\u0100\7\0\4\u0100\1\u01c7"+
    "\4\u0100\4\0\31\u0100\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\20\u0100\1\u039a\10\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\11\u0100\1\u032b\17\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\6\u0100\1\u039b"+
    "\22\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\2\u0100\1\u0285\26\u0100\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\14\u0100\1\u039c\14\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\1\u0100\1\u031b\27\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\11\u0100\1\u039d"+
    "\17\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\20\u0100\1\u039e\10\u0100\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\4\u0100\1\u039f\24\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\15\u0100\1\u03a0\13\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\3\u0100\1\u0397"+
    "\25\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\5\u0100\1\u03a1\23\u0100\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\1\u0100\1\u031e\1\u031f\1\u0320\2\u0100\1\u0321\1\u0100\1\u01c7"+
    "\4\0\31\u0100\2\0\1\30\7\0\1\30\7\0\11\30"+
    "\4\0\21\30\1\u0200\7\30\2\0\1\30\7\0\1\30"+
    "\7\0\11\30\4\0\3\30\1\u03a2\25\30\2\0\1\30"+
    "\7\0\1\30\7\0\1\30\2\u03a3\1\u03a4\5\u0118\4\0"+
    "\31\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\16\30\1\u03a5\12\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\20\30\1\u03a6\10\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\15\30\1\u03a7\13\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\1\30\1\u02a6"+
    "\27\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\1\30\1\u03a8\27\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\27\30\1\u0206\1\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\11\30\1\u03a9\17\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\22\30\1\u0118"+
    "\6\30\2\0\1\30\7\0\1\30\7\0\10\30\1\u0118"+
    "\4\0\31\30\2\0\1\30\7\0\1\30\7\0\6\30"+
    "\1\u0118\2\30\4\0\31\30\2\0\1\30\7\0\1\30"+
    "\7\0\11\30\4\0\15\30\1\u03aa\13\30\2\0\1\30"+
    "\7\0\1\30\7\0\11\30\4\0\5\30\1\u01e8\23\30"+
    "\2\0\1\30\7\0\1\30\7\0\11\30\4\0\11\30"+
    "\1\u03ab\17\30\2\0\1\30\7\0\1\30\7\0\11\30"+
    "\4\0\1\30\1\u0118\27\30\2\0\1\30\7\0\1\30"+
    "\7\0\11\30\4\0\22\30\1\u01ea\6\30\2\0\1\30"+
    "\7\0\1\30\7\0\11\30\4\0\3\30\1\u0118\25\30"+
    "\2\0\1\30\7\0\1\30\7\0\11\30\4\0\15\30"+
    "\1\u03ac\13\30\2\0\1\30\7\0\1\30\7\0\11\30"+
    "\4\0\4\30\1\u01e8\24\30\2\0\1\30\7\0\1\30"+
    "\7\0\11\30\4\0\11\30\1\u03ad\17\30\2\0\1\30"+
    "\7\0\1\30\7\0\11\30\4\0\7\30\1\u0118\21\30"+
    "\2\0\1\30\7\0\1\30\7\0\11\30\4\0\6\30"+
    "\1\u03ae\22\30\2\0\1\30\7\0\1\30\7\0\11\30"+
    "\4\0\4\30\1\u0118\24\30\2\0\2\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\41\66\1\u03af\14\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\36\66"+
    "\1\u0154\17\66\1\0\1\66\1\0\2\66\1\0\3\66"+
    "\1\0\22\66\1\u02be\33\66\1\0\1\66\1\0\2\66"+
    "\1\0\3\66\1\0\32\66\1\u03b0\23\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\43\66\1\u0142\12\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\14\66"+
    "\1\u0142\41\66\1\0\1\66\1\0\2\66\1\0\3\66"+
    "\1\0\12\66\1\u0142\43\66\1\0\1\66\1\0\2\66"+
    "\1\0\3\66\1\0\36\66\1\u03b1\17\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\32\66\1\u03b2\23\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\22\66"+
    "\1\u0142\33\66\1\0\1\66\1\0\2\66\1\0\3\66"+
    "\1\0\24\66\1\u0142\31\66\1\0\1\66\1\0\2\66"+
    "\1\0\3\66\1\0\36\66\1\u03b3\17\66\1\0\1\66"+
    "\1\0\2\66\1\0\3\66\1\0\32\66\1\u03b4\23\66"+
    "\1\0\1\66\1\0\2\66\1\0\3\66\1\0\30\66"+
    "\1\u0142\25\66\1\0\1\66\1\0\2\66\1\0\3\66"+
    "\1\0\25\66\1\u0142\26\66\55\0\1\u03b5\64\0\1\u016d"+
    "\53\0\1\u02d4\77\0\1\u03b6\100\0\1\u015b\40\0\1\u015b"+
    "\65\0\1\u015b\113\0\1\u03b7\63\0\1\u03b8\57\0\1\u015b"+
    "\71\0\1\u015b\101\0\1\u03b9\63\0\1\u03ba\65\0\1\u015b"+
    "\64\0\1\u015b\26\0\2\u0174\1\217\1\u0174\1\220\50\u0174"+
    "\1\u03bb\14\u0174\1\217\1\u0174\1\220\45\u0174\1\u018c\17\u0174"+
    "\1\217\1\u0174\1\220\31\u0174\1\u02ea\33\u0174\1\217\1\u0174"+
    "\1\220\41\u0174\1\u03bc\23\u0174\1\217\1\u0174\1\220\52\u0174"+
    "\1\u017a\12\u0174\1\217\1\u0174\1\220\23\u0174\1\u017a\41\u0174"+
    "\1\217\1\u0174\1\220\21\u0174\1\u017a\43\u0174\1\217\1\u0174"+
    "\1\220\45\u0174\1\u03bd\17\u0174\1\217\1\u0174\1\220\41\u0174"+
    "\1\u03be\23\u0174\1\217\1\u0174\1\220\31\u0174\1\u017a\33\u0174"+
    "\1\217\1\u0174\1\220\33\u0174\1\u017a\31\u0174\1\217\1\u0174"+
    "\1\220\45\u0174\1\u03bf\17\u0174\1\217\1\u0174\1\220\41\u0174"+
    "\1\u03c0\23\u0174\1\217\1\u0174\1\220\37\u0174\1\u017a\25\u0174"+
    "\1\217\1\u0174\1\220\34\u0174\1\u017a\26\u0174\7\274\1\0"+
    "\3\274\1\0\41\274\1\u03c1\21\274\1\0\3\274\1\0"+
    "\36\274\1\u01a5\24\274\1\0\3\274\1\0\22\274\1\u0300"+
    "\40\274\1\0\3\274\1\0\32\274\1\u03c2\30\274\1\0"+
    "\3\274\1\0\43\274\1\u0193\17\274\1\0\3\274\1\0"+
    "\14\274\1\u0193\46\274\1\0\3\274\1\0\12\274\1\u0193"+
    "\50\274\1\0\3\274\1\0\36\274\1\u03c3\24\274\1\0"+
    "\3\274\1\0\32\274\1\u03c4\30\274\1\0\3\274\1\0"+
    "\22\274\1\u0193\40\274\1\0\3\274\1\0\24\274\1\u0193"+
    "\36\274\1\0\3\274\1\0\36\274\1\u03c5\24\274\1\0"+
    "\3\274\1\0\32\274\1\u03c6\30\274\1\0\3\274\1\0"+
    "\30\274\1\u0193\32\274\1\0\3\274\1\0\25\274\1\u0193"+
    "\26\274\1\327\7\0\1\327\7\0\11\327\4\0\20\327"+
    "\1\u03c7\10\327\2\0\1\327\7\0\1\327\7\0\11\327"+
    "\4\0\15\327\1\u01be\13\327\2\0\1\327\7\0\1\327"+
    "\7\0\11\327\4\0\1\327\1\u0316\27\327\2\0\1\327"+
    "\7\0\1\327\7\0\11\327\4\0\11\327\1\u03c8\17\327"+
    "\2\0\1\327\7\0\1\327\7\0\11\327\4\0\22\327"+
    "\1\u01ac\6\327\2\0\1\327\7\0\1\327\7\0\10\327"+
    "\1\u01ac\4\0\31\327\2\0\1\327\7\0\1\327\7\0"+
    "\6\327\1\u01ac\2\327\4\0\31\327\2\0\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\15\327\1\u03c9\13\327\2\0"+
    "\1\327\7\0\1\327\7\0\11\327\4\0\11\327\1\u03ca"+
    "\17\327\2\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\1\327\1\u01ac\27\327\2\0\1\327\7\0\1\327\7\0"+
    "\11\327\4\0\3\327\1\u01ac\25\327\2\0\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\15\327\1\u03cb\13\327\2\0"+
    "\1\327\7\0\1\327\7\0\11\327\4\0\11\327\1\u03cc"+
    "\17\327\2\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\7\327\1\u01ac\21\327\2\0\1\327\7\0\1\327\7\0"+
    "\11\327\4\0\4\327\1\u01ac\24\327\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\20\u0100\1\u03cd\10\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\15\u0100\1\u01d9"+
    "\13\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\1\u0100\1\u032c\27\u0100\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\11\u0100\1\u03ce\17\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\22\u0100\1\u01c7\6\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\10\u0100\1\u01c7\4\0\31\u0100"+
    "\2\0\1\u0100\7\0\1\u0100\7\0\6\u0100\1\u01c7\2\u0100"+
    "\4\0\31\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100"+
    "\4\0\15\u0100\1\u03cf\13\u0100\2\0\1\u0100\7\0\1\u0100"+
    "\7\0\11\u0100\4\0\11\u0100\1\u03d0\17\u0100\2\0\1\u0100"+
    "\7\0\1\u0100\7\0\11\u0100\4\0\1\u0100\1\u01c7\27\u0100"+
    "\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\3\u0100"+
    "\1\u01c7\25\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100"+
    "\4\0\15\u0100\1\u03d1\13\u0100\2\0\1\u0100\7\0\1\u0100"+
    "\7\0\11\u0100\4\0\11\u0100\1\u03d2\17\u0100\2\0\1\u0100"+
    "\7\0\1\u0100\7\0\11\u0100\4\0\7\u0100\1\u01c7\21\u0100"+
    "\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\4\u0100"+
    "\1\u01c7\24\u0100\2\0\1\30\7\0\1\30\7\0\11\30"+
    "\4\0\5\30\1\u02a3\23\30\2\0\1\30\7\0\1\30"+
    "\7\0\11\u0118\4\0\31\30\2\0\1\30\7\0\1\30"+
    "\7\0\3\u0118\6\30\4\0\31\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\4\30\1\u03a2\24\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\23\30\1\u03d3"+
    "\5\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\23\30\1\u01ea\5\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\22\30\1\u03d4\6\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\16\30\1\u03d5\12\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\1\30\1\u01e3"+
    "\27\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\5\30\1\u0126\23\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\22\30\1\u03d6\6\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\5\30\1\u03d7\23\30\2\0"+
    "\2\66\1\0\1\66\1\0\2\66\1\0\3\66\1\0"+
    "\44\66\1\u03d8\11\66\1\0\1\66\1\0\2\66\1\0"+
    "\3\66\1\0\37\66\1\u03d9\16\66\1\0\1\66\1\0"+
    "\2\66\1\0\3\66\1\0\22\66\1\u03da\33\66\1\0"+
    "\1\66\1\0\2\66\1\0\3\66\1\0\26\66\1\u0146"+
    "\27\66\1\0\1\66\1\0\2\66\1\0\3\66\1\0"+
    "\43\66\1\u03db\10\66\60\0\1\u03dc\62\0\1\u03dd\52\0"+
    "\1\u03de\73\0\1\u015f\104\0\1\u03df\10\0\2\u0174\1\217"+
    "\1\u0174\1\220\53\u0174\1\u03e0\11\u0174\1\217\1\u0174\1\220"+
    "\46\u0174\1\u03e1\16\u0174\1\217\1\u0174\1\220\31\u0174\1\u03e2"+
    "\33\u0174\1\217\1\u0174\1\220\35\u0174\1\u017e\27\u0174\1\217"+
    "\1\u0174\1\220\52\u0174\1\u03e3\10\u0174\7\274\1\0\3\274"+
    "\1\0\44\274\1\u03e4\16\274\1\0\3\274\1\0\37\274"+
    "\1\u03e5\23\274\1\0\3\274\1\0\22\274\1\u03e6\40\274"+
    "\1\0\3\274\1\0\26\274\1\u0197\34\274\1\0\3\274"+
    "\1\0\43\274\1\u03e7\10\274\1\327\7\0\1\327\7\0"+
    "\11\327\4\0\23\327\1\u03e8\5\327\2\0\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\16\327\1\u03e9\12\327\2\0"+
    "\1\327\7\0\1\327\7\0\11\327\4\0\1\327\1\u03ea"+
    "\27\327\2\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\5\327\1\u01b0\23\327\2\0\1\327\7\0\1\327\7\0"+
    "\11\327\4\0\22\327\1\u03eb\6\327\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\23\u0100\1\u03ec\5\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\16\u0100\1\u03ed"+
    "\12\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\1\u0100\1\u03ee\27\u0100\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\5\u0100\1\u01cb\23\u0100\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\22\u0100\1\u03ef\6\u0100\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\3\30\1\u03f0"+
    "\25\30\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\5\30\1\u03f1\23\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\15\30\1\u0118\13\30\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\27\30\1\u0118\1\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\20\30\1\u02a3"+
    "\10\30\2\0\2\66\1\0\1\66\1\0\2\66\1\0"+
    "\3\66\1\0\24\66\1\u03f2\31\66\1\0\1\66\1\0"+
    "\2\66\1\0\3\66\1\0\36\66\1\u0142\17\66\1\0"+
    "\1\66\1\0\2\66\1\0\3\66\1\0\34\66\1\u0142"+
    "\21\66\1\0\1\66\1\0\2\66\1\0\3\66\1\0"+
    "\50\66\1\u0142\3\66\40\0\1\u03f3\101\0\1\u015b\65\0"+
    "\1\u015b\103\0\1\u015b\3\0\2\u0174\1\217\1\u0174\1\220"+
    "\33\u0174\1\u03f4\31\u0174\1\217\1\u0174\1\220\45\u0174\1\u017a"+
    "\17\u0174\1\217\1\u0174\1\220\43\u0174\1\u017a\21\u0174\1\217"+
    "\1\u0174\1\220\57\u0174\1\u017a\3\u0174\7\274\1\0\3\274"+
    "\1\0\24\274\1\u03f5\36\274\1\0\3\274\1\0\36\274"+
    "\1\u0193\24\274\1\0\3\274\1\0\34\274\1\u0193\26\274"+
    "\1\0\3\274\1\0\50\274\1\u0193\3\274\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\3\327\1\u03f6\25\327\2\0"+
    "\1\327\7\0\1\327\7\0\11\327\4\0\15\327\1\u01ac"+
    "\13\327\2\0\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\13\327\1\u01ac\15\327\2\0\1\327\7\0\1\327\7\0"+
    "\11\327\4\0\27\327\1\u01ac\1\327\2\0\1\u0100\7\0"+
    "\1\u0100\7\0\11\u0100\4\0\3\u0100\1\u03f7\25\u0100\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\15\u0100\1\u01c7"+
    "\13\u0100\2\0\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0"+
    "\13\u0100\1\u01c7\15\u0100\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\27\u0100\1\u01c7\1\u0100\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\22\30\1\u03f8\6\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\3\30\1\u03f9"+
    "\25\30\2\0\2\66\1\0\1\66\1\0\2\66\1\0"+
    "\3\66\1\0\43\66\1\u03fa\10\66\57\0\1\u03fb\10\0"+
    "\2\u0174\1\217\1\u0174\1\220\52\u0174\1\u03fc\10\u0174\7\274"+
    "\1\0\3\274\1\0\43\274\1\u03fd\10\274\1\327\7\0"+
    "\1\327\7\0\11\327\4\0\22\327\1\u03fe\6\327\2\0"+
    "\1\u0100\7\0\1\u0100\7\0\11\u0100\4\0\22\u0100\1\u03ff"+
    "\6\u0100\2\0\1\30\7\0\1\30\7\0\11\30\4\0"+
    "\16\30\1\u0126\12\30\2\0\1\30\7\0\1\30\7\0"+
    "\11\30\4\0\1\30\1\u0400\27\30\2\0\2\66\1\0"+
    "\1\66\1\0\2\66\1\0\3\66\1\0\37\66\1\u0146"+
    "\14\66\53\0\1\u015f\14\0\2\u0174\1\217\1\u0174\1\220"+
    "\46\u0174\1\u017e\14\u0174\7\274\1\0\3\274\1\0\37\274"+
    "\1\u0197\14\274\1\327\7\0\1\327\7\0\11\327\4\0"+
    "\16\327\1\u01b0\12\327\2\0\1\u0100\7\0\1\u0100\7\0"+
    "\11\u0100\4\0\16\u0100\1\u01cb\12\u0100\2\0\1\30\7\0"+
    "\1\30\7\0\11\30\4\0\13\30\1\u0401\15\30\2\0"+
    "\1\30\7\0\1\30\7\0\11\30\4\0\13\30\1\u02a3"+
    "\15\30\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[50064];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\22\0\2\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\33\1\1\11\1\1\2\11\15\1\2\11\1\1\2\11"+
    "\1\1\1\11\16\1\2\11\2\1\1\11\2\1\1\11"+
    "\21\1\1\11\23\1\1\11\1\1\2\11\1\1\1\11"+
    "\17\1\2\11\51\1\1\11\11\1\1\11\3\1\1\11"+
    "\2\1\1\11\20\1\1\11\16\1\2\11\1\1\2\11"+
    "\20\1\3\0\2\11\104\1\1\0\1\1\1\11\2\0"+
    "\1\1\27\0\2\1\2\0\1\1\26\0\116\1\1\0"+
    "\75\1\6\0\1\1\24\0\1\1\16\0\77\1\1\0"+
    "\13\1\2\11\55\1\25\0\1\1\25\0\153\1\36\0"+
    "\100\1\4\0\1\1\5\0\1\1\1\0\33\1\10\0"+
    "\17\1\2\0\6\1\2\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1025];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    public static int errorLine = -1;
    public static int errorColumn = -1;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case Comments: {
              errores.add(new Token("/**", yyline, yycolumn, "Error: llave comentario abierta"));
            }  // fall though
            case 1026: break;
            default:
          {   for(Token t: tokens){
    t.print();
  }

  System.out.println("\nErrores\n");
  for(Token t: errores){
    t.print();
  }
  return 0;
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println(yyline);
                                  System.out.println(yycolumn);
                                  throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 53: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 54: break;
          case 3:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 55: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 56: break;
          case 5:
            { string.setLength(0); string.append(yytext()); yybegin(indetifierState);
            }
            // fall through
          case 57: break;
          case 6:
            { string.setLength(0); yybegin(Chars);
            }
            // fall through
          case 58: break;
          case 7:
            { string.setLength(0);
                                    string.append(yytext());
                                    yybegin(numberState);
            }
            // fall through
          case 59: break;
          case 8:
            { string.append( yytext() );
            }
            // fall through
          case 60: break;
          case 9:
            { errores.add(new Token("Salto linea", yyline, yycolumn, "Error: strings deben ir en la misma linea"));
                                    yybegin(stringError);
            }
            // fall through
          case 61: break;
          case 10:
            { yybegin(YYINITIAL);
                                   tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 62: break;
          case 11:
            { errores.add(new Token("Comilla", yyline, yycolumn, "Error: cierre de comilla incorrecto"));
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 63: break;
          case 12:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
                                    yybegin(hexaStateError);
            }
            // fall through
          case 64: break;
          case 13:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: hexadecimal sin cierre"));
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 65: break;
          case 14:
            { yybegin(YYINITIAL);
                                    string.append( yytext() ); 
                                    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada"));
            }
            // fall through
          case 66: break;
          case 15:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 67: break;
          case 16:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); 
                                    errores.add(new Token("Comillas", yyline, yycolumn, "Error: hexadecimal sin cierre"));
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 68: break;
          case 17:
            { string.append(yytext());
                                    yybegin(errorNumeros);///////////////
            }
            // fall through
          case 69: break;
          case 18:
            { yybegin(YYINITIAL);
                                    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
            }
            // fall through
          case 70: break;
          case 19:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
                                    tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 71: break;
          case 20:
            { string.append(yytext());
            }
            // fall through
          case 72: break;
          case 21:
            { yybegin(NaturalNumbers);
                                    string.append(yytext());
            }
            // fall through
          case 73: break;
          case 22:
            { string.append(yytext());
                                    yybegin(errorNumeros);
            }
            // fall through
          case 74: break;
          case 23:
            { errores.add(new Token("Salto linea", yyline, yycolumn, "Error: chars deben ir en la misma linea"));
                                    yybegin(charError);
            }
            // fall through
          case 75: break;
          case 24:
            { errores.add(new Token("Comilla", yyline, yycolumn, "Error: cierre de comilla incorrecto")); 
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 76: break;
          case 25:
            { yybegin(YYINITIAL);
                                   tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
            }
            // fall through
          case 77: break;
          case 26:
            { if(errorLine == -1){
                                                                    errorLine = yyline;
                                                                    errorColumn = yycolumn;
                                                                  }
            }
            // fall through
          case 78: break;
          case 27:
            { 
            }
            // fall through
          case 79: break;
          case 28:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 80: break;
          case 29:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 81: break;
          case 30:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "identificador"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 82: break;
          case 31:
            { yybegin(SpaceState);
            }
            // fall through
          case 83: break;
          case 32:
            { string.append(yytext()); yybegin(indetifierError);
            }
            // fall through
          case 84: break;
          case 33:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "identificador"));
                   string.setLength(0); 
                   string.append(yytext());
                   tokens.add(new Token(string.toString(), yyline, yycolumn, "operador"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 85: break;
          case 34:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error de identificado000r"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 86: break;
          case 35:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error Decimal"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 87: break;
          case 36:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error de identificador"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 88: break;
          case 37:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "identificador"));
                   string.setLength(0); string.append(yytext());
                   tokens.add(new Token(string.toString(), yyline, yycolumn, "operador"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 89: break;
          case 38:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "LA PICHA DE LA VACA"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 90: break;
          case 39:
            { string.append(yytext());;yybegin(indetifierError);
            }
            // fall through
          case 91: break;
          case 40:
            { string.append(yytext());yybegin(numberState);
            }
            // fall through
          case 92: break;
          case 41:
            { errorLine = -1;
                                    errorColumn = -1; 
                                    yybegin(Comments);
            }
            // fall through
          case 93: break;
          case 42:
            { yybegin(lineComment);
            }
            // fall through
          case 94: break;
          case 43:
            { string.setLength(0); string.append(yytext()); yybegin(indetifierError);
            }
            // fall through
          case 95: break;
          case 44:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error Decimal"));
            }
            // fall through
          case 96: break;
          case 45:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 97: break;
          case 46:
            { if(errorLine != -1){
                                    errores.add(new Token("*", errorLine, errorColumn, "Error: linea sin * <comentario bloque>"));
                                  }
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 98: break;
          case 47:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error de identificado000r"));
                   yybegin(YYINITIAL);yybegin(lineComment);
            }
            // fall through
          case 99: break;
          case 48:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error decimal"));
            }
            // fall through
          case 100: break;
          case 49:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 101: break;
          case 50:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 102: break;
          case 51:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 103: break;
          case 52:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaStateC);
            }
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
