// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

/* JFlex example: partial Java language lexer specification */
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int hexaState = 4;
  public static final int numberState = 6;
  public static final int NaturalNumbers = 8;
  public static final int Chars = 10;
  public static final int Comments = 12;
  public static final int lineComment = 14;
  public static final int indetifierState = 16;
  public static final int indetifierError = 18;
  public static final int decimalError = 20;
  public static final int OperadoresState = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\3\u1f00"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\3\u1f00\1\u3f00\1\u4000"+
    "\4\u1f00\1\u4100\11\u1f00\3\u0100\1\u4200\1\u4300\13\u1f00\4\u0100"+
    "\1\u4400\63\u1f00\2\u0100\1\u4500\4\u1f00\1\u4600\100\u1f00\1\u4700"+
    "\40\u1f00\1\u4800\1\u4900\1\u1f00\1\u4a00\1\u4b00\1\u4c00\1\u4d00"+
    "\26\u1f00\1\u4e00\21\u1f00\246\u0100\1\u4f00\20\u0100\1\u5000\1\u5100"+
    "\77\u1f00\2\u0100\1\u5100\u0b05\u1f00\1\u5200\1\u5300\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\7\1\10\1\11\1\6\1\12\1\13\1\14\1\15"+
    "\2\13\1\16\1\10\1\13\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\31\2\13\1\33\1\34\1\35\1\13\1\6\6\36"+
    "\7\12\1\37\14\12\1\13\1\40\2\13\1\12\1\6"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\12\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\12\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\13\1\71\2\13\6\0\1\72\32\0"+
    "\2\6\4\12\4\6\1\12\2\6\1\0\7\6\1\12"+
    "\4\6\1\12\5\6\27\12\1\6\37\12\1\6\u01ca\12"+
    "\4\6\14\12\16\6\5\12\7\6\1\12\1\6\1\12"+
    "\21\6\160\0\5\12\1\6\2\12\2\6\4\12\10\6"+
    "\1\12\1\6\3\12\1\6\1\12\1\6\24\12\1\6"+
    "\123\12\1\6\213\12\1\6\5\0\2\6\236\12\11\6"+
    "\46\12\2\6\1\12\7\6\47\12\7\6\1\12\1\6"+
    "\55\0\1\6\1\0\1\6\2\0\1\6\2\0\1\6"+
    "\1\0\10\6\33\12\5\6\3\12\15\6\5\0\6\6"+
    "\1\12\4\6\13\0\5\6\53\12\37\0\4\6\2\12"+
    "\1\0\143\12\1\6\1\12\10\0\1\6\6\0\2\12"+
    "\2\0\1\6\4\0\2\12\12\0\3\12\2\6\1\12"+
    "\17\6\1\0\1\12\1\0\36\12\33\0\2\6\131\12"+
    "\13\0\1\12\16\6\12\0\41\12\11\0\2\12\4\6"+
    "\1\12\5\6\26\12\4\0\1\12\11\0\1\12\3\0"+
    "\1\12\5\0\22\6\31\12\3\0\104\6\1\12\1\6"+
    "\13\12\67\6\33\0\1\6\4\0\66\12\3\0\1\12"+
    "\22\0\1\12\7\0\12\12\2\0\2\6\12\0\1\6"+
    "\7\12\1\6\7\12\1\6\3\0\1\6\10\12\2\6"+
    "\2\12\2\6\26\12\1\6\7\12\1\6\1\12\3\6"+
    "\4\12\2\6\1\0\1\12\7\0\2\6\2\0\2\6"+
    "\3\0\1\12\10\6\1\0\4\6\2\12\1\6\3\12"+
    "\2\0\2\6\12\0\4\12\7\6\1\12\5\6\3\0"+
    "\1\6\6\12\4\6\2\12\2\6\26\12\1\6\7\12"+
    "\1\6\2\12\1\6\2\12\1\6\2\12\2\6\1\0"+
    "\1\6\5\0\4\6\2\0\2\6\3\0\3\6\1\0"+
    "\7\6\4\12\1\6\1\12\7\6\14\0\3\12\1\0"+
    "\13\6\3\0\1\6\11\12\1\6\3\12\1\6\26\12"+
    "\1\6\7\12\1\6\2\12\1\6\5\12\2\6\1\0"+
    "\1\12\10\0\1\6\3\0\1\6\3\0\2\6\1\12"+
    "\17\6\2\12\2\0\2\6\12\0\1\6\1\12\17\6"+
    "\3\0\1\6\10\12\2\6\2\12\2\6\26\12\1\6"+
    "\7\12\1\6\2\12\1\6\5\12\2\6\1\0\1\12"+
    "\7\0\2\6\2\0\2\6\3\0\10\6\2\0\4\6"+
    "\2\12\1\6\3\12\2\0\2\6\12\0\1\6\1\12"+
    "\20\6\1\0\1\12\1\6\6\12\3\6\3\12\1\6"+
    "\4\12\3\6\2\12\1\6\1\12\1\6\2\12\3\6"+
    "\2\12\3\6\3\12\3\6\14\12\4\6\5\0\3\6"+
    "\3\0\1\6\4\0\2\6\1\12\6\6\1\0\16\6"+
    "\12\0\11\6\1\12\7\6\3\0\1\6\10\12\1\6"+
    "\3\12\1\6\27\12\1\6\12\12\1\6\5\12\3\6"+
    "\1\12\7\0\1\6\3\0\1\6\4\0\7\6\2\0"+
    "\1\6\2\12\6\6\2\12\2\0\2\6\12\0\22\6"+
    "\2\0\1\6\10\12\1\6\3\12\1\6\27\12\1\6"+
    "\12\12\1\6\5\12\2\6\1\0\1\12\7\0\1\6"+
    "\3\0\1\6\4\0\7\6\2\0\7\6\1\12\1\6"+
    "\2\12\2\0\2\6\12\0\1\6\2\12\17\6\2\0"+
    "\1\6\10\12\1\6\3\12\1\6\51\12\2\6\1\12"+
    "\7\0\1\6\3\0\1\6\4\0\1\12\10\6\1\0"+
    "\10\6\2\12\2\0\2\6\12\0\12\6\6\12\2\6"+
    "\2\0\1\6\22\12\3\6\30\12\1\6\11\12\1\6"+
    "\1\12\2\6\7\12\3\6\1\0\4\6\6\0\1\6"+
    "\1\0\1\6\10\0\22\6\2\0\15\6\60\12\1\0"+
    "\2\12\7\0\4\6\10\12\10\0\1\6\12\0\47\6"+
    "\2\12\1\6\1\12\2\6\2\12\1\6\1\12\2\6"+
    "\1\12\6\6\4\12\1\6\7\12\1\6\3\12\1\6"+
    "\1\12\1\6\1\12\2\6\2\12\1\6\4\12\1\0"+
    "\2\12\6\0\1\6\2\0\1\12\2\6\5\12\1\6"+
    "\1\12\1\6\6\0\2\6\12\0\2\6\4\12\40\6"+
    "\1\12\27\6\2\0\6\6\12\0\13\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\2\0\10\12\1\6\44\12"+
    "\4\6\24\0\1\6\2\0\5\12\13\0\1\6\44\0"+
    "\11\6\1\0\71\6\53\12\24\0\1\12\12\0\6\6"+
    "\6\12\4\0\4\12\3\0\1\12\3\0\2\12\7\0"+
    "\3\12\4\0\15\12\14\0\1\12\17\0\2\6\46\12"+
    "\1\6\1\12\5\6\1\12\2\6\53\12\1\6\115\12"+
    "\1\6\4\12\2\6\7\12\1\6\1\12\1\6\4\12"+
    "\2\6\51\12\1\6\4\12\2\6\41\12\1\6\4\12"+
    "\2\6\7\12\1\6\1\12\1\6\4\12\2\6\17\12"+
    "\1\6\71\12\1\6\4\12\2\6\103\12\2\6\3\0"+
    "\40\6\20\12\20\6\125\12\14\6\u016c\12\2\6\21\12"+
    "\1\6\32\12\5\6\113\12\3\6\3\12\17\6\15\12"+
    "\1\6\4\12\3\0\13\6\22\12\3\0\13\6\22\12"+
    "\2\0\14\6\15\12\1\6\3\12\1\6\2\0\14\6"+
    "\64\12\40\0\3\6\1\12\3\6\2\12\1\0\2\6"+
    "\12\0\41\6\3\0\2\6\12\0\6\6\130\12\10\6"+
    "\51\12\1\0\1\12\5\6\106\12\12\6\35\12\3\6"+
    "\14\0\4\6\14\0\12\6\12\0\36\12\2\6\5\12"+
    "\13\6\54\12\4\6\21\0\7\12\2\0\6\6\12\0"+
    "\46\6\27\12\5\0\4\6\65\12\12\0\1\6\35\0"+
    "\2\6\13\0\6\6\12\0\15\6\1\12\130\6\5\0"+
    "\57\12\21\0\7\12\4\6\12\0\21\6\11\0\14\6"+
    "\3\0\36\12\15\0\2\12\12\0\54\12\16\0\14\6"+
    "\44\12\24\0\10\6\12\0\3\6\3\12\12\0\44\12"+
    "\122\6\3\0\1\6\25\0\4\12\1\0\4\12\3\0"+
    "\2\12\11\6\300\12\47\0\25\6\4\0\26\12\2\6"+
    "\6\12\2\6\46\12\2\6\6\12\2\6\10\12\1\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\37\12\2\6"+
    "\65\12\1\6\7\12\1\6\1\12\3\6\3\12\1\6"+
    "\7\12\3\6\4\12\2\6\6\12\4\6\15\12\5\6"+
    "\3\12\1\6\7\12\16\6\5\0\30\6\2\3\5\0"+
    "\20\6\2\12\23\6\1\12\13\6\5\0\5\6\6\0"+
    "\1\6\1\12\15\6\1\12\20\6\15\12\3\6\33\12"+
    "\25\6\15\0\4\6\1\0\3\6\14\0\21\6\1\12"+
    "\4\6\1\12\2\6\12\12\1\6\1\12\3\6\5\12"+
    "\6\6\1\12\1\6\1\12\1\6\1\12\1\6\4\12"+
    "\1\6\13\12\2\6\4\12\5\6\5\12\4\6\1\12"+
    "\21\6\51\12\u0177\6\57\12\1\6\57\12\1\6\205\12"+
    "\6\6\4\12\3\0\2\12\14\6\46\12\1\6\1\12"+
    "\5\6\1\12\2\6\70\12\7\6\1\12\17\6\1\0"+
    "\27\12\11\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\7\12\1\6\7\12\1\6\7\12\1\6"+
    "\7\12\1\6\40\0\57\6\1\12\325\6\3\12\31\6"+
    "\11\12\6\0\1\6\5\12\2\6\5\12\4\6\126\12"+
    "\2\6\2\0\2\6\3\12\1\6\132\12\1\6\4\12"+
    "\5\6\51\12\3\6\136\12\21\6\33\12\65\6\306\12"+
    "\112\6\315\12\63\6\215\12\103\6\56\12\2\6\15\12"+
    "\3\6\20\12\12\0\2\12\24\6\57\12\1\0\4\6"+
    "\12\0\1\6\31\12\7\6\1\0\120\12\2\0\45\6"+
    "\11\12\2\6\147\12\2\6\4\12\1\6\4\12\14\6"+
    "\13\12\115\6\12\12\1\0\3\12\1\0\4\12\1\0"+
    "\27\12\5\0\20\6\1\12\7\6\64\12\14\6\2\0"+
    "\62\12\21\0\13\6\12\0\6\6\22\0\6\12\3\6"+
    "\1\12\4\6\12\0\34\12\10\0\2\6\27\12\15\0"+
    "\14\6\35\12\3\6\4\0\57\12\16\0\16\6\1\12"+
    "\12\0\46\6\51\12\16\0\11\6\3\12\1\0\10\12"+
    "\2\0\2\6\12\0\6\6\27\12\3\6\1\12\1\0"+
    "\4\6\60\12\1\0\1\12\3\0\2\12\2\0\5\12"+
    "\2\0\1\12\1\0\1\12\30\6\3\12\2\6\13\12"+
    "\5\0\2\6\3\12\2\0\12\6\6\12\2\6\6\12"+
    "\2\6\6\12\11\6\7\12\1\6\7\12\221\6\43\12"+
    "\10\0\1\6\2\0\2\6\12\0\6\6\244\12\14\6"+
    "\27\12\4\6\61\12\4\6\u0100\3\156\12\2\6\152\12"+
    "\46\6\7\12\14\6\5\12\5\6\1\12\1\0\12\12"+
    "\1\6\15\12\1\6\5\12\1\6\1\12\1\6\2\12"+
    "\1\6\2\12\1\6\154\12\41\6\153\12\22\6\100\12"+
    "\2\6\66\12\50\6\15\12\3\6\20\0\20\6\7\0"+
    "\14\6\2\12\30\6\3\12\31\6\1\12\6\6\5\12"+
    "\1\6\207\12\2\6\1\0\4\6\1\12\13\6\12\0"+
    "\7\6\32\12\4\6\1\12\1\6\32\12\13\6\131\12"+
    "\3\6\6\12\2\6\6\12\2\6\6\12\2\6\3\12"+
    "\3\6\2\12\3\6\2\12\22\6\3\0\4\6\14\12"+
    "\1\6\32\12\1\6\23\12\1\6\2\12\1\6\17\12"+
    "\2\6\16\12\42\6\173\12\105\6\65\12\210\6\1\0"+
    "\202\6\35\12\3\6\61\12\57\6\37\12\21\6\33\12"+
    "\65\6\36\12\2\6\44\12\4\6\10\12\1\6\5\12"+
    "\52\6\236\12\2\6\12\0\126\6\6\12\2\6\1\12"+
    "\1\6\54\12\1\6\2\12\3\6\1\12\2\6\27\12"+
    "\252\6\26\12\12\6\32\12\106\6\70\12\6\6\2\12"+
    "\100\6\1\12\3\0\1\6\2\0\5\6\4\0\4\12"+
    "\1\6\3\12\1\6\33\12\4\6\3\0\4\6\1\0"+
    "\40\6\35\12\203\6\66\12\12\6\26\12\12\6\23\12"+
    "\215\6\111\12\267\6\3\0\65\12\17\0\37\6\12\0"+
    "\20\6\3\0\55\12\13\0\2\6\1\0\22\6\31\12"+
    "\7\6\12\0\6\6\3\0\44\12\16\0\1\6\12\0"+
    "\100\6\3\0\60\12\16\0\4\12\13\6\12\0\246\6"+
    "\53\12\15\0\10\6\12\0\66\6\157\12\221\6\143\12"+
    "\235\6\57\12\321\6\71\12\307\6\105\12\13\6\1\12"+
    "\56\0\20\6\4\0\15\12\140\6\2\12\u0163\6\5\0"+
    "\3\6\26\0\2\6\7\0\36\6\4\0\224\6\3\0"+
    "\273\6\125\12\1\6\107\12\1\6\2\12\2\6\1\12"+
    "\2\6\2\12\2\6\4\12\1\6\14\12\1\6\1\12"+
    "\1\6\7\12\1\6\101\12\1\6\4\12\2\6\10\12"+
    "\1\6\7\12\1\6\34\12\1\6\4\12\1\6\5\12"+
    "\1\6\1\12\3\6\7\12\1\6\u0154\12\2\6\31\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\37\12\1\6\31\12\1\6\37\12"+
    "\1\6\31\12\1\6\10\12\2\6\62\0\4\12\1\6"+
    "\33\12\1\6\2\12\1\6\1\12\2\6\1\12\1\6"+
    "\12\12\1\6\4\12\1\6\1\12\1\6\1\12\6\6"+
    "\1\12\4\6\1\12\1\6\1\12\1\6\1\12\1\6"+
    "\3\12\1\6\2\12\1\6\1\12\2\6\1\12\1\6"+
    "\1\12\1\6\1\12\1\6\1\12\1\6\1\12\1\6"+
    "\2\12\1\6\1\12\2\6\4\12\1\6\7\12\1\6"+
    "\4\12\1\6\4\12\1\6\1\12\1\6\12\12\1\6"+
    "\21\12\5\6\3\12\1\6\5\12\1\6\21\12\104\6"+
    "\327\12\51\6\65\12\13\6\336\12\343\6\1\0\36\6"+
    "\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21504];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\6\0\1\2\4\0\1\3\2\4\1\5\1\6"+
    "\1\7\2\5\1\10\1\3\1\5\2\11\2\5\21\7"+
    "\1\3\1\12\1\13\1\3\15\12\1\14\2\12\15\3"+
    "\4\15\2\16\2\15\1\17\1\3\1\12\1\20\15\12"+
    "\1\3\2\21\16\3\1\2\2\22\15\2\1\16\1\23"+
    "\5\24\16\16\1\25\1\26\1\0\1\27\1\30\1\31"+
    "\1\1\1\7\1\32\47\7\1\12\2\0\2\12\1\32"+
    "\26\12\2\0\1\32\26\0\1\33\2\12\1\32\26\12"+
    "\2\0\2\2\1\34\2\0\1\32\26\0\2\2\1\32"+
    "\26\2\1\0\1\35\21\7\1\32\23\7\1\36\1\7"+
    "\2\0\6\12\1\32\16\12\6\0\1\32\16\0\6\12"+
    "\1\32\16\12\6\0\1\32\16\0\6\2\1\32\16\2"+
    "\1\0\3\7\1\32\1\37\6\7\1\40\17\7\1\37"+
    "\6\7\1\32\25\12\1\32\25\0\1\32\25\12\1\32"+
    "\25\0\1\32\25\2\1\32\2\7\1\32\26\7\17\12"+
    "\17\0\17\12\17\0\17\2\1\7\2\32\7\7\1\32"+
    "\2\7\4\12\1\32\1\12\4\0\1\32\1\0\4\12"+
    "\1\32\1\12\4\0\1\32\1\0\4\2\1\32\1\2"+
    "\5\7\4\12\4\0\4\12\4\0\4\2\2\7\1\12"+
    "\1\0\1\12\1\0\1\2\2\7\1\12\1\0\1\12"+
    "\1\0\1\2\2\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[816];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02c4\0\u02ff\0\u033a"+
    "\0\u02c4\0\u0375\0\u02c4\0\u03b0\0\u02c4\0\u03eb\0\u0426\0\u0461"+
    "\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639"+
    "\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811"+
    "\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u02c4\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u02c4\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u02c4\0\u105d\0\u1098"+
    "\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u0dd4\0\u11fa\0\u1235"+
    "\0\u02c4\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2"+
    "\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u02c4"+
    "\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747"+
    "\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f"+
    "\0\u02c4\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u02c4"+
    "\0\u02c4\0\u02c4\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\u1022\0\u1d80\0\u02c4\0\u02c4\0\u1dbb\0\u02c4"+
    "\0\u02c4\0\u1df6\0\u0461\0\u1e31\0\u0375\0\u1e6c\0\u1ea7\0\u1ee2"+
    "\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba"+
    "\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292"+
    "\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a"+
    "\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642"+
    "\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u02c4\0\u2769\0\u27a4\0\u27df"+
    "\0\u281a\0\u0973\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c"+
    "\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54"+
    "\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c"+
    "\0\u2d67\0\u2da2\0\u02c4\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9"+
    "\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1"+
    "\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279"+
    "\0\u32b4\0\u110e\0\u32ef\0\u332a\0\u1235\0\u3365\0\u33a0\0\u33db"+
    "\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3"+
    "\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b"+
    "\0\u37c6\0\u3801\0\u383c\0\u156f\0\u3877\0\u02c4\0\u38b2\0\u3877"+
    "\0\u38ed\0\u3928\0\u156f\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f"+
    "\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27"+
    "\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff"+
    "\0\u3e3a\0\u3e75\0\u3eb0\0\u191f\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c"+
    "\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u4174"+
    "\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311\0\u434c"+
    "\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u4524"+
    "\0\u455f\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1\0\u46fc"+
    "\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899\0\u48d4"+
    "\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71\0\u4aac"+
    "\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84"+
    "\0\u4cbf\0\u0375\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21"+
    "\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9"+
    "\0\u5034\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1"+
    "\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e\0\u53a9"+
    "\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b\0\u5546\0\u5581"+
    "\0\u55bc\0\u55f7\0\u5632\0\u566d\0\u56a8\0\u56e3\0\u571e\0\u5759"+
    "\0\u5794\0\u57cf\0\u580a\0\u5845\0\u5880\0\u58bb\0\u58f6\0\u5931"+
    "\0\u596c\0\u59a7\0\u59e2\0\u5a1d\0\u5a58\0\u5a93\0\u5ace\0\u5b09"+
    "\0\u5b44\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b\0\u5ca6\0\u5ce1"+
    "\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd\0\u5e08\0\u5e43\0\u5e7e\0\u5eb9"+
    "\0\u5ef4\0\u5f2f\0\u5f6a\0\u5fa5\0\u5fe0\0\u601b\0\u6056\0\u6091"+
    "\0\u60cc\0\u6107\0\u6142\0\u617d\0\u61b8\0\u61f3\0\u622e\0\u6269"+
    "\0\u62a4\0\u62df\0\u631a\0\u6355\0\u6390\0\u63cb\0\u6406\0\u6441"+
    "\0\u647c\0\u64b7\0\u64f2\0\u652d\0\u6568\0\u65a3\0\u4438\0\u65de"+
    "\0\u6619\0\u6654\0\u668f\0\u66ca\0\u6705\0\u6740\0\u677b\0\u67b6"+
    "\0\u67f1\0\u682c\0\u02c4\0\u6867\0\u68a2\0\u68dd\0\u6918\0\u6953"+
    "\0\u698e\0\u69c9\0\u6a04\0\u6a3f\0\u6a7a\0\u6ab5\0\u6af0\0\u6b2b"+
    "\0\u6b66\0\u6ba1\0\u0375\0\u6bdc\0\u6c17\0\u6c52\0\u6c8d\0\u6cc8"+
    "\0\u6d03\0\u6d3e\0\u6d79\0\u6db4\0\u6def\0\u6e2a\0\u6e65\0\u6ea0"+
    "\0\u6edb\0\u6f16\0\u6f51\0\u6f8c\0\u6fc7\0\u7002\0\u703d\0\u7078"+
    "\0\u70b3\0\u70ee\0\u7129\0\u7164\0\u719f\0\u71da\0\u7215\0\u7250"+
    "\0\u728b\0\u72c6\0\u7301\0\u733c\0\u7377\0\u73b2\0\u73ed\0\u7428"+
    "\0\u7463\0\u749e\0\u74d9\0\u7514\0\u754f\0\u758a\0\u75c5\0\u7600"+
    "\0\u763b\0\u7676\0\u76b1\0\u76ec\0\u7727\0\u7762\0\u779d\0\u77d8"+
    "\0\u7813\0\u784e\0\u7889\0\u78c4\0\u78ff\0\u793a\0\u7975\0\u79b0"+
    "\0\u79eb\0\u7a26\0\u7a61\0\u7a9c\0\u7ad7\0\u7b12\0\u7b4d\0\u7b88"+
    "\0\u7bc3\0\u7bfe\0\u7c39\0\u7c74\0\u7caf\0\u7cea\0\u7d25\0\u7d60"+
    "\0\u7d9b\0\u7dd6\0\u7e11\0\u7e4c\0\u7e87\0\u7ec2\0\u7efd\0\u7f38"+
    "\0\u7f73\0\u7fae\0\u7fe9\0\u8024\0\u805f\0\u809a\0\u80d5\0\u8110"+
    "\0\u814b\0\u8186\0\u81c1\0\u81fc\0\u8237\0\u8272\0\u82ad\0\u82e8"+
    "\0\u8323\0\u835e\0\u8399\0\u83d4\0\u840f\0\u844a\0\u8485\0\u84c0"+
    "\0\u84fb\0\u8536\0\u8571\0\u85ac\0\u85e7\0\u8622\0\u865d\0\u8698"+
    "\0\u86d3\0\u870e\0\u8749\0\u8784\0\u87bf\0\u87fa\0\u8835\0\u8870"+
    "\0\u88ab\0\u88e6\0\u8921\0\u895c\0\u8997\0\u89d2\0\u8a0d\0\u8a48"+
    "\0\u8a83\0\u8abe\0\u8af9\0\u8b34\0\u8b6f\0\u8baa\0\u8be5\0\u8c20"+
    "\0\u8c5b\0\u8c96\0\u8cd1\0\u8d0c\0\u8d47\0\u8d82\0\u8dbd\0\u8df8"+
    "\0\u8e33\0\u8e6e\0\u8ea9\0\u8ee4\0\u8f1f\0\u8f5a\0\u8f95\0\u8fd0"+
    "\0\u900b\0\u9046\0\u9081\0\u90bc\0\u90f7\0\u9132\0\u916d\0\u91a8"+
    "\0\u91e3\0\u921e\0\u9259\0\u9294\0\u92cf\0\u930a\0\u9345\0\u9380"+
    "\0\u93bb\0\u93f6\0\u9431\0\u946c\0\u94a7\0\u94e2\0\u951d\0\u9558"+
    "\0\u9593\0\u95ce\0\u9609\0\u9644\0\u967f\0\u96ba\0\u96f5\0\u9730"+
    "\0\u976b\0\u97a6\0\u97e1\0\u981c\0\u9857\0\u9892\0\u98cd\0\u9908"+
    "\0\u9943\0\u997e\0\u99b9\0\u99f4\0\u9a2f\0\u9a6a\0\u9aa5\0\u9ae0"+
    "\0\u9b1b\0\u9b56\0\u9b91\0\u9bcc\0\u9c07\0\u9c42\0\u9c7d\0\u9cb8"+
    "\0\u9cf3\0\u9d2e\0\u9d69\0\u9da4\0\u9ddf\0\u9e1a\0\u9e55\0\u9e90"+
    "\0\u9ecb\0\u9f06\0\u9f41\0\u9f7c\0\u9fb7\0\u9ff2\0\u4b98\0\ua02d"+
    "\0\ua068\0\ua0a3\0\ua0de\0\ua119\0\ua154\0\u515b\0\ua18f\0\ua1ca"+
    "\0\ua205\0\ua240\0\ua27b\0\u5632\0\ua2b6\0\ua2f1\0\ua32c\0\ua367"+
    "\0\ua3a2\0\u5b09\0\ua3dd\0\ua418\0\ua453\0\ua48e\0\ua4c9\0\u5fe0"+
    "\0\ua504\0\ua53f\0\ua57a\0\ua5b5\0\ua5f0\0\u64b7\0\ua62b\0\ua666"+
    "\0\ua6a1\0\ua6dc\0\ua717\0\ua752\0\ua78d\0\ua7c8\0\ua803\0\ua83e"+
    "\0\ua879\0\ua8b4\0\ua8ef\0\ua92a\0\ua965\0\ua9a0\0\ua9db\0\uaa16"+
    "\0\uaa51\0\uaa8c\0\uaac7\0\uab02\0\uab3d\0\uab78\0\uabb3\0\uabee"+
    "\0\uac29\0\uac64\0\uac9f\0\uacda\0\uad15\0\uad50\0\uad8b\0\uadc6"+
    "\0\uae01\0\uae3c\0\uae77\0\uaeb2\0\uaeed\0\uaf28\0\uaf63\0\uaf9e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[816];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\2\16\1\15\1\16\1\17\1\15\1\16\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\2\20\1\26\1\27"+
    "\1\30\10\31\1\32\1\20\1\33\2\22\1\15\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\22\1\42\1\43"+
    "\2\22\1\44\2\22\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\22\1\54\1\22\1\55\1\15\11\56"+
    "\1\57\26\56\1\60\2\56\1\61\1\62\1\63\1\64"+
    "\2\56\1\65\2\56\1\66\2\56\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\5\56\11\15\1\76\10\15"+
    "\11\77\3\15\1\100\4\15\1\101\1\102\1\103\1\104"+
    "\2\15\1\105\2\15\1\106\2\15\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\6\15\2\116\1\15\1\116"+
    "\1\117\1\15\1\116\1\120\2\15\1\116\1\121\1\15"+
    "\2\120\1\122\1\120\11\123\1\124\1\120\1\125\5\15"+
    "\1\101\1\102\1\126\1\104\2\15\1\105\2\15\1\106"+
    "\2\15\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\3\15\1\127\2\15\2\116\1\15\1\116\1\117\1\15"+
    "\1\116\1\120\2\15\1\116\1\121\1\15\2\120\1\15"+
    "\1\120\11\123\1\124\1\120\1\125\5\15\1\101\1\102"+
    "\1\103\1\104\2\15\1\105\2\15\1\106\2\15\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\3\15\1\127"+
    "\1\15\2\130\1\15\2\130\1\15\3\130\1\15\3\130"+
    "\1\131\22\130\1\15\2\130\1\132\1\133\1\134\1\135"+
    "\2\130\1\136\2\130\1\137\2\130\1\140\1\141\1\142"+
    "\1\143\1\144\1\145\1\146\5\130\2\147\1\150\2\147"+
    "\1\151\10\147\1\152\24\147\1\153\1\154\1\155\1\156"+
    "\2\147\1\157\2\147\1\160\2\147\1\161\1\162\1\163"+
    "\1\164\1\165\1\166\1\167\5\147\2\170\1\171\2\15"+
    "\1\172\35\170\1\173\1\174\1\175\1\176\2\170\1\177"+
    "\2\170\1\200\2\170\1\201\1\202\1\203\1\204\1\205"+
    "\1\206\1\207\4\170\1\15\2\210\1\211\4\210\1\212"+
    "\1\213\2\210\1\212\1\214\1\210\2\213\1\210\1\213"+
    "\11\210\1\215\1\213\1\216\5\210\1\217\1\220\1\221"+
    "\1\222\2\210\1\223\2\210\1\224\2\210\1\225\1\226"+
    "\1\227\1\230\1\231\1\232\1\233\3\210\1\234\3\210"+
    "\1\235\40\210\1\217\1\220\1\221\1\222\2\210\1\223"+
    "\2\210\1\224\2\210\1\225\1\226\1\227\1\230\1\231"+
    "\1\232\1\233\7\210\1\236\40\210\1\217\1\220\1\221"+
    "\1\222\2\210\1\223\2\210\1\224\2\210\1\225\1\226"+
    "\1\227\1\230\1\231\1\232\1\233\5\210\43\15\1\101"+
    "\1\102\1\103\1\104\2\15\1\105\2\15\1\106\2\15"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\5\15"+
    "\75\0\1\16\124\0\1\23\36\0\1\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\30\22\1\0\1\22"+
    "\14\0\1\23\76\0\1\237\1\0\11\31\56\0\1\240"+
    "\2\0\1\241\12\0\1\23\50\0\1\242\7\0\11\243"+
    "\3\0\2\242\1\0\30\242\14\0\1\242\7\0\11\31"+
    "\3\0\2\242\1\0\30\242\35\0\2\23\72\0\2\23"+
    "\35\0\1\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\3\22\1\244\14\22\1\245\7\22\1\0\2\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\1\246"+
    "\14\22\1\247\1\22\1\250\6\22\1\251\1\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\1\252\14\22\1\253\12\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\1\254\3\22\1\255"+
    "\10\22\1\245\12\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\12\22\1\256\1\22\1\257"+
    "\4\22\1\260\6\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\1\261\7\22\1\262\4\22"+
    "\1\263\1\22\1\264\2\22\1\265\5\22\1\0\2\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\4\22"+
    "\1\266\10\22\1\267\12\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\5\22\1\245\5\22"+
    "\1\270\1\271\13\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\1\272\7\22\1\273\4\22"+
    "\1\274\12\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\1\275\16\22\1\276\2\22\1\277"+
    "\5\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\4\22\1\300\23\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\4\22\1\301"+
    "\10\22\1\302\3\22\1\303\5\22\1\304\1\0\2\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\7\22"+
    "\1\305\7\22\1\306\10\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\5\22\1\307\2\22"+
    "\1\310\17\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\1\263\7\22\1\311\17\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\4\22\1\312\2\22\1\313\20\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\4\22\1\314"+
    "\23\22\1\0\1\22\71\0\1\23\1\0\11\56\1\0"+
    "\26\56\1\0\32\56\55\0\1\315\5\0\1\316\2\0"+
    "\1\317\4\0\11\56\1\0\26\56\1\0\15\56\1\320"+
    "\25\56\1\0\26\56\1\0\4\56\1\321\10\56\1\322"+
    "\25\56\1\0\26\56\1\0\12\56\1\323\1\56\1\324"+
    "\26\56\1\0\26\56\1\0\1\325\14\56\1\326\1\56"+
    "\1\327\2\56\1\330\20\56\1\0\26\56\1\0\5\56"+
    "\1\322\5\56\1\331\1\332\26\56\1\0\26\56\1\0"+
    "\1\333\14\56\1\334\25\56\1\0\26\56\1\0\1\335"+
    "\16\56\1\336\2\56\1\337\20\56\1\0\26\56\1\0"+
    "\4\56\1\340\36\56\1\0\26\56\1\0\15\56\1\341"+
    "\3\56\1\342\21\56\1\0\26\56\1\0\7\56\1\343"+
    "\7\56\1\344\23\56\1\0\26\56\1\0\5\56\1\345"+
    "\2\56\1\346\32\56\1\0\26\56\1\0\1\326\7\56"+
    "\1\347\32\56\1\0\26\56\1\0\7\56\1\350\22\56"+
    "\22\0\11\77\76\0\1\100\112\0\1\351\61\0\1\352"+
    "\10\0\1\353\67\0\1\354\1\0\1\355\56\0\1\356"+
    "\14\0\1\357\1\0\1\360\2\0\1\361\55\0\1\353"+
    "\5\0\1\362\1\363\56\0\1\364\14\0\1\365\55\0"+
    "\1\366\16\0\1\367\2\0\1\370\54\0\1\371\103\0"+
    "\1\372\3\0\1\373\60\0\1\374\7\0\1\375\60\0"+
    "\1\376\2\0\1\377\62\0\1\357\7\0\1\u0100\71\0"+
    "\1\u0101\24\0\1\116\124\0\1\116\52\0\1\116\76\0"+
    "\1\u0102\74\0\11\123\73\0\2\116\72\0\2\116\126\0"+
    "\1\116\1\0\2\130\1\0\2\130\1\0\3\130\1\0"+
    "\3\130\1\0\22\130\1\0\34\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\22\130\1\0\15\130\1\u0103"+
    "\16\130\1\0\2\130\1\0\3\130\1\0\3\130\1\0"+
    "\22\130\1\0\4\130\1\u0104\10\130\1\u0105\16\130\1\0"+
    "\2\130\1\0\3\130\1\0\3\130\1\0\22\130\1\0"+
    "\12\130\1\u0106\1\130\1\u0107\17\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\22\130\1\0\1\u0108\14\130"+
    "\1\u0109\1\130\1\u010a\2\130\1\u010b\11\130\1\0\2\130"+
    "\1\0\3\130\1\0\3\130\1\0\22\130\1\0\5\130"+
    "\1\u0105\5\130\1\u010c\1\u010d\17\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\22\130\1\0\1\u010e\14\130"+
    "\1\u010f\16\130\1\0\2\130\1\0\3\130\1\0\3\130"+
    "\1\0\22\130\1\0\1\u0110\16\130\1\u0111\2\130\1\u0112"+
    "\11\130\1\0\2\130\1\0\3\130\1\0\3\130\1\0"+
    "\22\130\1\0\4\130\1\u0113\27\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\22\130\1\0\15\130\1\u0114"+
    "\3\130\1\u0115\12\130\1\0\2\130\1\0\3\130\1\0"+
    "\3\130\1\0\22\130\1\0\7\130\1\u0116\7\130\1\u0117"+
    "\14\130\1\0\2\130\1\0\3\130\1\0\3\130\1\0"+
    "\22\130\1\0\5\130\1\u0118\2\130\1\u0119\23\130\1\0"+
    "\2\130\1\0\3\130\1\0\3\130\1\0\22\130\1\0"+
    "\1\u0109\7\130\1\u011a\23\130\1\0\2\130\1\0\3\130"+
    "\1\0\3\130\1\0\22\130\1\0\7\130\1\u011b\22\130"+
    "\2\u011c\1\150\2\u011c\1\151\65\u011c\2\0\1\150\70\0"+
    "\2\u011d\1\u011e\2\u011d\1\u011f\13\u011d\1\u0120\51\u011d\2\u011c"+
    "\1\150\2\u011c\1\151\50\u011c\1\u0121\16\u011c\1\150\2\u011c"+
    "\1\151\37\u011c\1\u0122\10\u011c\1\u0123\16\u011c\1\150\2\u011c"+
    "\1\151\45\u011c\1\u0124\1\u011c\1\u0125\17\u011c\1\150\2\u011c"+
    "\1\151\33\u011c\1\u0126\14\u011c\1\u0127\1\u011c\1\u0128\2\u011c"+
    "\1\u0129\11\u011c\1\150\2\u011c\1\151\40\u011c\1\u0123\5\u011c"+
    "\1\u012a\1\u012b\17\u011c\1\150\2\u011c\1\151\33\u011c\1\u012c"+
    "\14\u011c\1\u012d\16\u011c\1\150\2\u011c\1\151\33\u011c\1\u012e"+
    "\16\u011c\1\u012f\2\u011c\1\u0130\11\u011c\1\150\2\u011c\1\151"+
    "\37\u011c\1\u0131\27\u011c\1\150\2\u011c\1\151\50\u011c\1\u0132"+
    "\3\u011c\1\u0133\12\u011c\1\150\2\u011c\1\151\42\u011c\1\u0134"+
    "\7\u011c\1\u0135\14\u011c\1\150\2\u011c\1\151\40\u011c\1\u0136"+
    "\2\u011c\1\u0137\23\u011c\1\150\2\u011c\1\151\33\u011c\1\u0127"+
    "\7\u011c\1\u0138\23\u011c\1\150\2\u011c\1\151\42\u011c\1\u0139"+
    "\22\u011c\2\170\4\0\64\170\3\0\1\171\70\0\2\170"+
    "\4\0\50\170\1\u013a\13\170\1\0\2\170\4\0\37\170"+
    "\1\u013b\10\170\1\u013c\13\170\1\0\2\170\4\0\45\170"+
    "\1\u013d\1\170\1\u013e\14\170\1\0\2\170\4\0\33\170"+
    "\1\u013f\14\170\1\u0140\1\170\1\u0141\2\170\1\u0142\6\170"+
    "\1\0\2\170\4\0\40\170\1\u013c\5\170\1\u0143\1\u0144"+
    "\14\170\1\0\2\170\4\0\33\170\1\u0145\14\170\1\u0146"+
    "\13\170\1\0\2\170\4\0\33\170\1\u0147\16\170\1\u0148"+
    "\2\170\1\u0149\6\170\1\0\2\170\4\0\37\170\1\u014a"+
    "\24\170\1\0\2\170\4\0\50\170\1\u014b\3\170\1\u014c"+
    "\7\170\1\0\2\170\4\0\42\170\1\u014d\7\170\1\u014e"+
    "\11\170\1\0\2\170\4\0\40\170\1\u014f\2\170\1\u0150"+
    "\20\170\1\0\2\170\4\0\33\170\1\u0140\7\170\1\u0151"+
    "\20\170\1\0\2\170\4\0\42\170\1\u0152\21\170\35\0"+
    "\1\212\52\0\1\212\111\0\2\212\72\0\2\212\126\0"+
    "\1\212\20\0\1\u0153\1\237\1\0\11\u0154\40\0\1\242"+
    "\11\0\1\242\7\0\11\242\3\0\2\242\1\0\30\242"+
    "\1\0\1\242\1\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\3\22\1\u0155\24\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\12\22\1\u0156"+
    "\15\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\15\22\1\u0157\12\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\4\22\1\u0158"+
    "\23\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\21\22\1\u0159\6\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\12\22\1\u015a"+
    "\15\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\14\22\1\u015b\13\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\26\22\1\u015c"+
    "\1\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\12\22\1\u015d\15\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\20\22\1\u015e"+
    "\7\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\22\22\1\u015f\5\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\7\22\1\u0160"+
    "\20\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\12\22\1\256\15\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\14\22\1\u0161"+
    "\13\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\17\22\1\245\10\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\15\22\1\u015f"+
    "\12\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\14\22\1\u0162\13\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\25\22\1\u0163"+
    "\2\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\22\22\1\u0164\5\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\16\22\1\u0165"+
    "\11\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\21\22\1\u0166\6\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\16\22\1\u0167"+
    "\11\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\14\22\1\u0168\13\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\3\22\1\u0169"+
    "\24\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\26\22\1\u016a\1\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\1\u016b\7\22"+
    "\1\u016c\17\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\1\22\1\u016d\26\22\1\0\2\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\21\22"+
    "\1\u016e\6\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\2\22\1\u016f\11\22\1\u0170\13\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\12\22\1\u0171\15\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\17\22\1\u0172\10\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\1\u0173\27\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\10\22\1\u0174\17\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\1\u0175\21\22\1\u015e\5\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\10\22\1\u0176\17\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\14\22\1\u0177\13\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\4\22\1\u0178\23\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\4\22\1\u0179\3\22\1\u017a\17\22\1\0\2\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\10\22"+
    "\1\u017b\17\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\1\u0164\27\22\1\0\1\22\37\0"+
    "\1\u017c\72\0\1\u017d\33\0\11\56\1\0\26\56\1\0"+
    "\14\56\1\u017e\26\56\1\0\26\56\1\0\12\56\1\u017f"+
    "\30\56\1\0\26\56\1\0\20\56\1\u0180\22\56\1\0"+
    "\26\56\1\0\22\56\1\u0181\20\56\1\0\26\56\1\0"+
    "\12\56\1\323\30\56\1\0\26\56\1\0\17\56\1\322"+
    "\23\56\1\0\26\56\1\0\15\56\1\u0181\25\56\1\0"+
    "\26\56\1\0\14\56\1\u0182\26\56\1\0\26\56\1\0"+
    "\16\56\1\u0183\24\56\1\0\26\56\1\0\21\56\1\u0184"+
    "\21\56\1\0\26\56\1\0\16\56\1\u0185\24\56\1\0"+
    "\26\56\1\0\3\56\1\u0186\37\56\1\0\26\56\1\0"+
    "\26\56\1\u0187\14\56\1\0\26\56\1\0\1\u0188\7\56"+
    "\1\u0189\32\56\1\0\26\56\1\0\1\56\1\u018a\41\56"+
    "\1\0\26\56\1\0\21\56\1\u018b\21\56\1\0\26\56"+
    "\1\0\12\56\1\u018c\30\56\1\0\26\56\1\0\17\56"+
    "\1\u018d\23\56\1\0\26\56\1\0\10\56\1\u018e\32\56"+
    "\1\0\26\56\1\0\22\56\1\u0180\20\56\1\0\26\56"+
    "\1\0\10\56\1\u018f\32\56\1\0\26\56\1\0\14\56"+
    "\1\u0190\26\56\1\0\26\56\1\0\4\56\1\u0191\36\56"+
    "\1\0\26\56\1\0\10\56\1\u0192\21\56\55\0\1\u0193"+
    "\70\0\1\u0194\100\0\1\u0195\74\0\1\u0196\62\0\1\354"+
    "\77\0\1\353\70\0\1\u0196\71\0\1\u0197\74\0\1\u0198"+
    "\75\0\1\u0199\67\0\1\u019a\57\0\1\u019b\115\0\1\u019c"+
    "\44\0\1\u019d\7\0\1\u019e\63\0\1\u019f\112\0\1\u01a0"+
    "\63\0\1\u01a1\77\0\1\u01a2\63\0\1\u01a3\104\0\1\u0195"+
    "\60\0\1\u01a4\76\0\1\u01a5\62\0\1\u01a6\76\0\1\u01a7"+
    "\21\0\2\130\1\0\2\130\1\0\3\130\1\0\3\130"+
    "\1\0\22\130\1\0\14\130\1\u01a8\17\130\1\0\2\130"+
    "\1\0\3\130\1\0\3\130\1\0\22\130\1\0\12\130"+
    "\1\u01a9\21\130\1\0\2\130\1\0\3\130\1\0\3\130"+
    "\1\0\22\130\1\0\20\130\1\u01aa\13\130\1\0\2\130"+
    "\1\0\3\130\1\0\3\130\1\0\22\130\1\0\22\130"+
    "\1\u01ab\11\130\1\0\2\130\1\0\3\130\1\0\3\130"+
    "\1\0\22\130\1\0\12\130\1\u0106\21\130\1\0\2\130"+
    "\1\0\3\130\1\0\3\130\1\0\22\130\1\0\17\130"+
    "\1\u0105\14\130\1\0\2\130\1\0\3\130\1\0\3\130"+
    "\1\0\22\130\1\0\15\130\1\u01ab\16\130\1\0\2\130"+
    "\1\0\3\130\1\0\3\130\1\0\22\130\1\0\14\130"+
    "\1\u01ac\17\130\1\0\2\130\1\0\3\130\1\0\3\130"+
    "\1\0\22\130\1\0\16\130\1\u01ad\15\130\1\0\2\130"+
    "\1\0\3\130\1\0\3\130\1\0\22\130\1\0\21\130"+
    "\1\u01ae\12\130\1\0\2\130\1\0\3\130\1\0\3\130"+
    "\1\0\22\130\1\0\16\130\1\u01af\15\130\1\0\2\130"+
    "\1\0\3\130\1\0\3\130\1\0\22\130\1\0\3\130"+
    "\1\u01b0\30\130\1\0\2\130\1\0\3\130\1\0\3\130"+
    "\1\0\22\130\1\0\26\130\1\u01b1\5\130\1\0\2\130"+
    "\1\0\3\130\1\0\3\130\1\0\22\130\1\0\1\u01b2"+
    "\7\130\1\u01b3\23\130\1\0\2\130\1\0\3\130\1\0"+
    "\3\130\1\0\22\130\1\0\1\130\1\u01b4\32\130\1\0"+
    "\2\130\1\0\3\130\1\0\3\130\1\0\22\130\1\0"+
    "\21\130\1\u01b5\12\130\1\0\2\130\1\0\3\130\1\0"+
    "\3\130\1\0\22\130\1\0\12\130\1\u01b6\21\130\1\0"+
    "\2\130\1\0\3\130\1\0\3\130\1\0\22\130\1\0"+
    "\17\130\1\u01b7\14\130\1\0\2\130\1\0\3\130\1\0"+
    "\3\130\1\0\22\130\1\0\10\130\1\u01b8\23\130\1\0"+
    "\2\130\1\0\3\130\1\0\3\130\1\0\22\130\1\0"+
    "\22\130\1\u01aa\11\130\1\0\2\130\1\0\3\130\1\0"+
    "\3\130\1\0\22\130\1\0\10\130\1\u01b9\23\130\1\0"+
    "\2\130\1\0\3\130\1\0\3\130\1\0\22\130\1\0"+
    "\14\130\1\u01ba\17\130\1\0\2\130\1\0\3\130\1\0"+
    "\3\130\1\0\22\130\1\0\4\130\1\u01bb\27\130\1\0"+
    "\2\130\1\0\3\130\1\0\3\130\1\0\22\130\1\0"+
    "\10\130\1\u01bc\21\130\2\u011d\1\u011e\2\u011d\1\u011f\65\u011d"+
    "\2\0\1\u011e\70\0\2\u011c\1\150\2\u011c\1\151\47\u011c"+
    "\1\u01bd\17\u011c\1\150\2\u011c\1\151\45\u011c\1\u01be\21\u011c"+
    "\1\150\2\u011c\1\151\53\u011c\1\u01bf\13\u011c\1\150\2\u011c"+
    "\1\151\55\u011c\1\u01c0\11\u011c\1\150\2\u011c\1\151\45\u011c"+
    "\1\u0124\21\u011c\1\150\2\u011c\1\151\52\u011c\1\u0123\14\u011c"+
    "\1\150\2\u011c\1\151\50\u011c\1\u01c0\16\u011c\1\150\2\u011c"+
    "\1\151\47\u011c\1\u01c1\17\u011c\1\150\2\u011c\1\151\51\u011c"+
    "\1\u01c2\15\u011c\1\150\2\u011c\1\151\54\u011c\1\u01c3\12\u011c"+
    "\1\150\2\u011c\1\151\51\u011c\1\u01c4\15\u011c\1\150\2\u011c"+
    "\1\151\36\u011c\1\u01c5\30\u011c\1\150\2\u011c\1\151\61\u011c"+
    "\1\u01c6\5\u011c\1\150\2\u011c\1\151\33\u011c\1\u01c7\7\u011c"+
    "\1\u01c8\23\u011c\1\150\2\u011c\1\151\34\u011c\1\u01c9\32\u011c"+
    "\1\150\2\u011c\1\151\54\u011c\1\u01ca\12\u011c\1\150\2\u011c"+
    "\1\151\45\u011c\1\u01cb\21\u011c\1\150\2\u011c\1\151\52\u011c"+
    "\1\u01cc\14\u011c\1\150\2\u011c\1\151\43\u011c\1\u01cd\23\u011c"+
    "\1\150\2\u011c\1\151\55\u011c\1\u01bf\11\u011c\1\150\2\u011c"+
    "\1\151\43\u011c\1\u01ce\23\u011c\1\150\2\u011c\1\151\47\u011c"+
    "\1\u01cf\17\u011c\1\150\2\u011c\1\151\37\u011c\1\u01d0\27\u011c"+
    "\1\150\2\u011c\1\151\43\u011c\1\u01d1\21\u011c\2\170\4\0"+
    "\47\170\1\u01d2\14\170\1\0\2\170\4\0\45\170\1\u01d3"+
    "\16\170\1\0\2\170\4\0\53\170\1\u01d4\10\170\1\0"+
    "\2\170\4\0\55\170\1\u01d5\6\170\1\0\2\170\4\0"+
    "\45\170\1\u013d\16\170\1\0\2\170\4\0\52\170\1\u013c"+
    "\11\170\1\0\2\170\4\0\50\170\1\u01d5\13\170\1\0"+
    "\2\170\4\0\47\170\1\u01d6\14\170\1\0\2\170\4\0"+
    "\51\170\1\u01d7\12\170\1\0\2\170\4\0\54\170\1\u01d8"+
    "\7\170\1\0\2\170\4\0\51\170\1\u01d9\12\170\1\0"+
    "\2\170\4\0\36\170\1\u01da\25\170\1\0\2\170\4\0"+
    "\61\170\1\u01db\2\170\1\0\2\170\4\0\33\170\1\u01dc"+
    "\7\170\1\u01dd\20\170\1\0\2\170\4\0\34\170\1\u01de"+
    "\27\170\1\0\2\170\4\0\54\170\1\u01df\7\170\1\0"+
    "\2\170\4\0\45\170\1\u01e0\16\170\1\0\2\170\4\0"+
    "\52\170\1\u01e1\11\170\1\0\2\170\4\0\43\170\1\u01e2"+
    "\20\170\1\0\2\170\4\0\55\170\1\u01d4\6\170\1\0"+
    "\2\170\4\0\43\170\1\u01e3\20\170\1\0\2\170\4\0"+
    "\47\170\1\u01e4\14\170\1\0\2\170\4\0\37\170\1\u01e5"+
    "\24\170\1\0\2\170\4\0\43\170\1\u01e6\20\170\20\0"+
    "\1\u0153\1\u01e7\1\0\11\u0154\62\0\11\u0154\40\0\1\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\17\22"+
    "\1\u01e8\10\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\1\u01e9\27\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\12\22\1\245"+
    "\15\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\1\u01ea\27\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\4\22\1\u01eb\23\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\12\22\1\u01ec\15\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\20\22\1\u01ed\1\u01ee"+
    "\6\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\20\22\1\u017a\7\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\4\22\1\u01ef"+
    "\23\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\4\22\1\245\23\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\13\22\1\245"+
    "\14\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\4\22\1\u01f0\23\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\14\22\1\u01f1"+
    "\13\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\2\22\1\u01f2\25\22\1\0\2\22\10\0"+
    "\1\u01f3\1\22\7\0\11\22\3\0\2\22\1\0\30\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\17\22\1\u015c\10\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\15\22\1\u01f4\12\22"+
    "\1\0\2\22\11\0\1\22\7\0\1\22\1\u01f5\1\u01f6"+
    "\1\u01f7\2\22\1\u01f8\1\22\1\245\3\0\2\22\1\0"+
    "\4\22\1\u01f9\23\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\16\22\1\u01fa\11\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\22\22\1\u01fb\5\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\10\22\1\u01fc\17\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\1\u01fd\27\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\6\22\1\u01fe\21\22\1\0\2\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\23\22"+
    "\1\u01ff\4\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\12\22\1\u0200\15\22\1\0\2\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\22\22"+
    "\1\u0201\5\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\15\22\1\u0202\12\22\1\0\2\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\3\22"+
    "\1\u0203\24\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\10\22\1\u0204\17\22\1\0\2\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\10\22"+
    "\1\u0205\11\22\1\u0206\5\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\1\22\1\u0207\26\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\20\22\1\245\7\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\14\22\1\u0208\13\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\25\22\1\u0209\2\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\21\22\1\u020a\6\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\24\22\1\245\3\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\11\22\1\u015c\16\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\12\22\1\u015e\15\22\1\0\1\22\37\0\1\317"+
    "\72\0\1\315\33\0\11\56\1\0\26\56\1\0\20\56"+
    "\1\u020b\1\u020c\21\56\1\0\26\56\1\0\4\56\1\u020d"+
    "\36\56\1\0\26\56\1\0\4\56\1\322\36\56\1\0"+
    "\26\56\1\0\13\56\1\322\27\56\1\0\26\56\1\0"+
    "\2\56\1\u020e\40\56\1\0\26\56\1\0\15\56\1\u020f"+
    "\25\56\1\0\11\56\1\u0210\1\u0211\1\u0212\2\56\1\u0213"+
    "\1\56\1\322\5\56\1\0\4\56\1\u0214\36\56\1\0"+
    "\26\56\1\0\16\56\1\u0215\24\56\1\0\26\56\1\0"+
    "\10\56\1\u0216\32\56\1\0\26\56\1\0\1\u0217\42\56"+
    "\1\0\26\56\1\0\6\56\1\u0218\34\56\1\0\26\56"+
    "\1\0\23\56\1\u0219\17\56\1\0\26\56\1\0\12\56"+
    "\1\u021a\30\56\1\0\26\56\1\0\22\56\1\u021b\20\56"+
    "\1\0\26\56\1\0\10\56\1\u021c\32\56\1\0\26\56"+
    "\1\0\10\56\1\u021d\11\56\1\u021e\20\56\1\0\26\56"+
    "\1\0\20\56\1\322\22\56\1\0\26\56\1\0\25\56"+
    "\1\u021f\15\56\1\0\26\56\1\0\21\56\1\u0220\21\56"+
    "\1\0\26\56\1\0\24\56\1\322\16\56\1\0\26\56"+
    "\1\0\12\56\1\u0180\17\56\61\0\1\u0221\1\u0222\55\0"+
    "\1\u0223\72\0\1\353\101\0\1\353\61\0\1\u0224\105\0"+
    "\1\u0225\37\0\1\u0226\1\u0227\1\u0228\2\0\1\u0229\1\0"+
    "\1\353\12\0\1\u022a\104\0\1\u022b\64\0\1\u022c\62\0"+
    "\1\u022d\100\0\1\u022e\107\0\1\u022f\61\0\1\u0230\102\0"+
    "\1\u0231\60\0\1\u0232\72\0\1\u0233\11\0\1\u0234\70\0"+
    "\1\353\77\0\1\u0235\66\0\1\u0236\75\0\1\353\60\0"+
    "\1\u0195\17\0\2\130\1\0\2\130\1\0\3\130\1\0"+
    "\3\130\1\0\22\130\1\0\20\130\1\u0237\1\u0238\12\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\22\130"+
    "\1\0\4\130\1\u0239\27\130\1\0\2\130\1\0\3\130"+
    "\1\0\3\130\1\0\22\130\1\0\4\130\1\u0105\27\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\22\130"+
    "\1\0\13\130\1\u0105\20\130\1\0\2\130\1\0\3\130"+
    "\1\0\3\130\1\0\22\130\1\0\2\130\1\u023a\31\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\22\130"+
    "\1\0\15\130\1\u023b\16\130\1\0\2\130\1\0\3\130"+
    "\1\0\3\130\1\0\5\130\1\u023c\1\u023d\1\u023e\2\130"+
    "\1\u023f\1\130\1\u0105\5\130\1\0\4\130\1\u0240\27\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\22\130"+
    "\1\0\16\130\1\u0241\15\130\1\0\2\130\1\0\3\130"+
    "\1\0\3\130\1\0\22\130\1\0\10\130\1\u0242\23\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\22\130"+
    "\1\0\1\u0243\33\130\1\0\2\130\1\0\3\130\1\0"+
    "\3\130\1\0\22\130\1\0\6\130\1\u0244\25\130\1\0"+
    "\2\130\1\0\3\130\1\0\3\130\1\0\22\130\1\0"+
    "\23\130\1\u0245\10\130\1\0\2\130\1\0\3\130\1\0"+
    "\3\130\1\0\22\130\1\0\12\130\1\u0246\21\130\1\0"+
    "\2\130\1\0\3\130\1\0\3\130\1\0\22\130\1\0"+
    "\22\130\1\u0247\11\130\1\0\2\130\1\0\3\130\1\0"+
    "\3\130\1\0\22\130\1\0\10\130\1\u0248\23\130\1\0"+
    "\2\130\1\0\3\130\1\0\3\130\1\0\22\130\1\0"+
    "\10\130\1\u0249\11\130\1\u024a\11\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\22\130\1\0\20\130\1\u0105"+
    "\13\130\1\0\2\130\1\0\3\130\1\0\3\130\1\0"+
    "\22\130\1\0\25\130\1\u024b\6\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\22\130\1\0\21\130\1\u024c"+
    "\12\130\1\0\2\130\1\0\3\130\1\0\3\130\1\0"+
    "\22\130\1\0\24\130\1\u0105\7\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\22\130\1\0\12\130\1\u01aa"+
    "\17\130\2\u011c\1\150\2\u011c\1\151\53\u011c\1\u024d\1\u024e"+
    "\12\u011c\1\150\2\u011c\1\151\37\u011c\1\u024f\27\u011c\1\150"+
    "\2\u011c\1\151\37\u011c\1\u0123\27\u011c\1\150\2\u011c\1\151"+
    "\46\u011c\1\u0123\20\u011c\1\150\2\u011c\1\151\35\u011c\1\u0250"+
    "\31\u011c\1\150\2\u011c\1\151\50\u011c\1\u0251\16\u011c\1\150"+
    "\2\u011c\1\151\15\u011c\1\u0252\1\u0253\1\u0254\2\u011c\1\u0255"+
    "\1\u011c\1\u0123\12\u011c\1\u0256\27\u011c\1\150\2\u011c\1\151"+
    "\51\u011c\1\u0257\15\u011c\1\150\2\u011c\1\151\43\u011c\1\u0258"+
    "\23\u011c\1\150\2\u011c\1\151\33\u011c\1\u0259\33\u011c\1\150"+
    "\2\u011c\1\151\41\u011c\1\u025a\25\u011c\1\150\2\u011c\1\151"+
    "\56\u011c\1\u025b\10\u011c\1\150\2\u011c\1\151\45\u011c\1\u025c"+
    "\21\u011c\1\150\2\u011c\1\151\55\u011c\1\u025d\11\u011c\1\150"+
    "\2\u011c\1\151\43\u011c\1\u025e\23\u011c\1\150\2\u011c\1\151"+
    "\43\u011c\1\u025f\11\u011c\1\u0260\11\u011c\1\150\2\u011c\1\151"+
    "\53\u011c\1\u0123\13\u011c\1\150\2\u011c\1\151\60\u011c\1\u0261"+
    "\6\u011c\1\150\2\u011c\1\151\54\u011c\1\u0262\12\u011c\1\150"+
    "\2\u011c\1\151\57\u011c\1\u0123\7\u011c\1\150\2\u011c\1\151"+
    "\45\u011c\1\u01bf\17\u011c\2\170\4\0\53\170\1\u0263\1\u0264"+
    "\7\170\1\0\2\170\4\0\37\170\1\u0265\24\170\1\0"+
    "\2\170\4\0\37\170\1\u013c\24\170\1\0\2\170\4\0"+
    "\46\170\1\u013c\15\170\1\0\2\170\4\0\35\170\1\u0266"+
    "\26\170\1\0\2\170\4\0\50\170\1\u0267\13\170\1\0"+
    "\2\170\4\0\15\170\1\u0268\1\u0269\1\u026a\2\170\1\u026b"+
    "\1\170\1\u013c\12\170\1\u026c\24\170\1\0\2\170\4\0"+
    "\51\170\1\u026d\12\170\1\0\2\170\4\0\43\170\1\u026e"+
    "\20\170\1\0\2\170\4\0\33\170\1\u026f\30\170\1\0"+
    "\2\170\4\0\41\170\1\u0270\22\170\1\0\2\170\4\0"+
    "\56\170\1\u0271\5\170\1\0\2\170\4\0\45\170\1\u0272"+
    "\16\170\1\0\2\170\4\0\55\170\1\u0273\6\170\1\0"+
    "\2\170\4\0\43\170\1\u0274\20\170\1\0\2\170\4\0"+
    "\43\170\1\u0275\11\170\1\u0276\6\170\1\0\2\170\4\0"+
    "\53\170\1\u013c\10\170\1\0\2\170\4\0\60\170\1\u0277"+
    "\3\170\1\0\2\170\4\0\54\170\1\u0278\7\170\1\0"+
    "\2\170\4\0\57\170\1\u013c\4\170\1\0\2\170\4\0"+
    "\45\170\1\u01d4\16\170\1\0\1\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\4\22\1\u0279\23\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\14\22\1\u027a\13\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\11\22\1\245\16\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\20\22\1\u027b\7\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\2\22\1\u027c\25\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\21\22\1\u027d\6\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\10\22\1\u027e\6\22\1\u027f"+
    "\10\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\6\22\1\u0280\12\22\1\u015e\6\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\17\22\1\u017a\10\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\4\22\1\u0281\23\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\21\22\1\u0282\6\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\17\22\1\u0283\10\22\1\0"+
    "\2\22\11\0\1\22\7\0\2\22\1\u0284\3\22\1\245"+
    "\2\22\3\0\2\22\1\0\30\22\1\0\2\22\11\0"+
    "\1\22\7\0\5\22\1\u0285\3\22\3\0\2\22\1\0"+
    "\30\22\1\0\2\22\11\0\1\22\7\0\2\22\1\245"+
    "\6\22\3\0\2\22\1\0\30\22\1\0\2\22\11\0"+
    "\1\22\7\0\4\22\1\245\4\22\3\0\2\22\1\0"+
    "\30\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\17\22\1\u0286\10\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\10\22\1\u0205"+
    "\17\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\21\22\1\u0287\6\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\5\22\1\u0288"+
    "\22\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\1\22\1\u017b\26\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\13\22\1\u0289"+
    "\14\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\1\u028a\27\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\10\22\1\u028b\17\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\17\22\1\u028c\10\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\14\22\1\u028d\13\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\3\22\1\u028e\24\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\14\22\1\u028f\13\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\2\22\1\u0283\25\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\15\22\1\u017a\12\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\20\22\1\u0290\7\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\4\22\1\u0291\23\22"+
    "\1\0\2\22\11\0\1\22\7\0\1\22\1\u01f5\1\u01f6"+
    "\1\u01f7\2\22\1\u01f8\1\22\1\245\3\0\2\22\1\0"+
    "\30\22\1\0\1\22\11\56\1\0\26\56\1\0\21\56"+
    "\1\u0292\21\56\1\0\26\56\1\0\10\56\1\u0293\6\56"+
    "\1\u0294\23\56\1\0\26\56\1\0\21\56\1\u0180\21\56"+
    "\1\0\26\56\1\0\21\56\1\u0295\21\56\1\0\26\56"+
    "\1\0\17\56\1\u0296\23\56\1\0\12\56\1\u0297\3\56"+
    "\1\322\7\56\1\0\43\56\1\0\15\56\1\u0298\10\56"+
    "\1\0\43\56\1\0\12\56\1\322\13\56\1\0\43\56"+
    "\1\0\14\56\1\322\11\56\1\0\43\56\1\0\26\56"+
    "\1\0\17\56\1\u0299\23\56\1\0\26\56\1\0\10\56"+
    "\1\u021d\32\56\1\0\26\56\1\0\5\56\1\u029a\35\56"+
    "\1\0\26\56\1\0\1\56\1\u0192\41\56\1\0\26\56"+
    "\1\0\13\56\1\u029b\27\56\1\0\26\56\1\0\1\u020d"+
    "\42\56\1\0\26\56\1\0\10\56\1\u029c\32\56\1\0"+
    "\26\56\1\0\17\56\1\u029d\23\56\1\0\26\56\1\0"+
    "\3\56\1\u029e\37\56\1\0\26\56\1\0\14\56\1\u029f"+
    "\26\56\1\0\26\56\1\0\2\56\1\u0296\40\56\1\0"+
    "\26\56\1\0\4\56\1\u02a0\36\56\1\0\11\56\1\u0210"+
    "\1\u0211\1\u0212\2\56\1\u0213\1\56\1\322\5\56\1\0"+
    "\32\56\62\0\1\u02a1\61\0\1\u02a2\6\0\1\u02a3\74\0"+
    "\1\u0195\72\0\1\u02a4\70\0\1\u02a5\36\0\1\u02a6\3\0"+
    "\1\353\71\0\1\u02a7\67\0\1\353\74\0\1\353\124\0"+
    "\1\u02a8\63\0\1\u0233\67\0\1\u02a9\66\0\1\u01a7\104\0"+
    "\1\u02aa\57\0\1\u0223\102\0\1\u02ab\101\0\1\u02ac\56\0"+
    "\1\u02ad\103\0\1\u02ae\60\0\1\u02a5\74\0\1\u02af\50\0"+
    "\1\u0226\1\u0227\1\u0228\2\0\1\u0229\1\0\1\353\40\0"+
    "\2\130\1\0\2\130\1\0\3\130\1\0\3\130\1\0"+
    "\22\130\1\0\21\130\1\u02b0\12\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\22\130\1\0\10\130\1\u02b1"+
    "\6\130\1\u02b2\14\130\1\0\2\130\1\0\3\130\1\0"+
    "\3\130\1\0\22\130\1\0\21\130\1\u01aa\12\130\1\0"+
    "\2\130\1\0\3\130\1\0\3\130\1\0\22\130\1\0"+
    "\21\130\1\u02b3\12\130\1\0\2\130\1\0\3\130\1\0"+
    "\3\130\1\0\22\130\1\0\17\130\1\u02b4\14\130\1\0"+
    "\2\130\1\0\3\130\1\0\3\130\1\0\6\130\1\u02b5"+
    "\3\130\1\u0105\7\130\1\0\34\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\11\130\1\u02b6\10\130\1\0"+
    "\34\130\1\0\2\130\1\0\3\130\1\0\3\130\1\0"+
    "\6\130\1\u0105\13\130\1\0\34\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\10\130\1\u0105\11\130\1\0"+
    "\34\130\1\0\2\130\1\0\3\130\1\0\3\130\1\0"+
    "\22\130\1\0\17\130\1\u02b7\14\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\22\130\1\0\10\130\1\u0249"+
    "\23\130\1\0\2\130\1\0\3\130\1\0\3\130\1\0"+
    "\22\130\1\0\5\130\1\u02b8\26\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\22\130\1\0\1\130\1\u01bc"+
    "\32\130\1\0\2\130\1\0\3\130\1\0\3\130\1\0"+
    "\22\130\1\0\13\130\1\u02b9\20\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\22\130\1\0\1\u0239\33\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\22\130"+
    "\1\0\10\130\1\u02ba\23\130\1\0\2\130\1\0\3\130"+
    "\1\0\3\130\1\0\22\130\1\0\17\130\1\u02bb\14\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\22\130"+
    "\1\0\3\130\1\u02bc\30\130\1\0\2\130\1\0\3\130"+
    "\1\0\3\130\1\0\22\130\1\0\14\130\1\u02bd\17\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\22\130"+
    "\1\0\2\130\1\u02b4\31\130\1\0\2\130\1\0\3\130"+
    "\1\0\3\130\1\0\22\130\1\0\4\130\1\u02be\27\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\5\130"+
    "\1\u023c\1\u023d\1\u023e\2\130\1\u023f\1\130\1\u0105\5\130"+
    "\1\0\32\130\2\u011c\1\150\2\u011c\1\151\54\u011c\1\u02bf"+
    "\12\u011c\1\150\2\u011c\1\151\43\u011c\1\u02c0\6\u011c\1\u02c1"+
    "\14\u011c\1\150\2\u011c\1\151\54\u011c\1\u01bf\12\u011c\1\150"+
    "\2\u011c\1\151\54\u011c\1\u02c2\12\u011c\1\150\2\u011c\1\151"+
    "\52\u011c\1\u02c3\14\u011c\1\150\2\u011c\1\151\16\u011c\1\u02c4"+
    "\3\u011c\1\u0123\44\u011c\1\150\2\u011c\1\151\21\u011c\1\u02c5"+
    "\45\u011c\1\150\2\u011c\1\151\16\u011c\1\u0123\50\u011c\1\150"+
    "\2\u011c\1\151\20\u011c\1\u0123\46\u011c\1\150\2\u011c\1\151"+
    "\52\u011c\1\u02c6\14\u011c\1\150\2\u011c\1\151\43\u011c\1\u025f"+
    "\23\u011c\1\150\2\u011c\1\151\40\u011c\1\u02c7\26\u011c\1\150"+
    "\2\u011c\1\151\34\u011c\1\u01d1\32\u011c\1\150\2\u011c\1\151"+
    "\46\u011c\1\u02c8\20\u011c\1\150\2\u011c\1\151\33\u011c\1\u024f"+
    "\33\u011c\1\150\2\u011c\1\151\43\u011c\1\u02c9\23\u011c\1\150"+
    "\2\u011c\1\151\52\u011c\1\u02ca\14\u011c\1\150\2\u011c\1\151"+
    "\36\u011c\1\u02cb\30\u011c\1\150\2\u011c\1\151\47\u011c\1\u02cc"+
    "\17\u011c\1\150\2\u011c\1\151\35\u011c\1\u02c3\31\u011c\1\150"+
    "\2\u011c\1\151\37\u011c\1\u02cd\27\u011c\1\150\2\u011c\1\151"+
    "\15\u011c\1\u0252\1\u0253\1\u0254\2\u011c\1\u0255\1\u011c\1\u0123"+
    "\40\u011c\2\170\4\0\54\170\1\u02ce\7\170\1\0\2\170"+
    "\4\0\43\170\1\u02cf\6\170\1\u02d0\11\170\1\0\2\170"+
    "\4\0\54\170\1\u01d4\7\170\1\0\2\170\4\0\54\170"+
    "\1\u02d1\7\170\1\0\2\170\4\0\52\170\1\u02d2\11\170"+
    "\1\0\2\170\4\0\16\170\1\u02d3\3\170\1\u013c\41\170"+
    "\1\0\2\170\4\0\21\170\1\u02d4\42\170\1\0\2\170"+
    "\4\0\16\170\1\u013c\45\170\1\0\2\170\4\0\20\170"+
    "\1\u013c\43\170\1\0\2\170\4\0\52\170\1\u02d5\11\170"+
    "\1\0\2\170\4\0\43\170\1\u0275\20\170\1\0\2\170"+
    "\4\0\40\170\1\u02d6\23\170\1\0\2\170\4\0\34\170"+
    "\1\u01e6\27\170\1\0\2\170\4\0\46\170\1\u02d7\15\170"+
    "\1\0\2\170\4\0\33\170\1\u0265\30\170\1\0\2\170"+
    "\4\0\43\170\1\u02d8\20\170\1\0\2\170\4\0\52\170"+
    "\1\u02d9\11\170\1\0\2\170\4\0\36\170\1\u02da\25\170"+
    "\1\0\2\170\4\0\47\170\1\u02db\14\170\1\0\2\170"+
    "\4\0\35\170\1\u02d2\26\170\1\0\2\170\4\0\37\170"+
    "\1\u02dc\24\170\1\0\2\170\4\0\15\170\1\u0268\1\u0269"+
    "\1\u026a\2\170\1\u026b\1\170\1\u013c\37\170\1\0\1\22"+
    "\11\0\1\22\7\0\11\22\3\0\2\22\1\0\20\22"+
    "\1\u0174\7\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\2\22\1\u02dd\25\22\1\0\2\22"+
    "\11\0\1\22\7\0\1\22\2\u02de\1\u02df\5\245\3\0"+
    "\2\22\1\0\30\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\15\22\1\u02e0\12\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\17\22\1\u02e1\10\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\14\22\1\u02e2\13\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\1\u0206\27\22\1\0\2\22\11\0\1\22\7\0\11\22"+
    "\3\0\2\22\1\0\1\u02e3\27\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\26\22\1\u017a"+
    "\1\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\10\22\1\u02e4\17\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\21\22\1\245"+
    "\6\22\1\0\2\22\11\0\1\22\7\0\10\22\1\245"+
    "\3\0\2\22\1\0\30\22\1\0\2\22\11\0\1\22"+
    "\7\0\6\22\1\245\2\22\3\0\2\22\1\0\30\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\14\22\1\u02e5\13\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\4\22\1\u015c\23\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\10\22\1\u02e6\17\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\1\245\27\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\21\22\1\u015e\6\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\2\22\1\245\25\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\14\22\1\u02e7\13\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\3\22\1\u015c\24\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\10\22\1\u02e8\17\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\6\22\1\245\21\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\5\22\1\u02e9\22\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\3\22\1\245\24\22\1\0"+
    "\1\22\11\56\1\0\26\56\1\0\17\56\1\u02ea\23\56"+
    "\1\0\26\56\1\0\14\56\1\344\26\56\1\0\26\56"+
    "\1\0\1\u021e\42\56\1\0\26\56\1\0\10\56\1\u02eb"+
    "\32\56\1\0\26\56\1\0\21\56\1\322\21\56\1\0"+
    "\20\56\1\322\5\56\1\0\43\56\1\0\16\56\1\322"+
    "\7\56\1\0\43\56\1\0\26\56\1\0\14\56\1\u02ec"+
    "\26\56\1\0\26\56\1\0\10\56\1\u02ed\32\56\1\0"+
    "\26\56\1\0\1\322\42\56\1\0\26\56\1\0\2\56"+
    "\1\322\40\56\1\0\26\56\1\0\14\56\1\u02ee\26\56"+
    "\1\0\26\56\1\0\10\56\1\u02ef\32\56\1\0\26\56"+
    "\1\0\6\56\1\322\34\56\1\0\26\56\1\0\3\56"+
    "\1\322\26\56\60\0\1\u02f0\67\0\1\375\56\0\1\u0234"+
    "\102\0\1\u02f1\103\0\1\353\42\0\1\353\70\0\1\353"+
    "\117\0\1\u02f2\66\0\1\u02f3\62\0\1\353\74\0\1\353"+
    "\104\0\1\u02f4\66\0\1\u02f5\70\0\1\353\67\0\1\353"+
    "\26\0\2\130\1\0\2\130\1\0\3\130\1\0\3\130"+
    "\1\0\22\130\1\0\17\130\1\u02f6\14\130\1\0\2\130"+
    "\1\0\3\130\1\0\3\130\1\0\22\130\1\0\14\130"+
    "\1\u0117\17\130\1\0\2\130\1\0\3\130\1\0\3\130"+
    "\1\0\22\130\1\0\1\u024a\33\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\22\130\1\0\10\130\1\u02f7"+
    "\23\130\1\0\2\130\1\0\3\130\1\0\3\130\1\0"+
    "\22\130\1\0\21\130\1\u0105\12\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\14\130\1\u0105\5\130\1\0"+
    "\34\130\1\0\2\130\1\0\3\130\1\0\3\130\1\0"+
    "\12\130\1\u0105\7\130\1\0\34\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\22\130\1\0\14\130\1\u02f8"+
    "\17\130\1\0\2\130\1\0\3\130\1\0\3\130\1\0"+
    "\22\130\1\0\10\130\1\u02f9\23\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\22\130\1\0\1\u0105\33\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\22\130"+
    "\1\0\2\130\1\u0105\31\130\1\0\2\130\1\0\3\130"+
    "\1\0\3\130\1\0\22\130\1\0\14\130\1\u02fa\17\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\22\130"+
    "\1\0\10\130\1\u02fb\23\130\1\0\2\130\1\0\3\130"+
    "\1\0\3\130\1\0\22\130\1\0\6\130\1\u0105\25\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\22\130"+
    "\1\0\3\130\1\u0105\26\130\2\u011c\1\150\2\u011c\1\151"+
    "\52\u011c\1\u02fc\14\u011c\1\150\2\u011c\1\151\47\u011c\1\u0135"+
    "\17\u011c\1\150\2\u011c\1\151\33\u011c\1\u0260\33\u011c\1\150"+
    "\2\u011c\1\151\43\u011c\1\u02fd\23\u011c\1\150\2\u011c\1\151"+
    "\54\u011c\1\u0123\12\u011c\1\150\2\u011c\1\151\24\u011c\1\u0123"+
    "\42\u011c\1\150\2\u011c\1\151\22\u011c\1\u0123\44\u011c\1\150"+
    "\2\u011c\1\151\47\u011c\1\u02fe\17\u011c\1\150\2\u011c\1\151"+
    "\43\u011c\1\u02ff\23\u011c\1\150\2\u011c\1\151\33\u011c\1\u0123"+
    "\33\u011c\1\150\2\u011c\1\151\35\u011c\1\u0123\31\u011c\1\150"+
    "\2\u011c\1\151\47\u011c\1\u0300\17\u011c\1\150\2\u011c\1\151"+
    "\43\u011c\1\u0301\23\u011c\1\150\2\u011c\1\151\41\u011c\1\u0123"+
    "\25\u011c\1\150\2\u011c\1\151\36\u011c\1\u0123\26\u011c\2\170"+
    "\4\0\52\170\1\u0302\11\170\1\0\2\170\4\0\47\170"+
    "\1\u014e\14\170\1\0\2\170\4\0\33\170\1\u0276\30\170"+
    "\1\0\2\170\4\0\43\170\1\u0303\20\170\1\0\2\170"+
    "\4\0\54\170\1\u013c\7\170\1\0\2\170\4\0\24\170"+
    "\1\u013c\37\170\1\0\2\170\4\0\22\170\1\u013c\41\170"+
    "\1\0\2\170\4\0\47\170\1\u0304\14\170\1\0\2\170"+
    "\4\0\43\170\1\u0305\20\170\1\0\2\170\4\0\33\170"+
    "\1\u013c\30\170\1\0\2\170\4\0\35\170\1\u013c\26\170"+
    "\1\0\2\170\4\0\47\170\1\u0306\14\170\1\0\2\170"+
    "\4\0\43\170\1\u0307\20\170\1\0\2\170\4\0\41\170"+
    "\1\u013c\22\170\1\0\2\170\4\0\36\170\1\u013c\25\170"+
    "\1\0\1\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\4\22\1\u0203\23\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\245\3\0\2\22\1\0\30\22\1\0\2\22"+
    "\11\0\1\22\7\0\3\245\6\22\3\0\2\22\1\0"+
    "\30\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\3\22\1\u02dd\24\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\22\22\1\u0308"+
    "\5\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\22\22\1\u015e\5\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\21\22\1\u0309"+
    "\6\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\15\22\1\u030a\12\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\1\u0157\27\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\4\22\1\263\23\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\21\22\1\u030b\6\22"+
    "\1\0\2\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\4\22\1\u030c\23\22\1\0\1\22\11\56\1\0"+
    "\26\56\1\0\22\56\1\u030d\20\56\1\0\26\56\1\0"+
    "\15\56\1\u030e\25\56\1\0\26\56\1\0\1\u030f\42\56"+
    "\1\0\26\56\1\0\4\56\1\326\36\56\1\0\26\56"+
    "\1\0\21\56\1\u0310\10\56\63\0\1\u0311\65\0\1\u0312"+
    "\55\0\1\u0313\76\0\1\357\107\0\1\u0314\10\0\2\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\22\130"+
    "\1\0\22\130\1\u0315\11\130\1\0\2\130\1\0\3\130"+
    "\1\0\3\130\1\0\22\130\1\0\15\130\1\u0316\16\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\22\130"+
    "\1\0\1\u0317\33\130\1\0\2\130\1\0\3\130\1\0"+
    "\3\130\1\0\22\130\1\0\4\130\1\u0109\27\130\1\0"+
    "\2\130\1\0\3\130\1\0\3\130\1\0\22\130\1\0"+
    "\21\130\1\u0318\10\130\2\u011c\1\150\2\u011c\1\151\55\u011c"+
    "\1\u0319\11\u011c\1\150\2\u011c\1\151\50\u011c\1\u031a\16\u011c"+
    "\1\150\2\u011c\1\151\33\u011c\1\u031b\33\u011c\1\150\2\u011c"+
    "\1\151\37\u011c\1\u0127\27\u011c\1\150\2\u011c\1\151\54\u011c"+
    "\1\u031c\10\u011c\2\170\4\0\55\170\1\u031d\6\170\1\0"+
    "\2\170\4\0\50\170\1\u031e\13\170\1\0\2\170\4\0"+
    "\33\170\1\u031f\30\170\1\0\2\170\4\0\37\170\1\u0140"+
    "\24\170\1\0\2\170\4\0\54\170\1\u0320\7\170\1\0"+
    "\1\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\2\22\1\u0321\25\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\4\22\1\u0322\23\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\14\22\1\245\13\22\1\0\2\22\11\0\1\22\7\0"+
    "\11\22\3\0\2\22\1\0\26\22\1\245\1\22\1\0"+
    "\2\22\11\0\1\22\7\0\11\22\3\0\2\22\1\0"+
    "\17\22\1\u0203\10\22\1\0\1\22\11\56\1\0\26\56"+
    "\1\0\2\56\1\u0323\40\56\1\0\26\56\1\0\14\56"+
    "\1\322\26\56\1\0\26\56\1\0\12\56\1\322\30\56"+
    "\1\0\26\56\1\0\26\56\1\322\3\56\43\0\1\u0324"+
    "\104\0\1\353\70\0\1\353\106\0\1\353\3\0\2\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\22\130"+
    "\1\0\2\130\1\u0325\31\130\1\0\2\130\1\0\3\130"+
    "\1\0\3\130\1\0\22\130\1\0\14\130\1\u0105\17\130"+
    "\1\0\2\130\1\0\3\130\1\0\3\130\1\0\22\130"+
    "\1\0\12\130\1\u0105\21\130\1\0\2\130\1\0\3\130"+
    "\1\0\3\130\1\0\22\130\1\0\26\130\1\u0105\3\130"+
    "\2\u011c\1\150\2\u011c\1\151\35\u011c\1\u0326\31\u011c\1\150"+
    "\2\u011c\1\151\47\u011c\1\u0123\17\u011c\1\150\2\u011c\1\151"+
    "\45\u011c\1\u0123\21\u011c\1\150\2\u011c\1\151\61\u011c\1\u0123"+
    "\3\u011c\2\170\4\0\35\170\1\u0327\26\170\1\0\2\170"+
    "\4\0\47\170\1\u013c\14\170\1\0\2\170\4\0\45\170"+
    "\1\u013c\16\170\1\0\2\170\4\0\61\170\1\u013c\2\170"+
    "\1\0\1\22\11\0\1\22\7\0\11\22\3\0\2\22"+
    "\1\0\21\22\1\u0328\6\22\1\0\2\22\11\0\1\22"+
    "\7\0\11\22\3\0\2\22\1\0\2\22\1\u0329\25\22"+
    "\1\0\1\22\11\56\1\0\26\56\1\0\21\56\1\u032a"+
    "\10\56\62\0\1\u032b\10\0\2\130\1\0\2\130\1\0"+
    "\3\130\1\0\3\130\1\0\22\130\1\0\21\130\1\u032c"+
    "\10\130\2\u011c\1\150\2\u011c\1\151\54\u011c\1\u032d\10\u011c"+
    "\2\170\4\0\54\170\1\u032e\7\170\1\0\1\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\15\22\1\263"+
    "\12\22\1\0\2\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\1\u032f\27\22\1\0\1\22\11\56\1\0"+
    "\26\56\1\0\15\56\1\326\14\56\56\0\1\357\14\0"+
    "\2\130\1\0\2\130\1\0\3\130\1\0\3\130\1\0"+
    "\22\130\1\0\15\130\1\u0109\14\130\2\u011c\1\150\2\u011c"+
    "\1\151\50\u011c\1\u0127\14\u011c\2\170\4\0\50\170\1\u0140"+
    "\13\170\1\0\1\22\11\0\1\22\7\0\11\22\3\0"+
    "\2\22\1\0\12\22\1\u0330\15\22\1\0\2\22\11\0"+
    "\1\22\7\0\11\22\3\0\2\22\1\0\12\22\1\u0203"+
    "\15\22\1\0\1\22";

  private static int [] zzUnpackTrans() {
    int [] result = new int[45017];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\6\0\1\1\4\0\2\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\31\1\1\11\16\1\1\11\17\1"+
    "\1\11\12\1\1\11\16\1\1\11\20\1\1\11\16\1"+
    "\3\11\22\1\2\11\1\0\2\11\53\1\1\11\2\0"+
    "\31\1\2\0\1\11\26\0\32\1\2\0\1\11\2\1"+
    "\2\0\1\1\26\0\31\1\1\0\50\1\2\0\25\1"+
    "\6\0\1\1\16\0\25\1\6\0\1\1\16\0\25\1"+
    "\1\0\13\1\1\11\55\1\25\0\27\1\25\0\77\1"+
    "\17\0\17\1\17\0\42\1\4\0\1\1\1\0\6\1"+
    "\4\0\1\1\1\0\17\1\4\0\4\1\4\0\7\1"+
    "\1\0\1\1\1\0\4\1\1\0\1\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[816];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    public static int errorLine = -1;
    public static int errorColumn = -1;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case Comments: {
              errores.add(new Token("/**", yyline, yycolumn, "Error: llave comentario abierta"));
            }  // fall though
            case 817: break;
            default:
          {   for(Token t: tokens){
    t.print();
  }

  System.out.println("\nErrores\n");
  for(Token t: errores){
    t.print();
  }
  return 0;
 }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Error Decimal"));
            }
            // fall through
          case 33: break;
          case 2:
            { 
            }
            // fall through
          case 34: break;
          case 3:
            { System.out.println(yyline);
                                  System.out.println(yycolumn);
                                  throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 35: break;
          case 4:
            { /* ignore */
            }
            // fall through
          case 36: break;
          case 5:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 37: break;
          case 6:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 38: break;
          case 7:
            { string.setLength(0); string.append(yytext()); yybegin(indetifierState);
            }
            // fall through
          case 39: break;
          case 8:
            { string.setLength(0); yybegin(Chars);
            }
            // fall through
          case 40: break;
          case 9:
            { string.setLength(0);
                                    string.append(yytext());
                                    yybegin(numberState);
            }
            // fall through
          case 41: break;
          case 10:
            { string.append( yytext() );
            }
            // fall through
          case 42: break;
          case 11:
            { yybegin(YYINITIAL);
                                   tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 43: break;
          case 12:
            { yybegin(YYINITIAL);
                                    string.append( yytext() ); 
                                    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada"));
            }
            // fall through
          case 44: break;
          case 13:
            { yybegin(YYINITIAL);
                                    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
            }
            // fall through
          case 45: break;
          case 14:
            { string.append(yytext());
            }
            // fall through
          case 46: break;
          case 15:
            { yybegin(NaturalNumbers);
                                    string.append(yytext());
            }
            // fall through
          case 47: break;
          case 16:
            { yybegin(YYINITIAL);
                                   tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
            }
            // fall through
          case 48: break;
          case 17:
            { if(errorLine == -1){
                                                                    errorLine = yyline;
                                                                    errorColumn = yycolumn;
                                                                  }
            }
            // fall through
          case 49: break;
          case 18:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 50: break;
          case 19:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "identificador"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 51: break;
          case 20:
            { string.append(yytext()); yybegin(indetifierError);
            }
            // fall through
          case 52: break;
          case 21:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Error de identificador"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 53: break;
          case 22:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Error Decimal"));
                   yybegin(YYINITIAL);
            }
            // fall through
          case 54: break;
          case 23:
            { errorLine = -1;
                                    errorColumn = -1; 
                                    yybegin(Comments);
            }
            // fall through
          case 55: break;
          case 24:
            { yybegin(lineComment);
            }
            // fall through
          case 56: break;
          case 25:
            { string.setLength(0); string.append(yytext()); yybegin(indetifierError);
            }
            // fall through
          case 57: break;
          case 26:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 58: break;
          case 27:
            { string.append(yytext()); yybegin(decimalError);
            }
            // fall through
          case 59: break;
          case 28:
            { if(errorLine != -1){
                                      errores.add(new Token("*", errorLine, errorColumn, "Error: linea sin * <comentario bloque>"));
                                    }
                                    yybegin(YYINITIAL);
            }
            // fall through
          case 60: break;
          case 29:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Error decimal"));
            }
            // fall through
          case 61: break;
          case 30:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 62: break;
          case 31:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 63: break;
          case 32:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
