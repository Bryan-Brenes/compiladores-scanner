// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

/* JFlex example: partial Java language lexer specification */
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int hexaState = 4;
  public static final int hexaStateC = 6;
  public static final int hexaStateError = 8;
  public static final int hexaStateCError = 10;
  public static final int numberState = 12;
  public static final int NaturalNumbers = 14;
  public static final int Chars = 16;
  public static final int Identificadorcillo = 18;
  public static final int stateNosibol = 20;
  public static final int filtro = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\3\u1f00\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\3\u1f00\1\u3e00\1\u3f00\4\u1f00"+
    "\1\u4000\11\u1f00\3\u0100\1\u4100\1\u4200\13\u1f00\4\u0100\1\u4300"+
    "\63\u1f00\2\u0100\1\u4400\4\u1f00\1\u4500\100\u1f00\1\u4600\40\u1f00"+
    "\1\u4700\1\u4800\1\u1f00\1\u4900\1\u4a00\1\u4b00\1\u4c00\26\u1f00"+
    "\1\u4d00\21\u1f00\246\u0100\1\u4e00\20\u0100\1\u4f00\1\u5000\77\u1f00"+
    "\2\u0100\1\u5000\u0b05\u1f00\1\u5100\1\u5200\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\3\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\32\1\10\1\34\1\35\1\36\1\37\1\10"+
    "\1\3\4\40\1\41\1\40\24\42\1\13\1\43\1\13"+
    "\1\10\1\7\1\3\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\42\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\42\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\13\1\74\1\13"+
    "\1\10\41\0\2\3\4\7\4\3\1\7\2\3\1\0"+
    "\7\3\1\7\4\3\1\7\5\3\27\7\1\3\37\7"+
    "\1\3\u01ca\7\4\3\14\7\16\3\5\7\7\3\1\7"+
    "\1\3\1\7\21\3\160\0\5\7\1\3\2\7\2\3"+
    "\4\7\10\3\1\7\1\3\3\7\1\3\1\7\1\3"+
    "\24\7\1\3\123\7\1\3\213\7\1\3\5\0\2\3"+
    "\236\7\11\3\46\7\2\3\1\7\7\3\47\7\7\3"+
    "\1\7\1\3\55\0\1\3\1\0\1\3\2\0\1\3"+
    "\2\0\1\3\1\0\10\3\33\7\5\3\3\7\15\3"+
    "\5\0\6\3\1\7\4\3\13\0\5\3\53\7\37\0"+
    "\4\3\2\7\1\0\143\7\1\3\1\7\10\0\1\3"+
    "\6\0\2\7\2\0\1\3\4\0\2\7\12\0\3\7"+
    "\2\3\1\7\17\3\1\0\1\7\1\0\36\7\33\0"+
    "\2\3\131\7\13\0\1\7\16\3\12\0\41\7\11\0"+
    "\2\7\4\3\1\7\5\3\26\7\4\0\1\7\11\0"+
    "\1\7\3\0\1\7\5\0\22\3\31\7\3\0\104\3"+
    "\1\7\1\3\13\7\67\3\33\0\1\3\4\0\66\7"+
    "\3\0\1\7\22\0\1\7\7\0\12\7\2\0\2\3"+
    "\12\0\1\3\7\7\1\3\7\7\1\3\3\0\1\3"+
    "\10\7\2\3\2\7\2\3\26\7\1\3\7\7\1\3"+
    "\1\7\3\3\4\7\2\3\1\0\1\7\7\0\2\3"+
    "\2\0\2\3\3\0\1\7\10\3\1\0\4\3\2\7"+
    "\1\3\3\7\2\0\2\3\12\0\4\7\7\3\1\7"+
    "\5\3\3\0\1\3\6\7\4\3\2\7\2\3\26\7"+
    "\1\3\7\7\1\3\2\7\1\3\2\7\1\3\2\7"+
    "\2\3\1\0\1\3\5\0\4\3\2\0\2\3\3\0"+
    "\3\3\1\0\7\3\4\7\1\3\1\7\7\3\14\0"+
    "\3\7\1\0\13\3\3\0\1\3\11\7\1\3\3\7"+
    "\1\3\26\7\1\3\7\7\1\3\2\7\1\3\5\7"+
    "\2\3\1\0\1\7\10\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\7\17\3\2\7\2\0\2\3\12\0\1\3"+
    "\1\7\17\3\3\0\1\3\10\7\2\3\2\7\2\3"+
    "\26\7\1\3\7\7\1\3\2\7\1\3\5\7\2\3"+
    "\1\0\1\7\7\0\2\3\2\0\2\3\3\0\10\3"+
    "\2\0\4\3\2\7\1\3\3\7\2\0\2\3\12\0"+
    "\1\3\1\7\20\3\1\0\1\7\1\3\6\7\3\3"+
    "\3\7\1\3\4\7\3\3\2\7\1\3\1\7\1\3"+
    "\2\7\3\3\2\7\3\3\3\7\3\3\14\7\4\3"+
    "\5\0\3\3\3\0\1\3\4\0\2\3\1\7\6\3"+
    "\1\0\16\3\12\0\11\3\1\7\7\3\3\0\1\3"+
    "\10\7\1\3\3\7\1\3\27\7\1\3\12\7\1\3"+
    "\5\7\3\3\1\7\7\0\1\3\3\0\1\3\4\0"+
    "\7\3\2\0\1\3\2\7\6\3\2\7\2\0\2\3"+
    "\12\0\22\3\2\0\1\3\10\7\1\3\3\7\1\3"+
    "\27\7\1\3\12\7\1\3\5\7\2\3\1\0\1\7"+
    "\7\0\1\3\3\0\1\3\4\0\7\3\2\0\7\3"+
    "\1\7\1\3\2\7\2\0\2\3\12\0\1\3\2\7"+
    "\17\3\2\0\1\3\10\7\1\3\3\7\1\3\51\7"+
    "\2\3\1\7\7\0\1\3\3\0\1\3\4\0\1\7"+
    "\10\3\1\0\10\3\2\7\2\0\2\3\12\0\12\3"+
    "\6\7\2\3\2\0\1\3\22\7\3\3\30\7\1\3"+
    "\11\7\1\3\1\7\2\3\7\7\3\3\1\0\4\3"+
    "\6\0\1\3\1\0\1\3\10\0\22\3\2\0\15\3"+
    "\60\7\1\0\2\7\7\0\4\3\10\7\10\0\1\3"+
    "\12\0\47\3\2\7\1\3\1\7\2\3\2\7\1\3"+
    "\1\7\2\3\1\7\6\3\4\7\1\3\7\7\1\3"+
    "\3\7\1\3\1\7\1\3\1\7\2\3\2\7\1\3"+
    "\4\7\1\0\2\7\6\0\1\3\2\0\1\7\2\3"+
    "\5\7\1\3\1\7\1\3\6\0\2\3\12\0\2\3"+
    "\4\7\40\3\1\7\27\3\2\0\6\3\12\0\13\3"+
    "\1\0\1\3\1\0\1\3\1\0\4\3\2\0\10\7"+
    "\1\3\44\7\4\3\24\0\1\3\2\0\5\7\13\0"+
    "\1\3\44\0\11\3\1\0\71\3\53\7\24\0\1\7"+
    "\12\0\6\3\6\7\4\0\4\7\3\0\1\7\3\0"+
    "\2\7\7\0\3\7\4\0\15\7\14\0\1\7\17\0"+
    "\2\3\46\7\1\3\1\7\5\3\1\7\2\3\53\7"+
    "\1\3\115\7\1\3\4\7\2\3\7\7\1\3\1\7"+
    "\1\3\4\7\2\3\51\7\1\3\4\7\2\3\41\7"+
    "\1\3\4\7\2\3\7\7\1\3\1\7\1\3\4\7"+
    "\2\3\17\7\1\3\71\7\1\3\4\7\2\3\103\7"+
    "\2\3\3\0\40\3\20\7\20\3\125\7\14\3\u016c\7"+
    "\2\3\21\7\1\3\32\7\5\3\113\7\3\3\3\7"+
    "\17\3\15\7\1\3\4\7\3\0\13\3\22\7\3\0"+
    "\13\3\22\7\2\0\14\3\15\7\1\3\3\7\1\3"+
    "\2\0\14\3\64\7\40\0\3\3\1\7\3\3\2\7"+
    "\1\0\2\3\12\0\41\3\3\0\2\3\12\0\6\3"+
    "\130\7\10\3\51\7\1\0\1\7\5\3\106\7\12\3"+
    "\35\7\3\3\14\0\4\3\14\0\12\3\12\0\36\7"+
    "\2\3\5\7\13\3\54\7\4\3\21\0\7\7\2\0"+
    "\6\3\12\0\46\3\27\7\5\0\4\3\65\7\12\0"+
    "\1\3\35\0\2\3\13\0\6\3\12\0\15\3\1\7"+
    "\130\3\5\0\57\7\21\0\7\7\4\3\12\0\21\3"+
    "\11\0\14\3\3\0\36\7\15\0\2\7\12\0\54\7"+
    "\16\0\14\3\44\7\24\0\10\3\12\0\3\3\3\7"+
    "\12\0\44\7\122\3\3\0\1\3\25\0\4\7\1\0"+
    "\4\7\3\0\2\7\11\3\300\7\47\0\25\3\4\0"+
    "\26\7\2\3\6\7\2\3\46\7\2\3\6\7\2\3"+
    "\10\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\37\7\2\3\65\7\1\3\7\7\1\3\1\7\3\3"+
    "\3\7\1\3\7\7\3\3\4\7\2\3\6\7\4\3"+
    "\15\7\5\3\3\7\1\3\7\7\16\3\5\0\32\3"+
    "\5\0\20\3\2\7\23\3\1\7\13\3\5\0\5\3"+
    "\6\0\1\3\1\7\15\3\1\7\20\3\15\7\3\3"+
    "\33\7\25\3\15\0\4\3\1\0\3\3\14\0\21\3"+
    "\1\7\4\3\1\7\2\3\12\7\1\3\1\7\3\3"+
    "\5\7\6\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\4\7\1\3\13\7\2\3\4\7\5\3\5\7\4\3"+
    "\1\7\21\3\51\7\u0177\3\57\7\1\3\57\7\1\3"+
    "\205\7\6\3\4\7\3\0\2\7\14\3\46\7\1\3"+
    "\1\7\5\3\1\7\2\3\70\7\7\3\1\7\17\3"+
    "\1\0\27\7\11\3\7\7\1\3\7\7\1\3\7\7"+
    "\1\3\7\7\1\3\7\7\1\3\7\7\1\3\7\7"+
    "\1\3\7\7\1\3\40\0\57\3\1\7\325\3\3\7"+
    "\31\3\11\7\6\0\1\3\5\7\2\3\5\7\4\3"+
    "\126\7\2\3\2\0\2\3\3\7\1\3\132\7\1\3"+
    "\4\7\5\3\51\7\3\3\136\7\21\3\33\7\65\3"+
    "\306\7\112\3\315\7\63\3\215\7\103\3\56\7\2\3"+
    "\15\7\3\3\20\7\12\0\2\7\24\3\57\7\1\0"+
    "\4\3\12\0\1\3\31\7\7\3\1\0\120\7\2\0"+
    "\45\3\11\7\2\3\147\7\2\3\4\7\1\3\4\7"+
    "\14\3\13\7\115\3\12\7\1\0\3\7\1\0\4\7"+
    "\1\0\27\7\5\0\20\3\1\7\7\3\64\7\14\3"+
    "\2\0\62\7\21\0\13\3\12\0\6\3\22\0\6\7"+
    "\3\3\1\7\4\3\12\0\34\7\10\0\2\3\27\7"+
    "\15\0\14\3\35\7\3\3\4\0\57\7\16\0\16\3"+
    "\1\7\12\0\46\3\51\7\16\0\11\3\3\7\1\0"+
    "\10\7\2\0\2\3\12\0\6\3\27\7\3\3\1\7"+
    "\1\0\4\3\60\7\1\0\1\7\3\0\2\7\2\0"+
    "\5\7\2\0\1\7\1\0\1\7\30\3\3\7\2\3"+
    "\13\7\5\0\2\3\3\7\2\0\12\3\6\7\2\3"+
    "\6\7\2\3\6\7\11\3\7\7\1\3\7\7\221\3"+
    "\43\7\10\0\1\3\2\0\2\3\12\0\6\3\244\7"+
    "\14\3\27\7\4\3\61\7\4\3\156\7\2\3\152\7"+
    "\46\3\7\7\14\3\5\7\5\3\1\7\1\0\12\7"+
    "\1\3\15\7\1\3\5\7\1\3\1\7\1\3\2\7"+
    "\1\3\2\7\1\3\154\7\41\3\153\7\22\3\100\7"+
    "\2\3\66\7\50\3\15\7\3\3\20\0\20\3\7\0"+
    "\14\3\2\7\30\3\3\7\31\3\1\7\6\3\5\7"+
    "\1\3\207\7\2\3\1\0\4\3\1\7\13\3\12\0"+
    "\7\3\32\7\4\3\1\7\1\3\32\7\13\3\131\7"+
    "\3\3\6\7\2\3\6\7\2\3\6\7\2\3\3\7"+
    "\3\3\2\7\3\3\2\7\22\3\3\0\4\3\14\7"+
    "\1\3\32\7\1\3\23\7\1\3\2\7\1\3\17\7"+
    "\2\3\16\7\42\3\173\7\105\3\65\7\210\3\1\0"+
    "\202\3\35\7\3\3\61\7\57\3\37\7\21\3\33\7"+
    "\65\3\36\7\2\3\44\7\4\3\10\7\1\3\5\7"+
    "\52\3\236\7\2\3\12\0\126\3\6\7\2\3\1\7"+
    "\1\3\54\7\1\3\2\7\3\3\1\7\2\3\27\7"+
    "\252\3\26\7\12\3\32\7\106\3\70\7\6\3\2\7"+
    "\100\3\1\7\3\0\1\3\2\0\5\3\4\0\4\7"+
    "\1\3\3\7\1\3\33\7\4\3\3\0\4\3\1\0"+
    "\40\3\35\7\203\3\66\7\12\3\26\7\12\3\23\7"+
    "\215\3\111\7\267\3\3\0\65\7\17\0\37\3\12\0"+
    "\20\3\3\0\55\7\13\0\2\3\1\0\22\3\31\7"+
    "\7\3\12\0\6\3\3\0\44\7\16\0\1\3\12\0"+
    "\100\3\3\0\60\7\16\0\4\7\13\3\12\0\246\3"+
    "\53\7\15\0\10\3\12\0\66\3\157\7\221\3\143\7"+
    "\235\3\57\7\321\3\71\7\307\3\105\7\13\3\1\7"+
    "\56\0\20\3\4\0\15\7\140\3\2\7\u0163\3\5\0"+
    "\3\3\26\0\2\3\7\0\36\3\4\0\224\3\3\0"+
    "\273\3\125\7\1\3\107\7\1\3\2\7\2\3\1\7"+
    "\2\3\2\7\2\3\4\7\1\3\14\7\1\3\1\7"+
    "\1\3\7\7\1\3\101\7\1\3\4\7\2\3\10\7"+
    "\1\3\7\7\1\3\34\7\1\3\4\7\1\3\5\7"+
    "\1\3\1\7\3\3\7\7\1\3\u0154\7\2\3\31\7"+
    "\1\3\31\7\1\3\37\7\1\3\31\7\1\3\37\7"+
    "\1\3\31\7\1\3\37\7\1\3\31\7\1\3\37\7"+
    "\1\3\31\7\1\3\10\7\2\3\62\0\4\7\1\3"+
    "\33\7\1\3\2\7\1\3\1\7\2\3\1\7\1\3"+
    "\12\7\1\3\4\7\1\3\1\7\1\3\1\7\6\3"+
    "\1\7\4\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\3\7\1\3\2\7\1\3\1\7\2\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\2\7\1\3\1\7\2\3\4\7\1\3\7\7\1\3"+
    "\4\7\1\3\4\7\1\3\1\7\1\3\12\7\1\3"+
    "\21\7\5\3\3\7\1\3\5\7\1\3\21\7\104\3"+
    "\327\7\51\3\65\7\13\3\336\7\343\3\1\0\36\3"+
    "\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21248];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\2\2\1\3\1\4\1\5\2\3\1\6"+
    "\5\3\2\7\3\3\21\5\1\3\1\10\2\11\1\12"+
    "\1\13\15\10\1\14\2\15\1\16\1\17\1\10\1\20"+
    "\1\10\5\21\11\14\12\22\1\23\1\24\15\23\2\25"+
    "\3\26\1\27\1\26\2\30\1\31\2\26\3\32\1\33"+
    "\12\32\1\26\1\34\2\35\1\36\15\34\2\37\1\40"+
    "\1\41\2\42\15\30\1\43\2\44\16\43\1\45\1\46"+
    "\4\47\1\50\2\47\15\46\1\47\1\0\1\51\10\0"+
    "\2\52\1\0\1\2\1\0\1\52\1\5\1\53\47\5"+
    "\2\10\1\53\26\10\2\0\1\53\26\0\1\52\2\0"+
    "\1\51\1\0\1\2\1\51\1\52\16\5\1\53\2\5"+
    "\1\53\23\5\1\54\1\5\6\10\1\53\16\10\6\0"+
    "\1\53\20\0\1\2\1\52\3\5\1\53\1\55\6\5"+
    "\1\56\1\57\17\5\1\55\6\5\1\53\25\10\1\53"+
    "\25\0\1\53\1\2\2\5\1\53\26\5\17\10\17\0"+
    "\1\5\2\53\7\5\1\53\2\5\4\10\1\53\1\10"+
    "\4\0\1\53\1\0\5\5\4\10\4\0\2\5\1\10"+
    "\1\0\2\5\1\10\1\0\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[601];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u02dc\0\u0319\0\u0356"+
    "\0\u02dc\0\u0393\0\u03d0\0\u040d\0\u02dc\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u02dc\0\u05f5\0\u0632\0\u066f"+
    "\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857"+
    "\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f"+
    "\0\u0a7c\0\u0ab9\0\u02dc\0\u0af6\0\u02dc\0\u02dc\0\u0b33\0\u0b70"+
    "\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58"+
    "\0\u0d95\0\u0dd2\0\u0e0f\0\u02dc\0\u02dc\0\u0e4c\0\u02dc\0\u02dc"+
    "\0\u0e89\0\u02dc\0\u0ec6\0\u02dc\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2"+
    "\0\u11df\0\u02dc\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128"+
    "\0\u1165\0\u11a2\0\u11df\0\u02dc\0\u02dc\0\u0f03\0\u0f40\0\u0f7d"+
    "\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165"+
    "\0\u11a2\0\u11df\0\u02dc\0\u121c\0\u1259\0\u02dc\0\u1296\0\u02dc"+
    "\0\u12d3\0\u02dc\0\u1310\0\u02dc\0\u134d\0\u138a\0\u02dc\0\u0f03"+
    "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb"+
    "\0\u1128\0\u1165\0\u11a2\0\u11df\0\u13c7\0\u02dc\0\u02dc\0\u1404"+
    "\0\u02dc\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071"+
    "\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u02dc\0\u1441"+
    "\0\u02dc\0\u02dc\0\u02dc\0\u147e\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2"+
    "\0\u11df\0\u02dc\0\u02dc\0\u14bb\0\u14f8\0\u0f03\0\u0f40\0\u0f7d"+
    "\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165"+
    "\0\u11a2\0\u11df\0\u02dc\0\u02dc\0\u1535\0\u02dc\0\u1572\0\u15af"+
    "\0\u02dc\0\u15ec\0\u1629\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u1666\0\u03d0\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u0501"+
    "\0\u057b\0\u17d4\0\u1811\0\u184e\0\u175a\0\u188b\0\u18c8\0\u1905"+
    "\0\u057b\0\u1942\0\u0393\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73"+
    "\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u1c5b"+
    "\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43"+
    "\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b"+
    "\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213"+
    "\0\u2250\0\u228d\0\u22ca\0\u2307\0\u0ab9\0\u2344\0\u2381\0\u23be"+
    "\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6"+
    "\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e"+
    "\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\u02dc\0\u28fc\0\u2939"+
    "\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21"+
    "\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09"+
    "\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1"+
    "\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9"+
    "\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1"+
    "\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u34a9"+
    "\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691"+
    "\0\u36ce\0\u370b\0\u3748\0\u3785\0\u37c2\0\u37ff\0\u383c\0\u3879"+
    "\0\u38b6\0\u0393\0\u38f3\0\u3930\0\u396d\0\u39aa\0\u39e7\0\u3a24"+
    "\0\u3a61\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c"+
    "\0\u3c49\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4"+
    "\0\u3e31\0\u3e6e\0\u3eab\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f\0\u3fdc"+
    "\0\u4019\0\u4056\0\u4093\0\u40d0\0\u410d\0\u414a\0\u4187\0\u41c4"+
    "\0\u4201\0\u423e\0\u427b\0\u42b8\0\u42f5\0\u4332\0\u436f\0\u2eb4"+
    "\0\u43ac\0\u43e9\0\u4426\0\u4463\0\u44a0\0\u44dd\0\u451a\0\u4557"+
    "\0\u4594\0\u45d1\0\u460e\0\u464b\0\u02dc\0\u02dc\0\u4688\0\u46c5"+
    "\0\u4702\0\u473f\0\u477c\0\u47b9\0\u47f6\0\u4833\0\u4870\0\u48ad"+
    "\0\u48ea\0\u4927\0\u4964\0\u49a1\0\u49de\0\u0393\0\u4a1b\0\u4a58"+
    "\0\u4a95\0\u4ad2\0\u4b0f\0\u4b4c\0\u4b89\0\u4bc6\0\u4c03\0\u4c40"+
    "\0\u4c7d\0\u4cba\0\u4cf7\0\u4d34\0\u4d71\0\u4dae\0\u4deb\0\u4e28"+
    "\0\u4e65\0\u4ea2\0\u4edf\0\u4f1c\0\u4f59\0\u4f96\0\u4fd3\0\u5010"+
    "\0\u504d\0\u508a\0\u50c7\0\u5104\0\u5141\0\u517e\0\u51bb\0\u51f8"+
    "\0\u5235\0\u5272\0\u52af\0\u52ec\0\u5329\0\u5366\0\u53a3\0\u53e0"+
    "\0\u541d\0\u545a\0\u5497\0\u54d4\0\u5511\0\u554e\0\u558b\0\u55c8"+
    "\0\u5605\0\u03d0\0\u5642\0\u567f\0\u56bc\0\u56f9\0\u5736\0\u5773"+
    "\0\u57b0\0\u57ed\0\u582a\0\u5867\0\u58a4\0\u58e1\0\u591e\0\u595b"+
    "\0\u5998\0\u59d5\0\u5a12\0\u5a4f\0\u5a8c\0\u5ac9\0\u5b06\0\u5b43"+
    "\0\u5b80\0\u5bbd\0\u5bfa\0\u5c37\0\u5c74\0\u5cb1\0\u5cee\0\u5d2b"+
    "\0\u5d68\0\u5da5\0\u5de2\0\u5e1f\0\u5e5c\0\u5e99\0\u5ed6\0\u5f13"+
    "\0\u5f50\0\u5f8d\0\u5fca\0\u6007\0\u6044\0\u6081\0\u60be\0\u60fb"+
    "\0\u6138\0\u6175\0\u61b2\0\u61ef\0\u622c\0\u6269\0\u62a6\0\u62e3"+
    "\0\u6320\0\u635d\0\u639a\0\u63d7\0\u6414\0\u6451\0\u648e\0\u64cb"+
    "\0\u6508\0\u6545\0\u6582\0\u3785\0\u65bf\0\u65fc\0\u6639\0\u6676"+
    "\0\u66b3\0\u66f0\0\u3d00\0\u672d\0\u676a\0\u67a7\0\u67e4\0\u6821"+
    "\0\u4201\0\u685e\0\u689b\0\u68d8\0\u6915\0\u6952\0\u698f\0\u69cc"+
    "\0\u6a09\0\u6a46\0\u6a83\0\u6ac0\0\u6afd\0\u6b3a\0\u6b77\0\u6bb4"+
    "\0\u6bf1\0\u6c2e\0\u6c6b\0\u6ca8\0\u6ce5\0\u6d22\0\u6d5f\0\u6d9c"+
    "\0\u6dd9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[601];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\2\16\1\15\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\2\23\1\26\1\27\1\23\1\30\1\31"+
    "\1\32\1\33\10\34\1\35\1\36\1\20\1\37\3\22"+
    "\1\15\1\40\1\41\1\42\1\43\1\44\1\45\1\22"+
    "\1\46\1\47\2\22\1\50\2\22\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\22\1\60\1\22\1\61"+
    "\2\62\1\63\1\62\1\64\1\62\1\65\3\62\1\66"+
    "\30\62\1\66\2\62\1\67\1\70\1\71\1\72\2\62"+
    "\1\73\2\62\1\74\2\62\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\4\62\1\104\2\105\1\104\1\106"+
    "\1\104\1\107\3\104\1\110\10\104\11\111\1\112\3\104"+
    "\2\113\2\104\2\114\1\115\1\116\1\117\1\120\2\104"+
    "\1\121\2\104\1\122\2\104\1\123\1\124\1\125\1\126"+
    "\1\127\1\130\1\131\4\104\1\132\2\105\1\132\1\106"+
    "\1\132\1\110\3\132\1\107\10\132\11\111\1\112\3\132"+
    "\2\113\2\132\2\114\1\115\1\116\1\117\1\120\2\132"+
    "\1\133\2\132\1\134\2\132\1\135\1\136\1\137\1\140"+
    "\1\141\1\142\1\143\4\132\6\144\1\145\37\144\1\146"+
    "\1\147\1\150\1\151\2\144\1\152\2\144\1\153\2\144"+
    "\1\154\1\155\1\156\1\157\1\160\1\161\1\162\16\144"+
    "\1\145\33\144\1\146\1\147\1\150\1\151\2\144\1\152"+
    "\2\144\1\153\2\144\1\154\1\155\1\156\1\157\1\160"+
    "\1\161\1\162\4\144\1\114\2\163\1\114\1\164\1\165"+
    "\2\114\1\166\1\167\1\114\1\166\1\170\1\171\1\165"+
    "\1\163\1\165\1\172\1\165\11\173\1\174\1\175\1\165"+
    "\1\176\1\177\1\114\1\177\1\114\2\177\1\200\1\201"+
    "\1\202\1\203\2\177\1\204\2\177\1\205\2\177\1\206"+
    "\1\207\1\210\1\211\1\212\1\213\1\214\3\177\1\215"+
    "\1\216\2\217\1\216\1\220\13\216\1\172\2\216\11\173"+
    "\1\221\11\216\1\222\1\223\1\224\1\225\2\216\1\226"+
    "\2\216\1\227\2\216\1\230\1\231\1\232\1\233\1\234"+
    "\1\235\1\236\4\216\2\62\1\237\1\62\1\240\1\62"+
    "\1\241\3\62\1\242\30\62\1\241\2\62\1\67\1\70"+
    "\1\71\1\72\2\62\1\73\2\62\1\74\2\62\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\4\62\1\172"+
    "\2\243\1\172\1\244\6\172\2\243\17\172\1\243\11\172"+
    "\1\245\1\246\1\247\1\250\2\172\1\251\2\172\1\252"+
    "\2\172\1\253\1\254\1\255\1\256\1\257\1\260\1\261"+
    "\4\172\1\262\2\263\1\262\1\264\6\262\2\263\5\262"+
    "\1\265\11\262\1\263\11\262\1\266\1\267\1\270\1\271"+
    "\2\262\1\272\2\262\1\273\2\262\1\274\1\275\1\276"+
    "\1\277\1\300\1\301\1\302\4\262\1\303\2\304\1\303"+
    "\1\304\1\305\2\303\1\306\1\307\1\303\2\306\1\310"+
    "\1\305\1\306\1\305\1\306\1\305\11\304\1\311\1\312"+
    "\1\305\1\313\3\304\1\303\2\304\1\314\1\315\1\316"+
    "\1\317\2\304\1\320\2\304\1\321\2\304\1\322\1\323"+
    "\1\324\1\325\1\326\1\327\1\330\3\304\1\331\77\0"+
    "\1\16\77\0\1\332\1\0\1\333\2\332\1\0\10\332"+
    "\12\0\1\332\1\23\1\332\3\333\1\0\30\333\1\332"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\1\0"+
    "\30\22\6\0\1\332\1\0\1\333\2\332\1\0\10\332"+
    "\12\0\3\332\3\333\1\0\30\333\1\332\5\0\1\332"+
    "\1\0\1\333\1\332\1\23\1\0\10\332\12\0\3\332"+
    "\3\333\1\0\30\333\1\332\5\0\1\332\1\0\1\333"+
    "\2\332\1\0\2\332\1\23\5\332\12\0\1\332\1\23"+
    "\1\332\3\333\1\0\30\333\1\332\5\0\1\332\1\0"+
    "\1\333\2\332\1\0\3\332\1\334\1\332\1\335\2\332"+
    "\1\336\11\0\1\332\1\23\1\332\3\333\1\0\30\333"+
    "\1\332\5\0\1\332\1\0\1\333\2\332\1\0\5\332"+
    "\1\337\1\340\1\332\1\341\10\342\1\0\1\332\1\23"+
    "\1\332\3\333\1\0\30\333\1\332\5\0\1\332\1\0"+
    "\1\333\2\332\1\0\5\332\1\343\1\344\1\332\11\345"+
    "\1\0\3\332\3\333\1\0\30\333\1\332\5\0\1\332"+
    "\1\0\1\333\2\332\1\0\2\332\1\346\4\332\1\347"+
    "\12\0\1\332\1\23\1\332\3\333\1\0\30\333\1\332"+
    "\21\0\1\350\1\0\11\351\62\0\1\350\1\0\11\34"+
    "\46\0\1\332\1\0\1\333\2\332\1\0\10\332\12\0"+
    "\2\23\1\332\3\333\1\0\30\333\1\332\5\0\1\332"+
    "\1\0\1\333\2\332\1\0\10\332\12\0\1\332\2\23"+
    "\3\333\1\0\30\333\1\332\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\1\0\3\22\1\352\14\22\1\353"+
    "\7\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\1\354\14\22\1\355\1\22\1\356\6\22"+
    "\1\357\1\22\1\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\1\360\14\22\1\361\12\22\1\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\1\0"+
    "\1\362\3\22\1\363\10\22\1\353\12\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\12\22"+
    "\1\364\1\22\1\365\4\22\1\366\6\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\1\367"+
    "\7\22\1\370\4\22\1\371\1\22\1\372\2\22\1\373"+
    "\5\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\4\22\1\374\10\22\1\375\12\22\1\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\1\0"+
    "\5\22\1\353\5\22\1\376\1\377\13\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\1\u0100"+
    "\7\22\1\u0101\4\22\1\u0102\12\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\1\u0103\16\22"+
    "\1\u0104\2\22\1\u0105\5\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\4\22\1\u0106\23\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\4\22\1\u0107\10\22\1\u0108\3\22\1\u0109\5\22"+
    "\1\u010a\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\7\22\1\u010b\7\22\1\u010c\10\22\1\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\1\0"+
    "\5\22\1\u010d\2\22\1\u010e\17\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\1\371\7\22"+
    "\1\u010f\17\22\1\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\4\22\1\u0110\2\22\1\u0111\20\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\4\22\1\u0112\23\22\6\0\1\332\1\0\1\333"+
    "\2\332\1\0\10\332\12\0\3\332\3\333\1\0\30\333"+
    "\1\23\2\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\31\62\2\0\1\63\72\0\2\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\15\62\1\u0113\15\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\4\62\1\u0114\10\62"+
    "\1\u0115\15\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\12\62\1\u0116\1\62\1\u0117\16\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\1\u0118\14\62\1\u0119\1\62\1\u011a\2\62\1\u011b"+
    "\10\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\5\62\1\u0115\5\62\1\u011c\1\u011d\16\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\1\u011e\14\62\1\u011f\15\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\1\u0120\16\62"+
    "\1\u0121\2\62\1\u0122\10\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\4\62\1\u0123\26\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\15\62\1\u0124\3\62\1\u0125\11\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\7\62"+
    "\1\u0126\7\62\1\u0127\13\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\5\62\1\u0128\2\62"+
    "\1\u0129\22\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\1\u0119\7\62\1\u012a\22\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\7\62\1\u012b\21\62\2\0\1\105\115\0\11\111\101\0"+
    "\2\113\114\0\1\u012c\63\0\1\u012d\10\0\1\u012e\71\0"+
    "\1\u012f\1\0\1\u0130\60\0\1\u0131\14\0\1\u0132\1\0"+
    "\1\u0133\2\0\1\u0134\57\0\1\u012e\5\0\1\u0135\1\u0136"+
    "\60\0\1\u0137\14\0\1\u0138\57\0\1\u0139\16\0\1\u013a"+
    "\2\0\1\u013b\56\0\1\u013c\105\0\1\u013d\3\0\1\u013e"+
    "\62\0\1\u013f\7\0\1\u0140\62\0\1\u0141\2\0\1\u0142"+
    "\64\0\1\u0132\7\0\1\u0143\73\0\1\u0144\23\0\1\163"+
    "\130\0\1\166\47\0\1\166\100\0\1\166\20\0\1\166"+
    "\61\0\11\173\76\0\2\166\74\0\2\166\131\0\1\166"+
    "\2\0\1\217\74\0\1\237\74\0\1\243\74\0\1\263"+
    "\114\0\1\263\110\0\1\306\47\0\1\306\100\0\1\306"+
    "\20\0\1\306\73\0\2\306\74\0\2\306\131\0\1\306"+
    "\1\333\6\0\1\333\13\0\11\333\4\0\3\333\1\0"+
    "\30\333\6\0\1\332\1\0\1\333\2\332\1\0\3\332"+
    "\1\334\1\332\1\335\2\332\1\336\11\0\3\332\3\333"+
    "\1\0\30\333\1\332\5\0\1\332\1\0\1\333\2\332"+
    "\1\0\5\332\1\335\2\332\1\336\11\0\3\332\3\333"+
    "\1\0\30\333\1\332\23\0\11\345\46\0\1\332\1\0"+
    "\1\333\2\332\1\0\5\332\1\337\1\340\1\332\1\341"+
    "\10\342\1\0\3\332\3\333\1\0\30\333\1\332\21\0"+
    "\1\350\1\0\11\342\46\0\1\332\1\0\1\333\2\332"+
    "\1\0\5\332\1\343\2\332\11\345\1\0\3\332\3\333"+
    "\1\0\30\333\1\332\5\0\1\332\1\0\1\333\2\332"+
    "\1\0\5\332\1\u0145\1\344\1\332\11\345\1\0\3\332"+
    "\3\333\1\0\30\333\1\332\5\u0146\1\u0147\1\u0146\1\u0148"+
    "\2\u0147\1\u0146\2\u0147\1\u0149\5\u0147\12\u0146\3\u0147\3\u0148"+
    "\1\u0146\30\u0148\1\u0147\2\u014a\1\16\1\u014a\1\17\1\347"+
    "\1\u014a\1\u014b\2\347\1\u014a\10\347\12\u014a\3\347\3\u014b"+
    "\1\u014a\30\u014b\1\347\21\0\1\u014c\53\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\3\22\1\u014d"+
    "\24\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\12\22\1\u014e\15\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\15\22\1\u014f"+
    "\12\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\4\22\1\u0150\23\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\21\22\1\u0151"+
    "\6\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\12\22\1\u0152\15\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\14\22\1\u0153"+
    "\13\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\26\22\1\u0154\1\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\12\22\1\u0155"+
    "\15\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\20\22\1\u0156\7\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\22\22\1\u0157"+
    "\5\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\7\22\1\u0158\20\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\12\22\1\364"+
    "\15\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\14\22\1\u0159\13\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\17\22\1\353"+
    "\10\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\15\22\1\u0157\12\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\14\22\1\u015a"+
    "\13\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\25\22\1\u015b\2\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\22\22\1\u015c"+
    "\5\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\16\22\1\u015d\11\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\21\22\1\u015e"+
    "\6\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\16\22\1\u015f\11\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\14\22\1\u0160"+
    "\13\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\3\22\1\u0161\24\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\26\22\1\u0162"+
    "\1\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\1\u0163\7\22\1\u0164\17\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\1\22"+
    "\1\u0165\26\22\1\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\21\22\1\u0166\6\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\2\22"+
    "\1\u0167\11\22\1\u0168\13\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\12\22\1\u0169\15\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\17\22\1\u016a\10\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\1\u016b\27\22\1\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\1\0"+
    "\10\22\1\u016c\17\22\1\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\1\0\1\u016d\21\22\1\u0156\5\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\10\22\1\u016e\17\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\14\22\1\u016f\13\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\4\22\1\u0170\23\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\4\22\1\u0171\3\22"+
    "\1\u0172\17\22\1\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\10\22\1\u0173\17\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\1\u015c"+
    "\27\22\1\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\0\30\62\1\0\14\62\1\u0174\16\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\12\62\1\u0175\20\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\0\30\62\1\0\20\62\1\u0176\12\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\22\62\1\u0177\10\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\0\30\62\1\0\12\62\1\u0116\20\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\17\62\1\u0115\13\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\0\30\62\1\0\15\62\1\u0177\15\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\14\62\1\u0178\16\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\0\30\62\1\0\16\62\1\u0179\14\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\21\62\1\u017a\11\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\0\30\62\1\0\16\62\1\u017b\14\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\3\62\1\u017c\27\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\0\30\62\1\0\26\62\1\u017d\4\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\1\u017e\7\62\1\u017f\22\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\1\62\1\u0180\31\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\21\62\1\u0181\11\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\12\62\1\u0182\20\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\17\62\1\u0183\13\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\10\62\1\u0184\22\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\22\62\1\u0176\10\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\10\62\1\u0185\22\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\14\62\1\u0186\16\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\4\62\1\u0187\26\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\10\62\1\u0188\20\62\60\0\1\u0189\72\0\1\u018a"+
    "\102\0\1\u018b\76\0\1\u018c\64\0\1\u012f\101\0\1\u012e"+
    "\72\0\1\u018c\73\0\1\u018d\76\0\1\u018e\77\0\1\u018f"+
    "\71\0\1\u0190\61\0\1\u0191\117\0\1\u0192\46\0\1\u0193"+
    "\7\0\1\u0194\65\0\1\u0195\114\0\1\u0196\65\0\1\u0197"+
    "\101\0\1\u0198\65\0\1\u0199\106\0\1\u018b\62\0\1\u019a"+
    "\100\0\1\u019b\64\0\1\u019c\100\0\1\u019d\25\0\1\332"+
    "\1\0\1\333\2\332\1\0\5\332\1\u0145\2\332\11\345"+
    "\1\0\3\332\3\333\1\0\30\333\1\332\15\u0146\1\u019e"+
    "\64\u0146\1\u0147\1\u0146\1\u0148\2\u0147\1\u0146\2\u0147\1\u019f"+
    "\5\u0147\12\u0146\3\u0147\3\u0148\1\u0146\30\u0148\1\u0147\1\u0148"+
    "\6\u0146\1\u0148\5\u0146\1\u019e\5\u0146\11\u0148\4\u0146\3\u0148"+
    "\1\u0146\30\u0148\6\u0146\1\u0147\1\u0146\1\u0148\2\u0147\1\u0146"+
    "\2\u0147\1\u019f\4\u0147\1\u01a0\12\u0146\3\u0147\3\u0148\1\u0146"+
    "\30\u0148\1\u0147\2\u014a\1\16\1\u014a\1\17\70\u014a\1\u014b"+
    "\1\u014a\1\16\1\u014a\1\17\2\u014a\1\u014b\13\u014a\11\u014b"+
    "\4\u014a\3\u014b\1\u014a\30\u014b\1\u014a\20\0\1\u01a1\1\u014c"+
    "\1\0\11\345\41\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\17\22\1\u01a2\10\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\1\u01a3"+
    "\27\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\12\22\1\353\15\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\1\u01a4\27\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\4\22\1\u01a5\23\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\12\22\1\u01a6\15\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\20\22\1\u01a7\1\u01a8\6\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\20\22\1\u0172"+
    "\7\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\4\22\1\u01a9\23\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\4\22\1\353"+
    "\23\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\13\22\1\353\14\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\4\22\1\u01aa"+
    "\23\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\14\22\1\u01ab\13\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\2\22\1\u01ac"+
    "\25\22\1\0\1\22\5\0\1\u01ad\1\22\2\0\1\u01ae"+
    "\10\0\11\22\4\0\3\22\1\0\30\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\17\22"+
    "\1\u0154\10\22\1\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\15\22\1\u01af\12\22\1\0\1\22"+
    "\6\0\1\22\13\0\1\22\1\u01b0\1\u01b1\1\u01b2\2\22"+
    "\1\u01b3\1\22\1\353\4\0\3\22\1\0\4\22\1\u01b4"+
    "\23\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\16\22\1\u01b5\11\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\22\22\1\u01b6"+
    "\5\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\10\22\1\u01b7\17\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\1\u01b8\27\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\6\22\1\u01b9\21\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\23\22\1\u01ba\4\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\12\22\1\u01bb\15\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\22\22\1\u01bc\5\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\15\22\1\u01bd\12\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\3\22\1\u01be\24\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\10\22\1\u01bf\17\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\10\22\1\u01c0\11\22"+
    "\1\u01c1\5\22\1\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\1\22\1\u01c2\26\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\20\22"+
    "\1\353\7\22\1\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\14\22\1\u01c3\13\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\25\22"+
    "\1\u01c4\2\22\1\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\21\22\1\u01c5\6\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\24\22"+
    "\1\353\3\22\1\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\11\22\1\u0154\16\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\12\22"+
    "\1\u0156\15\22\1\0\2\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\20\62\1\u01c6\1\u01c7"+
    "\11\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\4\62\1\u01c8\26\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\4\62\1\u0115"+
    "\26\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\13\62\1\u0115\17\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\2\62\1\u01c9"+
    "\30\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\15\62\1\u01ca\15\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\11\62\1\u01cb\1\u01cc\1\u01cd"+
    "\2\62\1\u01ce\1\62\1\u0115\7\62\1\0\4\62\1\u01cf"+
    "\26\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\16\62\1\u01d0\14\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\10\62\1\u01d1"+
    "\22\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\1\u01d2\32\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\6\62\1\u01d3\24\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\23\62\1\u01d4\7\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\12\62\1\u01d5\20\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\22\62\1\u01d6\10\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\10\62\1\u01d7\22\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\10\62\1\u01d8\11\62\1\u01d9\10\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\20\62"+
    "\1\u0115\12\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\25\62\1\u01da\5\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\21\62"+
    "\1\u01db\11\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\24\62\1\u0115\6\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\12\62"+
    "\1\u0176\16\62\64\0\1\u01dc\1\u01dd\57\0\1\u01de\74\0"+
    "\1\u012e\103\0\1\u012e\63\0\1\u01df\107\0\1\u01e0\37\0"+
    "\1\u01e1\1\u01e2\1\u01e3\2\0\1\u01e4\1\0\1\u012e\14\0"+
    "\1\u01e5\106\0\1\u01e6\66\0\1\u01e7\64\0\1\u01e8\102\0"+
    "\1\u01e9\111\0\1\u01ea\63\0\1\u01eb\104\0\1\u01ec\62\0"+
    "\1\u01ed\74\0\1\u01ee\11\0\1\u01ef\72\0\1\u012e\101\0"+
    "\1\u01f0\70\0\1\u01f1\77\0\1\u012e\62\0\1\u018b\16\0"+
    "\15\u0146\1\u019e\4\u0146\1\16\57\u0146\1\u0147\1\u0146\1\u0148"+
    "\2\u0147\1\u0146\2\u0147\1\u019f\4\u0147\1\u01f2\12\u0146\3\u0147"+
    "\3\u0148\1\u0146\30\u0148\1\u0147\20\0\1\u01a1\2\0\11\345"+
    "\41\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\4\22\1\u01f3\23\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\14\22\1\u01f4\13\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\11\22\1\353\16\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\20\22\1\u01f5\7\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\2\22\1\u01f6\25\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\21\22\1\u01f7\6\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\10\22\1\u01f8\6\22\1\u01f9\10\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\6\22"+
    "\1\u01fa\12\22\1\u0156\6\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\17\22\1\u0172\10\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\4\22\1\u01fb\23\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\21\22\1\u01fc\6\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\17\22\1\u01fd\10\22\1\0\1\22\6\0\1\22"+
    "\13\0\2\22\1\u01fe\3\22\1\353\2\22\4\0\3\22"+
    "\1\0\30\22\1\0\1\22\6\0\1\22\13\0\5\22"+
    "\1\u01ff\3\22\4\0\3\22\1\0\30\22\1\0\1\22"+
    "\6\0\1\22\13\0\2\22\1\353\6\22\4\0\3\22"+
    "\1\0\30\22\1\0\1\22\6\0\1\22\13\0\4\22"+
    "\1\353\4\22\4\0\3\22\1\0\30\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\17\22"+
    "\1\u0200\10\22\1\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\10\22\1\u01c0\17\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\21\22"+
    "\1\u0201\6\22\1\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\5\22\1\u0202\22\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\1\22"+
    "\1\u0173\26\22\1\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\13\22\1\u0203\14\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\1\u0204"+
    "\27\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\10\22\1\u0205\17\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\17\22\1\u0206"+
    "\10\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\14\22\1\u0207\13\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\3\22\1\u0208"+
    "\24\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\14\22\1\u0209\13\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\2\22\1\u01fd"+
    "\25\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\15\22\1\u0172\12\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\20\22\1\u020a"+
    "\7\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\4\22\1\u020b\23\22\1\0\1\22\6\0"+
    "\1\22\13\0\1\22\1\u01b0\1\u01b1\1\u01b2\2\22\1\u01b3"+
    "\1\22\1\353\4\0\3\22\1\0\30\22\1\0\2\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\21\62\1\u020c\11\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\10\62\1\u020d\6\62"+
    "\1\u020e\13\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\21\62\1\u0176\11\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\21\62"+
    "\1\u020f\11\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\17\62\1\u0210\13\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\12\62\1\u0211\3\62"+
    "\1\u0115\11\62\1\0\33\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\15\62\1\u0212\12\62\1\0\33\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\12\62"+
    "\1\u0115\15\62\1\0\33\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\14\62\1\u0115\13\62\1\0\33\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\17\62\1\u0213\13\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\10\62\1\u01d8\22\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\5\62\1\u0214\25\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\1\62\1\u0188\31\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\13\62\1\u0215\17\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\1\u01c8\32\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\10\62\1\u0216\22\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\0\30\62\1\0\17\62\1\u0217\13\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\3\62\1\u0218\27\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\0\30\62\1\0\14\62\1\u0219\16\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\2\62\1\u0210\30\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\0\30\62\1\0\4\62\1\u021a\26\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\11\62\1\u01cb"+
    "\1\u01cc\1\u01cd\2\62\1\u01ce\1\62\1\u0115\7\62\1\0"+
    "\31\62\65\0\1\u021b\63\0\1\u021c\6\0\1\u021d\76\0"+
    "\1\u018b\74\0\1\u021e\72\0\1\u021f\36\0\1\u0220\3\0"+
    "\1\u012e\73\0\1\u0221\71\0\1\u012e\76\0\1\u012e\130\0"+
    "\1\u0222\65\0\1\u01ee\71\0\1\u0223\70\0\1\u019d\106\0"+
    "\1\u0224\61\0\1\u01de\104\0\1\u0225\103\0\1\u0226\60\0"+
    "\1\u0227\105\0\1\u0228\62\0\1\u021f\76\0\1\u0229\50\0"+
    "\1\u01e1\1\u01e2\1\u01e3\2\0\1\u01e4\1\0\1\u012e\41\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\1\0"+
    "\20\22\1\u016c\7\22\1\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\1\0\2\22\1\u022a\25\22\1\0"+
    "\1\22\6\0\1\22\13\0\1\22\2\u022b\1\u022c\5\353"+
    "\4\0\3\22\1\0\30\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\15\22\1\u022d\12\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\17\22\1\u022e\10\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\14\22\1\u022f\13\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\1\u01c1\27\22\1\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\1\0\1\u0230\27\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\26\22"+
    "\1\u0172\1\22\1\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\10\22\1\u0231\17\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\21\22"+
    "\1\353\6\22\1\0\1\22\6\0\1\22\13\0\10\22"+
    "\1\353\4\0\3\22\1\0\30\22\1\0\1\22\6\0"+
    "\1\22\13\0\6\22\1\353\2\22\4\0\3\22\1\0"+
    "\30\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\14\22\1\u0232\13\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\4\22\1\u0154"+
    "\23\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\10\22\1\u0233\17\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\1\353\27\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\21\22\1\u0156\6\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\2\22\1\353\25\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\14\22\1\u0234\13\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\3\22\1\u0154\24\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\10\22\1\u0235\17\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\6\22\1\353\21\22"+
    "\1\0\1\22\6\0\1\22\13\0\11\22\4\0\3\22"+
    "\1\0\5\22\1\u0236\22\22\1\0\1\22\6\0\1\22"+
    "\13\0\11\22\4\0\3\22\1\0\3\22\1\353\24\22"+
    "\1\0\2\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\17\62\1\u0237\13\62\1\0\1\62"+
    "\1\0\1\62\1\0\3\62\1\0\30\62\1\0\14\62"+
    "\1\u0127\16\62\1\0\1\62\1\0\1\62\1\0\3\62"+
    "\1\0\30\62\1\0\1\u01d9\32\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\10\62\1\u0238"+
    "\22\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\21\62\1\u0115\11\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\20\62\1\u0115\7\62\1\0"+
    "\33\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\16\62\1\u0115\11\62\1\0\33\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\14\62\1\u0239"+
    "\16\62\1\0\1\62\1\0\1\62\1\0\3\62\1\0"+
    "\30\62\1\0\10\62\1\u023a\22\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\1\u0115\32\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\2\62\1\u0115\30\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\14\62\1\u023b\16\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\10\62\1\u023c\22\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\6\62\1\u0115\24\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\3\62\1\u0115\25\62\63\0\1\u023d\71\0\1\u0140"+
    "\60\0\1\u01ef\104\0\1\u023e\105\0\1\u012e\42\0\1\u012e"+
    "\72\0\1\u012e\123\0\1\u023f\70\0\1\u0240\64\0\1\u012e"+
    "\76\0\1\u012e\106\0\1\u0241\70\0\1\u0242\72\0\1\u012e"+
    "\71\0\1\u012e\25\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\4\22\1\u01be\23\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\353\4\0\3\22\1\0\30\22"+
    "\1\0\1\22\6\0\1\22\13\0\3\353\6\22\4\0"+
    "\3\22\1\0\30\22\1\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\1\0\3\22\1\u022a\24\22\1\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\1\0"+
    "\22\22\1\u0243\5\22\1\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\1\0\22\22\1\u0156\5\22\1\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\1\0"+
    "\21\22\1\u0244\6\22\1\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\1\0\15\22\1\u0245\12\22\1\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\1\0"+
    "\1\u014f\27\22\1\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\4\22\1\371\23\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\21\22"+
    "\1\u0246\6\22\1\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\4\22\1\u0247\23\22\1\0\2\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\22\62\1\u0248\10\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\15\62\1\u0249\15\62"+
    "\1\0\1\62\1\0\1\62\1\0\3\62\1\0\30\62"+
    "\1\0\1\u024a\32\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\0\30\62\1\0\4\62\1\u0119\26\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\21\62\1\u024b\7\62\66\0\1\u024c\67\0\1\u024d\57\0"+
    "\1\u024e\100\0\1\u0132\111\0\1\u024f\7\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\2\22\1\u0250"+
    "\25\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\4\22\1\u0251\23\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\14\22\1\353"+
    "\13\22\1\0\1\22\6\0\1\22\13\0\11\22\4\0"+
    "\3\22\1\0\26\22\1\353\1\22\1\0\1\22\6\0"+
    "\1\22\13\0\11\22\4\0\3\22\1\0\17\22\1\u01be"+
    "\10\22\1\0\2\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\0\30\62\1\0\2\62\1\u0252\30\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\14\62\1\u0115\16\62\1\0\1\62\1\0\1\62\1\0"+
    "\3\62\1\0\30\62\1\0\12\62\1\u0115\20\62\1\0"+
    "\1\62\1\0\1\62\1\0\3\62\1\0\30\62\1\0"+
    "\26\62\1\u0115\2\62\46\0\1\u0253\106\0\1\u012e\72\0"+
    "\1\u012e\110\0\1\u012e\2\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\1\0\21\22\1\u0254\6\22\1\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\1\0"+
    "\2\22\1\u0255\25\22\1\0\2\62\1\0\1\62\1\0"+
    "\1\62\1\0\3\62\1\0\30\62\1\0\21\62\1\u0256"+
    "\7\62\65\0\1\u0257\7\0\1\22\6\0\1\22\13\0"+
    "\11\22\4\0\3\22\1\0\15\22\1\371\12\22\1\0"+
    "\1\22\6\0\1\22\13\0\11\22\4\0\3\22\1\0"+
    "\1\u0258\27\22\1\0\2\62\1\0\1\62\1\0\1\62"+
    "\1\0\3\62\1\0\30\62\1\0\15\62\1\u0119\13\62"+
    "\61\0\1\u0132\13\0\1\22\6\0\1\22\13\0\11\22"+
    "\4\0\3\22\1\0\12\22\1\u0259\15\22\1\0\1\22"+
    "\6\0\1\22\13\0\11\22\4\0\3\22\1\0\12\22"+
    "\1\u01be\15\22\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28182];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\2\11\2\1\1\11\3\1\1\11\7\1\1\11"+
    "\25\1\1\11\1\1\2\11\15\1\2\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\15\1\1\11\11\1\2\11"+
    "\15\1\1\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\16\1\2\11\1\1\1\11"+
    "\15\1\1\11\1\1\3\11\16\1\2\11\17\1\2\11"+
    "\1\1\1\11\2\1\1\11\20\1\1\0\1\1\10\0"+
    "\2\1\1\0\1\1\1\0\103\1\2\0\1\11\26\0"+
    "\1\1\2\0\1\1\1\0\77\1\6\0\1\1\20\0"+
    "\15\1\2\11\55\1\25\0\52\1\17\0\23\1\4\0"+
    "\1\1\1\0\11\1\4\0\3\1\1\0\3\1\1\0"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[601];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    StringBuffer stringN = new StringBuffer();
    public static int banderaN = 0;
    public static int bandera = 0;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   for(Token t: tokens){
    t.print();
  }

  System.out.println("\nErrores\n");
  for(Token t: errores){
    t.print();
  }
  return 0;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { stringN.setLength(0);
     stringN.append(yytext());
     yybegin(stateNosibol);
            }
            // fall through
          case 48: break;
          case 2:
            { /* ignore */ ;banderaN =0;
            }
            // fall through
          case 49: break;
          case 3:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 50: break;
          case 4:
            { string.setLength(0); yybegin(STRING); bandera = yycolumn;
            }
            // fall through
          case 51: break;
          case 5:
            { stringN.setLength(0);
string.setLength(0);
string.append(yytext());
stringN.append(yytext());
yybegin(filtro);
            }
            // fall through
          case 52: break;
          case 6:
            { string.setLength(0); yybegin(Chars); bandera = yycolumn;
            }
            // fall through
          case 53: break;
          case 7:
            { string.setLength(0);
  string.append(yytext());
  yybegin(numberState);
  banderaN =0;
            }
            // fall through
          case 54: break;
          case 8:
            { string.append( yytext() );
            }
            // fall through
          case 55: break;
          case 9:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error stringASAD"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 56: break;
          case 10:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 57: break;
          case 11:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error string"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 58: break;
          case 12:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
    yybegin(hexaStateError);
            }
            // fall through
          case 59: break;
          case 13:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 60: break;
          case 14:
            { yybegin(YYINITIAL);
    string.append( yytext() ); 
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada"));
            }
            // fall through
          case 61: break;
          case 15:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 62: break;
          case 16:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); 
    errores.add(new Token("Comillas", yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 63: break;
          case 17:
            { System.out.println(yyline);
  System.out.println(yycolumn); 
  // throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 64: break;
          case 18:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 65: break;
          case 19:
            { 
            }
            // fall through
          case 66: break;
          case 20:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 67: break;
          case 21:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
            }
            // fall through
          case 68: break;
          case 22:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
  tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 69: break;
          case 23:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(")", yyline+1, yycolumn, "Operador"));
            }
            // fall through
          case 70: break;
          case 24:
            { string.append(yytext());
            }
            // fall through
          case 71: break;
          case 25:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(";", yyline+1, yycolumn, "Operador"));
            }
            // fall through
          case 72: break;
          case 26:
            { string.append(yytext()); yybegin(Identificadorcillo);
            }
            // fall through
          case 73: break;
          case 27:
            { yybegin(NaturalNumbers);
    string.append(yytext());
            }
            // fall through
          case 74: break;
          case 28:
            { bandera = 1; 
    string.append(yytext());
            }
            // fall through
          case 75: break;
          case 29:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
    }
            }
            // fall through
          case 76: break;
          case 30:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
            }
            // fall through
          case 77: break;
          case 31:
            { System.out.println("HOLA2");
    string.append( yytext() );
    errores.add(new Token(string.toString(), yyline, bandera, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 78: break;
          case 32:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 79: break;
          case 33:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
            }
            // fall through
          case 80: break;
          case 34:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error: identificador")); yybegin(YYINITIAL);
            }
            // fall through
          case 81: break;
          case 35:
            { stringN.append(yytext());yybegin(stateNosibol);
            }
            // fall through
          case 82: break;
          case 36:
            { errores.add(new Token(stringN.toString(), yyline, yycolumn, "Error: identificador"));
        yybegin(YYINITIAL);
            }
            // fall through
          case 83: break;
          case 37:
            { stringN.append(yytext());
  yybegin(stateNosibol);
            }
            // fall through
          case 84: break;
          case 38:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 85: break;
          case 39:
            { string.append(yytext()) ;
             errores.add(new Token(string.toString(), yyline, yycolumn, "Error Identificador"));
            yybegin(YYINITIAL);
            }
            // fall through
          case 86: break;
          case 40:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador"));
  tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 87: break;
          case 41:
            { string.setLength(0);
  string.append(yytext());
  errores.add(new Token(string.toString(), yyline, yycolumn, "Error Decimal"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 88: break;
          case 42:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error Decimal"));
            }
            // fall through
          case 89: break;
          case 43:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 90: break;
          case 44:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 91: break;
          case 45:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 92: break;
          case 46:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 93: break;
          case 47:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaStateC);
            }
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
