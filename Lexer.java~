// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

/* JFlex example: partial Java language lexer specification */
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int hexaState = 4;
  public static final int hexaStateC = 6;
  public static final int hexaStateError = 8;
  public static final int hexaStateCError = 10;
  public static final int numberState = 12;
  public static final int NaturalNumbers = 14;
  public static final int Chars = 16;
  public static final int Identificadorcillo = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\3\u1f00\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\3\u1f00\1\u3e00\1\u3f00\4\u1f00"+
    "\1\u4000\11\u1f00\3\u0100\1\u4100\1\u4200\13\u1f00\4\u0100\1\u4300"+
    "\63\u1f00\2\u0100\1\u4400\4\u1f00\1\u4500\100\u1f00\1\u4600\40\u1f00"+
    "\1\u4700\1\u4800\1\u1f00\1\u4900\1\u4a00\1\u4b00\1\u4c00\26\u1f00"+
    "\1\u4d00\21\u1f00\246\u0100\1\u4e00\20\u0100\1\u4f00\1\u5000\77\u1f00"+
    "\2\u0100\1\u5000\u0b05\u1f00\1\u5100\1\u5200\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\3\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\5\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\31\1\10\1\33\1\34\1\35\1\36\1\10"+
    "\1\3\4\37\1\40\1\37\24\41\1\13\1\42\1\13"+
    "\1\10\1\7\1\3\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\41\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\41\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\13\1\73\1\13"+
    "\1\10\41\0\2\3\4\7\4\3\1\7\2\3\1\0"+
    "\7\3\1\7\4\3\1\7\5\3\27\7\1\3\37\7"+
    "\1\3\u01ca\7\4\3\14\7\16\3\5\7\7\3\1\7"+
    "\1\3\1\7\21\3\160\0\5\7\1\3\2\7\2\3"+
    "\4\7\10\3\1\7\1\3\3\7\1\3\1\7\1\3"+
    "\24\7\1\3\123\7\1\3\213\7\1\3\5\0\2\3"+
    "\236\7\11\3\46\7\2\3\1\7\7\3\47\7\7\3"+
    "\1\7\1\3\55\0\1\3\1\0\1\3\2\0\1\3"+
    "\2\0\1\3\1\0\10\3\33\7\5\3\3\7\15\3"+
    "\5\0\6\3\1\7\4\3\13\0\5\3\53\7\37\0"+
    "\4\3\2\7\1\0\143\7\1\3\1\7\10\0\1\3"+
    "\6\0\2\7\2\0\1\3\4\0\2\7\12\0\3\7"+
    "\2\3\1\7\17\3\1\0\1\7\1\0\36\7\33\0"+
    "\2\3\131\7\13\0\1\7\16\3\12\0\41\7\11\0"+
    "\2\7\4\3\1\7\5\3\26\7\4\0\1\7\11\0"+
    "\1\7\3\0\1\7\5\0\22\3\31\7\3\0\104\3"+
    "\1\7\1\3\13\7\67\3\33\0\1\3\4\0\66\7"+
    "\3\0\1\7\22\0\1\7\7\0\12\7\2\0\2\3"+
    "\12\0\1\3\7\7\1\3\7\7\1\3\3\0\1\3"+
    "\10\7\2\3\2\7\2\3\26\7\1\3\7\7\1\3"+
    "\1\7\3\3\4\7\2\3\1\0\1\7\7\0\2\3"+
    "\2\0\2\3\3\0\1\7\10\3\1\0\4\3\2\7"+
    "\1\3\3\7\2\0\2\3\12\0\4\7\7\3\1\7"+
    "\5\3\3\0\1\3\6\7\4\3\2\7\2\3\26\7"+
    "\1\3\7\7\1\3\2\7\1\3\2\7\1\3\2\7"+
    "\2\3\1\0\1\3\5\0\4\3\2\0\2\3\3\0"+
    "\3\3\1\0\7\3\4\7\1\3\1\7\7\3\14\0"+
    "\3\7\1\0\13\3\3\0\1\3\11\7\1\3\3\7"+
    "\1\3\26\7\1\3\7\7\1\3\2\7\1\3\5\7"+
    "\2\3\1\0\1\7\10\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\7\17\3\2\7\2\0\2\3\12\0\1\3"+
    "\1\7\17\3\3\0\1\3\10\7\2\3\2\7\2\3"+
    "\26\7\1\3\7\7\1\3\2\7\1\3\5\7\2\3"+
    "\1\0\1\7\7\0\2\3\2\0\2\3\3\0\10\3"+
    "\2\0\4\3\2\7\1\3\3\7\2\0\2\3\12\0"+
    "\1\3\1\7\20\3\1\0\1\7\1\3\6\7\3\3"+
    "\3\7\1\3\4\7\3\3\2\7\1\3\1\7\1\3"+
    "\2\7\3\3\2\7\3\3\3\7\3\3\14\7\4\3"+
    "\5\0\3\3\3\0\1\3\4\0\2\3\1\7\6\3"+
    "\1\0\16\3\12\0\11\3\1\7\7\3\3\0\1\3"+
    "\10\7\1\3\3\7\1\3\27\7\1\3\12\7\1\3"+
    "\5\7\3\3\1\7\7\0\1\3\3\0\1\3\4\0"+
    "\7\3\2\0\1\3\2\7\6\3\2\7\2\0\2\3"+
    "\12\0\22\3\2\0\1\3\10\7\1\3\3\7\1\3"+
    "\27\7\1\3\12\7\1\3\5\7\2\3\1\0\1\7"+
    "\7\0\1\3\3\0\1\3\4\0\7\3\2\0\7\3"+
    "\1\7\1\3\2\7\2\0\2\3\12\0\1\3\2\7"+
    "\17\3\2\0\1\3\10\7\1\3\3\7\1\3\51\7"+
    "\2\3\1\7\7\0\1\3\3\0\1\3\4\0\1\7"+
    "\10\3\1\0\10\3\2\7\2\0\2\3\12\0\12\3"+
    "\6\7\2\3\2\0\1\3\22\7\3\3\30\7\1\3"+
    "\11\7\1\3\1\7\2\3\7\7\3\3\1\0\4\3"+
    "\6\0\1\3\1\0\1\3\10\0\22\3\2\0\15\3"+
    "\60\7\1\0\2\7\7\0\4\3\10\7\10\0\1\3"+
    "\12\0\47\3\2\7\1\3\1\7\2\3\2\7\1\3"+
    "\1\7\2\3\1\7\6\3\4\7\1\3\7\7\1\3"+
    "\3\7\1\3\1\7\1\3\1\7\2\3\2\7\1\3"+
    "\4\7\1\0\2\7\6\0\1\3\2\0\1\7\2\3"+
    "\5\7\1\3\1\7\1\3\6\0\2\3\12\0\2\3"+
    "\4\7\40\3\1\7\27\3\2\0\6\3\12\0\13\3"+
    "\1\0\1\3\1\0\1\3\1\0\4\3\2\0\10\7"+
    "\1\3\44\7\4\3\24\0\1\3\2\0\5\7\13\0"+
    "\1\3\44\0\11\3\1\0\71\3\53\7\24\0\1\7"+
    "\12\0\6\3\6\7\4\0\4\7\3\0\1\7\3\0"+
    "\2\7\7\0\3\7\4\0\15\7\14\0\1\7\17\0"+
    "\2\3\46\7\1\3\1\7\5\3\1\7\2\3\53\7"+
    "\1\3\115\7\1\3\4\7\2\3\7\7\1\3\1\7"+
    "\1\3\4\7\2\3\51\7\1\3\4\7\2\3\41\7"+
    "\1\3\4\7\2\3\7\7\1\3\1\7\1\3\4\7"+
    "\2\3\17\7\1\3\71\7\1\3\4\7\2\3\103\7"+
    "\2\3\3\0\40\3\20\7\20\3\125\7\14\3\u016c\7"+
    "\2\3\21\7\1\3\32\7\5\3\113\7\3\3\3\7"+
    "\17\3\15\7\1\3\4\7\3\0\13\3\22\7\3\0"+
    "\13\3\22\7\2\0\14\3\15\7\1\3\3\7\1\3"+
    "\2\0\14\3\64\7\40\0\3\3\1\7\3\3\2\7"+
    "\1\0\2\3\12\0\41\3\3\0\2\3\12\0\6\3"+
    "\130\7\10\3\51\7\1\0\1\7\5\3\106\7\12\3"+
    "\35\7\3\3\14\0\4\3\14\0\12\3\12\0\36\7"+
    "\2\3\5\7\13\3\54\7\4\3\21\0\7\7\2\0"+
    "\6\3\12\0\46\3\27\7\5\0\4\3\65\7\12\0"+
    "\1\3\35\0\2\3\13\0\6\3\12\0\15\3\1\7"+
    "\130\3\5\0\57\7\21\0\7\7\4\3\12\0\21\3"+
    "\11\0\14\3\3\0\36\7\15\0\2\7\12\0\54\7"+
    "\16\0\14\3\44\7\24\0\10\3\12\0\3\3\3\7"+
    "\12\0\44\7\122\3\3\0\1\3\25\0\4\7\1\0"+
    "\4\7\3\0\2\7\11\3\300\7\47\0\25\3\4\0"+
    "\26\7\2\3\6\7\2\3\46\7\2\3\6\7\2\3"+
    "\10\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\37\7\2\3\65\7\1\3\7\7\1\3\1\7\3\3"+
    "\3\7\1\3\7\7\3\3\4\7\2\3\6\7\4\3"+
    "\15\7\5\3\3\7\1\3\7\7\16\3\5\0\32\3"+
    "\5\0\20\3\2\7\23\3\1\7\13\3\5\0\5\3"+
    "\6\0\1\3\1\7\15\3\1\7\20\3\15\7\3\3"+
    "\33\7\25\3\15\0\4\3\1\0\3\3\14\0\21\3"+
    "\1\7\4\3\1\7\2\3\12\7\1\3\1\7\3\3"+
    "\5\7\6\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\4\7\1\3\13\7\2\3\4\7\5\3\5\7\4\3"+
    "\1\7\21\3\51\7\u0177\3\57\7\1\3\57\7\1\3"+
    "\205\7\6\3\4\7\3\0\2\7\14\3\46\7\1\3"+
    "\1\7\5\3\1\7\2\3\70\7\7\3\1\7\17\3"+
    "\1\0\27\7\11\3\7\7\1\3\7\7\1\3\7\7"+
    "\1\3\7\7\1\3\7\7\1\3\7\7\1\3\7\7"+
    "\1\3\7\7\1\3\40\0\57\3\1\7\325\3\3\7"+
    "\31\3\11\7\6\0\1\3\5\7\2\3\5\7\4\3"+
    "\126\7\2\3\2\0\2\3\3\7\1\3\132\7\1\3"+
    "\4\7\5\3\51\7\3\3\136\7\21\3\33\7\65\3"+
    "\306\7\112\3\315\7\63\3\215\7\103\3\56\7\2\3"+
    "\15\7\3\3\20\7\12\0\2\7\24\3\57\7\1\0"+
    "\4\3\12\0\1\3\31\7\7\3\1\0\120\7\2\0"+
    "\45\3\11\7\2\3\147\7\2\3\4\7\1\3\4\7"+
    "\14\3\13\7\115\3\12\7\1\0\3\7\1\0\4\7"+
    "\1\0\27\7\5\0\20\3\1\7\7\3\64\7\14\3"+
    "\2\0\62\7\21\0\13\3\12\0\6\3\22\0\6\7"+
    "\3\3\1\7\4\3\12\0\34\7\10\0\2\3\27\7"+
    "\15\0\14\3\35\7\3\3\4\0\57\7\16\0\16\3"+
    "\1\7\12\0\46\3\51\7\16\0\11\3\3\7\1\0"+
    "\10\7\2\0\2\3\12\0\6\3\27\7\3\3\1\7"+
    "\1\0\4\3\60\7\1\0\1\7\3\0\2\7\2\0"+
    "\5\7\2\0\1\7\1\0\1\7\30\3\3\7\2\3"+
    "\13\7\5\0\2\3\3\7\2\0\12\3\6\7\2\3"+
    "\6\7\2\3\6\7\11\3\7\7\1\3\7\7\221\3"+
    "\43\7\10\0\1\3\2\0\2\3\12\0\6\3\244\7"+
    "\14\3\27\7\4\3\61\7\4\3\156\7\2\3\152\7"+
    "\46\3\7\7\14\3\5\7\5\3\1\7\1\0\12\7"+
    "\1\3\15\7\1\3\5\7\1\3\1\7\1\3\2\7"+
    "\1\3\2\7\1\3\154\7\41\3\153\7\22\3\100\7"+
    "\2\3\66\7\50\3\15\7\3\3\20\0\20\3\7\0"+
    "\14\3\2\7\30\3\3\7\31\3\1\7\6\3\5\7"+
    "\1\3\207\7\2\3\1\0\4\3\1\7\13\3\12\0"+
    "\7\3\32\7\4\3\1\7\1\3\32\7\13\3\131\7"+
    "\3\3\6\7\2\3\6\7\2\3\6\7\2\3\3\7"+
    "\3\3\2\7\3\3\2\7\22\3\3\0\4\3\14\7"+
    "\1\3\32\7\1\3\23\7\1\3\2\7\1\3\17\7"+
    "\2\3\16\7\42\3\173\7\105\3\65\7\210\3\1\0"+
    "\202\3\35\7\3\3\61\7\57\3\37\7\21\3\33\7"+
    "\65\3\36\7\2\3\44\7\4\3\10\7\1\3\5\7"+
    "\52\3\236\7\2\3\12\0\126\3\6\7\2\3\1\7"+
    "\1\3\54\7\1\3\2\7\3\3\1\7\2\3\27\7"+
    "\252\3\26\7\12\3\32\7\106\3\70\7\6\3\2\7"+
    "\100\3\1\7\3\0\1\3\2\0\5\3\4\0\4\7"+
    "\1\3\3\7\1\3\33\7\4\3\3\0\4\3\1\0"+
    "\40\3\35\7\203\3\66\7\12\3\26\7\12\3\23\7"+
    "\215\3\111\7\267\3\3\0\65\7\17\0\37\3\12\0"+
    "\20\3\3\0\55\7\13\0\2\3\1\0\22\3\31\7"+
    "\7\3\12\0\6\3\3\0\44\7\16\0\1\3\12\0"+
    "\100\3\3\0\60\7\16\0\4\7\13\3\12\0\246\3"+
    "\53\7\15\0\10\3\12\0\66\3\157\7\221\3\143\7"+
    "\235\3\57\7\321\3\71\7\307\3\105\7\13\3\1\7"+
    "\56\0\20\3\4\0\15\7\140\3\2\7\u0163\3\5\0"+
    "\3\3\26\0\2\3\7\0\36\3\4\0\224\3\3\0"+
    "\273\3\125\7\1\3\107\7\1\3\2\7\2\3\1\7"+
    "\2\3\2\7\2\3\4\7\1\3\14\7\1\3\1\7"+
    "\1\3\7\7\1\3\101\7\1\3\4\7\2\3\10\7"+
    "\1\3\7\7\1\3\34\7\1\3\4\7\1\3\5\7"+
    "\1\3\1\7\3\3\7\7\1\3\u0154\7\2\3\31\7"+
    "\1\3\31\7\1\3\37\7\1\3\31\7\1\3\37\7"+
    "\1\3\31\7\1\3\37\7\1\3\31\7\1\3\37\7"+
    "\1\3\31\7\1\3\10\7\2\3\62\0\4\7\1\3"+
    "\33\7\1\3\2\7\1\3\1\7\2\3\1\7\1\3"+
    "\12\7\1\3\4\7\1\3\1\7\1\3\1\7\6\3"+
    "\1\7\4\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\3\7\1\3\2\7\1\3\1\7\2\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\2\7\1\3\1\7\2\3\4\7\1\3\7\7\1\3"+
    "\4\7\1\3\4\7\1\3\1\7\1\3\12\7\1\3"+
    "\21\7\5\3\3\7\1\3\5\7\1\3\21\7\104\3"+
    "\327\7\51\3\65\7\13\3\336\7\343\3\1\0\36\3"+
    "\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21248];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\2\2\1\3\1\4\1\5\2\3\1\6"+
    "\3\3\2\7\2\3\21\5\1\1\1\10\2\11\1\12"+
    "\1\13\15\10\1\14\2\15\1\16\1\17\1\10\1\20"+
    "\1\10\4\1\11\14\12\21\1\22\1\23\15\22\2\24"+
    "\1\25\2\26\1\27\3\30\1\31\12\30\1\32\2\33"+
    "\1\34\15\32\2\35\1\36\1\37\2\40\15\26\5\0"+
    "\2\41\1\0\1\2\1\0\1\41\1\5\1\42\47\5"+
    "\2\10\1\42\26\10\2\0\1\42\26\0\1\41\2\0"+
    "\16\5\1\42\2\5\1\42\23\5\1\43\1\5\6\10"+
    "\1\42\16\10\6\0\1\42\17\0\1\2\3\5\1\42"+
    "\1\44\6\5\1\45\1\46\17\5\1\44\6\5\1\42"+
    "\25\10\1\42\25\0\1\42\2\5\1\42\26\5\17\10"+
    "\17\0\1\5\2\42\7\5\1\42\2\5\4\10\1\42"+
    "\1\10\4\0\1\42\1\0\5\5\4\10\4\0\2\5"+
    "\1\10\1\0\2\5\1\10\1\0\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[535];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0258\0\u0294\0\u02d0\0\u0258\0\u030c"+
    "\0\u0258\0\u0348\0\u0258\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474"+
    "\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654"+
    "\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834"+
    "\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u0258\0\u099c\0\u0258"+
    "\0\u0258\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40"+
    "\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0258\0\u0258"+
    "\0\u0ce4\0\u0258\0\u0258\0\u0d20\0\u0258\0\u0d5c\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u1068\0\u0258\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c"+
    "\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u0258\0\u0258\0\u0d98"+
    "\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u0258\0\u10a4\0\u0258\0\u0258"+
    "\0\u10e0\0\u0258\0\u0258\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88"+
    "\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068"+
    "\0\u0258\0\u0258\0\u111c\0\u0258\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c"+
    "\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c"+
    "\0\u1068\0\u0258\0\u1158\0\u0258\0\u0258\0\u0258\0\u1194\0\u0d98"+
    "\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u11d0\0\u03c0\0\u0438\0\u120c"+
    "\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u0438\0\u13b0"+
    "\0\u030c\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554"+
    "\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734"+
    "\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914"+
    "\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4"+
    "\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u0960\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78"+
    "\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058"+
    "\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238"+
    "\0\u2274\0\u22b0\0\u22ec\0\u0258\0\u2328\0\u2364\0\u23a0\0\u23dc"+
    "\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc"+
    "\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c"+
    "\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c"+
    "\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c"+
    "\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c"+
    "\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c"+
    "\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0\0\u30fc"+
    "\0\u3138\0\u3174\0\u030c\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0"+
    "\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480"+
    "\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660"+
    "\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c\0\u37c8\0\u3804\0\u3840"+
    "\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u39e4\0\u3a20"+
    "\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4\0\u288c"+
    "\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4"+
    "\0\u3de0\0\u3e1c\0\u3e58\0\u0258\0\u0258\0\u3e94\0\u3ed0\0\u3f0c"+
    "\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u40b0\0\u40ec"+
    "\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u030c\0\u4218\0\u4254\0\u4290"+
    "\0\u42cc\0\u4308\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434\0\u4470"+
    "\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8\0\u4614\0\u4650"+
    "\0\u468c\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8\0\u47f4\0\u4830"+
    "\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998\0\u49d4\0\u4a10"+
    "\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78\0\u4bb4\0\u4bf0"+
    "\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58\0\u4d94\0\u4dd0"+
    "\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc\0\u4f38\0\u4f74\0\u4fb0"+
    "\0\u4fec\0\u5028\0\u5064\0\u50a0\0\u50dc\0\u5118\0\u5154\0\u5190"+
    "\0\u51cc\0\u5208\0\u5244\0\u5280\0\u52bc\0\u52f8\0\u5334\0\u5370"+
    "\0\u53ac\0\u53e8\0\u5424\0\u5460\0\u549c\0\u54d8\0\u5514\0\u5550"+
    "\0\u558c\0\u55c8\0\u5604\0\u5640\0\u567c\0\u56b8\0\u56f4\0\u5730"+
    "\0\u576c\0\u57a8\0\u57e4\0\u5820\0\u585c\0\u5898\0\u58d4\0\u5910"+
    "\0\u594c\0\u5988\0\u59c4\0\u5a00\0\u5a3c\0\u5a78\0\u5ab4\0\u5af0"+
    "\0\u5b2c\0\u5b68\0\u5ba4\0\u5be0\0\u5c1c\0\u5c58\0\u5c94\0\u5cd0"+
    "\0\u5d0c\0\u3048\0\u5d48\0\u5d84\0\u5dc0\0\u5dfc\0\u5e38\0\u5e74"+
    "\0\u35ac\0\u5eb0\0\u5eec\0\u5f28\0\u5f64\0\u5fa0\0\u3a98\0\u5fdc"+
    "\0\u6018\0\u6054\0\u6090\0\u60cc\0\u6108\0\u6144\0\u6180\0\u61bc"+
    "\0\u61f8\0\u6234\0\u6270\0\u62ac\0\u62e8\0\u6324\0\u6360\0\u639c"+
    "\0\u63d8\0\u6414\0\u6450\0\u648c\0\u64c8\0\u6504\0\u6540";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[535];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\2\14\1\13\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\21\1\16\1\21\1\24\1\25\1\26"+
    "\1\27\10\30\1\21\1\31\1\16\1\32\3\20\1\13"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\20\1\41"+
    "\1\42\2\20\1\43\2\20\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\20\1\53\1\20\1\54\2\55"+
    "\1\56\1\55\1\57\1\55\1\60\3\55\1\61\27\55"+
    "\1\61\2\55\1\62\1\63\1\64\1\65\2\55\1\66"+
    "\2\55\1\67\2\55\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\4\55\1\77\2\100\1\77\1\101\1\77"+
    "\1\102\3\77\1\103\7\77\11\104\1\105\3\77\2\106"+
    "\2\77\2\13\1\107\1\110\1\111\1\112\2\77\1\113"+
    "\2\77\1\114\2\77\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\4\77\1\124\2\100\1\124\1\101\1\124"+
    "\1\103\3\124\1\102\7\124\11\104\1\105\3\124\2\106"+
    "\2\124\2\13\1\107\1\110\1\111\1\112\2\124\1\125"+
    "\2\124\1\126\2\124\1\127\1\130\1\131\1\132\1\133"+
    "\1\134\1\135\4\124\6\136\1\137\36\136\1\140\1\141"+
    "\1\142\1\143\2\136\1\144\2\136\1\145\2\136\1\146"+
    "\1\147\1\150\1\151\1\152\1\153\1\154\16\136\1\137"+
    "\32\136\1\140\1\141\1\142\1\143\2\136\1\144\2\136"+
    "\1\145\2\136\1\146\1\147\1\150\1\151\1\152\1\153"+
    "\1\154\4\136\1\13\2\155\1\13\1\156\7\13\1\157"+
    "\1\13\1\155\1\13\1\160\1\13\11\161\1\162\3\13"+
    "\1\163\1\13\1\163\1\13\2\163\1\164\1\165\1\166"+
    "\1\167\2\163\1\170\2\163\1\171\2\163\1\172\1\173"+
    "\1\174\1\175\1\176\1\177\1\200\3\163\1\13\1\201"+
    "\2\202\1\201\1\203\12\201\1\160\2\201\11\161\1\204"+
    "\11\201\1\205\1\206\1\207\1\210\2\201\1\211\2\201"+
    "\1\212\2\201\1\213\1\214\1\215\1\216\1\217\1\220"+
    "\1\221\4\201\2\55\1\222\1\55\1\223\1\55\1\224"+
    "\3\55\1\225\27\55\1\224\2\55\1\62\1\63\1\64"+
    "\1\65\2\55\1\66\2\55\1\67\2\55\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\4\55\1\160\2\226"+
    "\1\160\1\227\6\160\2\226\16\160\1\226\11\160\1\230"+
    "\1\231\1\232\1\233\2\160\1\234\2\160\1\235\2\160"+
    "\1\236\1\237\1\240\1\241\1\242\1\243\1\244\4\160"+
    "\76\0\1\14\126\0\1\21\36\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\30\20\12\0\1\21"+
    "\101\0\1\245\1\246\1\0\1\247\10\250\2\0\1\21"+
    "\55\0\1\251\1\252\1\0\11\253\56\0\1\254\3\0"+
    "\1\255\13\0\1\21\56\0\1\256\1\0\11\257\61\0"+
    "\1\256\1\0\11\30\75\0\2\21\73\0\2\21\35\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\3\20\1\260\14\20\1\261\7\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\1\262\14\20"+
    "\1\263\1\20\1\264\6\20\1\265\1\20\1\0\1\20"+
    "\6\0\1\20\12\0\11\20\4\0\3\20\1\0\1\266"+
    "\14\20\1\267\12\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\1\270\3\20\1\271\10\20"+
    "\1\261\12\20\1\0\1\20\6\0\1\20\12\0\11\20"+
    "\4\0\3\20\1\0\12\20\1\272\1\20\1\273\4\20"+
    "\1\274\6\20\1\0\1\20\6\0\1\20\12\0\11\20"+
    "\4\0\3\20\1\0\1\275\7\20\1\276\4\20\1\277"+
    "\1\20\1\300\2\20\1\301\5\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\4\20\1\302"+
    "\10\20\1\303\12\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\5\20\1\261\5\20\1\304"+
    "\1\305\13\20\1\0\1\20\6\0\1\20\12\0\11\20"+
    "\4\0\3\20\1\0\1\306\7\20\1\307\4\20\1\310"+
    "\12\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\1\311\16\20\1\312\2\20\1\313\5\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\4\20\1\314\23\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\4\20\1\315\10\20"+
    "\1\316\3\20\1\317\5\20\1\320\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\7\20\1\321"+
    "\7\20\1\322\10\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\5\20\1\323\2\20\1\324"+
    "\17\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\1\277\7\20\1\325\17\20\1\0\1\20"+
    "\6\0\1\20\12\0\11\20\4\0\3\20\1\0\4\20"+
    "\1\326\2\20\1\327\20\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\4\20\1\330\23\20"+
    "\74\0\1\21\2\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\31\55\2\0\1\56\71\0"+
    "\2\55\1\0\1\55\1\0\1\55\1\0\3\55\1\0"+
    "\27\55\1\0\15\55\1\331\15\55\1\0\1\55\1\0"+
    "\1\55\1\0\3\55\1\0\27\55\1\0\4\55\1\332"+
    "\10\55\1\333\15\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\12\55\1\334\1\55\1\335"+
    "\16\55\1\0\1\55\1\0\1\55\1\0\3\55\1\0"+
    "\27\55\1\0\1\336\14\55\1\337\1\55\1\340\2\55"+
    "\1\341\10\55\1\0\1\55\1\0\1\55\1\0\3\55"+
    "\1\0\27\55\1\0\5\55\1\333\5\55\1\342\1\343"+
    "\16\55\1\0\1\55\1\0\1\55\1\0\3\55\1\0"+
    "\27\55\1\0\1\344\14\55\1\345\15\55\1\0\1\55"+
    "\1\0\1\55\1\0\3\55\1\0\27\55\1\0\1\346"+
    "\16\55\1\347\2\55\1\350\10\55\1\0\1\55\1\0"+
    "\1\55\1\0\3\55\1\0\27\55\1\0\4\55\1\351"+
    "\26\55\1\0\1\55\1\0\1\55\1\0\3\55\1\0"+
    "\27\55\1\0\15\55\1\352\3\55\1\353\11\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\7\55\1\354\7\55\1\355\13\55\1\0\1\55\1\0"+
    "\1\55\1\0\3\55\1\0\27\55\1\0\5\55\1\356"+
    "\2\55\1\357\22\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\1\337\7\55\1\360\22\55"+
    "\1\0\1\55\1\0\1\55\1\0\3\55\1\0\27\55"+
    "\1\0\7\55\1\361\21\55\2\0\1\100\113\0\11\104"+
    "\100\0\2\106\113\0\1\362\62\0\1\363\10\0\1\364"+
    "\70\0\1\365\1\0\1\366\57\0\1\367\14\0\1\370"+
    "\1\0\1\371\2\0\1\372\56\0\1\364\5\0\1\373"+
    "\1\374\57\0\1\375\14\0\1\376\56\0\1\377\16\0"+
    "\1\u0100\2\0\1\u0101\55\0\1\u0102\104\0\1\u0103\3\0"+
    "\1\u0104\61\0\1\u0105\7\0\1\u0106\61\0\1\u0107\2\0"+
    "\1\u0108\63\0\1\370\7\0\1\u0109\72\0\1\u010a\23\0"+
    "\1\155\113\0\11\161\43\0\1\202\73\0\1\222\73\0"+
    "\1\226\110\0\1\245\1\246\1\0\1\247\10\250\61\0"+
    "\1\256\1\0\11\250\60\0\1\251\2\0\11\253\60\0"+
    "\1\u010b\1\252\1\0\11\253\63\0\11\253\41\0\15\u010c"+
    "\1\u010d\56\u010c\2\255\1\14\1\255\1\15\67\255\20\0"+
    "\1\252\53\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\3\20\1\u010e\24\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\12\20\1\u010f"+
    "\15\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\15\20\1\u0110\12\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\4\20\1\u0111"+
    "\23\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\21\20\1\u0112\6\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\12\20\1\u0113"+
    "\15\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\14\20\1\u0114\13\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\26\20\1\u0115"+
    "\1\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\12\20\1\u0116\15\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\20\20\1\u0117"+
    "\7\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\22\20\1\u0118\5\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\7\20\1\u0119"+
    "\20\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\12\20\1\272\15\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\14\20\1\u011a"+
    "\13\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\17\20\1\261\10\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\15\20\1\u0118"+
    "\12\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\14\20\1\u011b\13\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\25\20\1\u011c"+
    "\2\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\22\20\1\u011d\5\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\16\20\1\u011e"+
    "\11\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\21\20\1\u011f\6\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\16\20\1\u0120"+
    "\11\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\14\20\1\u0121\13\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\3\20\1\u0122"+
    "\24\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\26\20\1\u0123\1\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\1\u0124\7\20"+
    "\1\u0125\17\20\1\0\1\20\6\0\1\20\12\0\11\20"+
    "\4\0\3\20\1\0\1\20\1\u0126\26\20\1\0\1\20"+
    "\6\0\1\20\12\0\11\20\4\0\3\20\1\0\21\20"+
    "\1\u0127\6\20\1\0\1\20\6\0\1\20\12\0\11\20"+
    "\4\0\3\20\1\0\2\20\1\u0128\11\20\1\u0129\13\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\12\20\1\u012a\15\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\17\20\1\u012b\10\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\1\u012c\27\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\10\20\1\u012d\17\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\1\u012e\21\20\1\u0117\5\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\10\20\1\u012f\17\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\14\20\1\u0130\13\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\4\20\1\u0131\23\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\4\20\1\u0132\3\20\1\u0133\17\20\1\0\1\20"+
    "\6\0\1\20\12\0\11\20\4\0\3\20\1\0\10\20"+
    "\1\u0134\17\20\1\0\1\20\6\0\1\20\12\0\11\20"+
    "\4\0\3\20\1\0\1\u011d\27\20\1\0\2\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\14\55\1\u0135\16\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\12\55\1\u0136\20\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\20\55\1\u0137\12\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\22\55\1\u0138\10\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\12\55\1\334\20\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\17\55\1\333\13\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\15\55\1\u0138\15\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\14\55\1\u0139\16\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\16\55\1\u013a\14\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\21\55\1\u013b\11\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\16\55\1\u013c\14\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\3\55\1\u013d\27\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\26\55\1\u013e\4\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\1\u013f\7\55\1\u0140\22\55"+
    "\1\0\1\55\1\0\1\55\1\0\3\55\1\0\27\55"+
    "\1\0\1\55\1\u0141\31\55\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\27\55\1\0\21\55\1\u0142\11\55"+
    "\1\0\1\55\1\0\1\55\1\0\3\55\1\0\27\55"+
    "\1\0\12\55\1\u0143\20\55\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\27\55\1\0\17\55\1\u0144\13\55"+
    "\1\0\1\55\1\0\1\55\1\0\3\55\1\0\27\55"+
    "\1\0\10\55\1\u0145\22\55\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\27\55\1\0\22\55\1\u0137\10\55"+
    "\1\0\1\55\1\0\1\55\1\0\3\55\1\0\27\55"+
    "\1\0\10\55\1\u0146\22\55\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\27\55\1\0\14\55\1\u0147\16\55"+
    "\1\0\1\55\1\0\1\55\1\0\3\55\1\0\27\55"+
    "\1\0\4\55\1\u0148\26\55\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\27\55\1\0\10\55\1\u0149\20\55"+
    "\57\0\1\u014a\71\0\1\u014b\101\0\1\u014c\75\0\1\u014d"+
    "\63\0\1\365\100\0\1\364\71\0\1\u014d\72\0\1\u014e"+
    "\75\0\1\u014f\76\0\1\u0150\70\0\1\u0151\60\0\1\u0152"+
    "\116\0\1\u0153\45\0\1\u0154\7\0\1\u0155\64\0\1\u0156"+
    "\113\0\1\u0157\64\0\1\u0158\100\0\1\u0159\64\0\1\u015a"+
    "\105\0\1\u014c\61\0\1\u015b\77\0\1\u015c\63\0\1\u015d"+
    "\77\0\1\u015e\37\0\1\u010b\2\0\11\253\41\0\15\u010c"+
    "\1\u015f\73\u010c\1\u015f\3\u010c\1\u0160\52\u010c\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\17\20\1\u0161"+
    "\10\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\1\u0162\27\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\12\20\1\261\15\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\1\u0163\27\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\4\20\1\u0164\23\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\12\20\1\u0165\15\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\20\20\1\u0166\1\u0167\6\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\20\20\1\u0133\7\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\4\20\1\u0168\23\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\4\20\1\261\23\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\13\20\1\261\14\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\4\20\1\u0169\23\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\14\20\1\u016a\13\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\2\20\1\u016b\25\20\1\0\1\20\5\0\1\u016c"+
    "\1\20\2\0\1\u016d\7\0\11\20\4\0\3\20\1\0"+
    "\30\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\17\20\1\u0115\10\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\15\20\1\u016e"+
    "\12\20\1\0\1\20\6\0\1\20\12\0\1\20\1\u016f"+
    "\1\u0170\1\u0171\2\20\1\u0172\1\20\1\261\4\0\3\20"+
    "\1\0\4\20\1\u0173\23\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\16\20\1\u0174\11\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\22\20\1\u0175\5\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\10\20\1\u0176\17\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\1\u0177\27\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\6\20\1\u0178\21\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\23\20\1\u0179\4\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\12\20\1\u017a\15\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\22\20\1\u017b\5\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\15\20\1\u017c\12\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\3\20\1\u017d\24\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\10\20\1\u017e\17\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\10\20\1\u017f\11\20\1\u0180\5\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\1\20\1\u0181"+
    "\26\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\20\20\1\261\7\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\14\20\1\u0182"+
    "\13\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\25\20\1\u0183\2\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\21\20\1\u0184"+
    "\6\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\24\20\1\261\3\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\11\20\1\u0115"+
    "\16\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\12\20\1\u0117\15\20\1\0\2\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\20\55\1\u0185\1\u0186\11\55\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\27\55\1\0\4\55\1\u0187\26\55"+
    "\1\0\1\55\1\0\1\55\1\0\3\55\1\0\27\55"+
    "\1\0\4\55\1\333\26\55\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\27\55\1\0\13\55\1\333\17\55"+
    "\1\0\1\55\1\0\1\55\1\0\3\55\1\0\27\55"+
    "\1\0\2\55\1\u0188\30\55\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\27\55\1\0\15\55\1\u0189\15\55"+
    "\1\0\1\55\1\0\1\55\1\0\3\55\1\0\10\55"+
    "\1\u018a\1\u018b\1\u018c\2\55\1\u018d\1\55\1\333\7\55"+
    "\1\0\4\55\1\u018e\26\55\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\27\55\1\0\16\55\1\u018f\14\55"+
    "\1\0\1\55\1\0\1\55\1\0\3\55\1\0\27\55"+
    "\1\0\10\55\1\u0190\22\55\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\27\55\1\0\1\u0191\32\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\6\55\1\u0192\24\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\23\55\1\u0193\7\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\12\55\1\u0194\20\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\22\55\1\u0195\10\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\10\55\1\u0196\22\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\10\55\1\u0197\11\55\1\u0198"+
    "\10\55\1\0\1\55\1\0\1\55\1\0\3\55\1\0"+
    "\27\55\1\0\20\55\1\333\12\55\1\0\1\55\1\0"+
    "\1\55\1\0\3\55\1\0\27\55\1\0\25\55\1\u0199"+
    "\5\55\1\0\1\55\1\0\1\55\1\0\3\55\1\0"+
    "\27\55\1\0\21\55\1\u019a\11\55\1\0\1\55\1\0"+
    "\1\55\1\0\3\55\1\0\27\55\1\0\24\55\1\333"+
    "\6\55\1\0\1\55\1\0\1\55\1\0\3\55\1\0"+
    "\27\55\1\0\12\55\1\u0137\16\55\63\0\1\u019b\1\u019c"+
    "\56\0\1\u019d\73\0\1\364\102\0\1\364\62\0\1\u019e"+
    "\106\0\1\u019f\36\0\1\u01a0\1\u01a1\1\u01a2\2\0\1\u01a3"+
    "\1\0\1\364\14\0\1\u01a4\105\0\1\u01a5\65\0\1\u01a6"+
    "\63\0\1\u01a7\101\0\1\u01a8\110\0\1\u01a9\62\0\1\u01aa"+
    "\103\0\1\u01ab\61\0\1\u01ac\73\0\1\u01ad\11\0\1\u01ae"+
    "\71\0\1\364\100\0\1\u01af\67\0\1\u01b0\76\0\1\364"+
    "\61\0\1\u014c\16\0\15\u010c\1\u015f\3\u010c\1\14\52\u010c"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\4\20\1\u01b1\23\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\14\20\1\u01b2\13\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\11\20\1\261\16\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\20\20\1\u01b3\7\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\2\20\1\u01b4\25\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\21\20\1\u01b5\6\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\10\20\1\u01b6\6\20\1\u01b7\10\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\6\20\1\u01b8"+
    "\12\20\1\u0117\6\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\17\20\1\u0133\10\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\4\20\1\u01b9\23\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\21\20\1\u01ba\6\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\17\20\1\u01bb\10\20\1\0\1\20\6\0\1\20\12\0"+
    "\2\20\1\u01bc\3\20\1\261\2\20\4\0\3\20\1\0"+
    "\30\20\1\0\1\20\6\0\1\20\12\0\5\20\1\u01bd"+
    "\3\20\4\0\3\20\1\0\30\20\1\0\1\20\6\0"+
    "\1\20\12\0\2\20\1\261\6\20\4\0\3\20\1\0"+
    "\30\20\1\0\1\20\6\0\1\20\12\0\4\20\1\261"+
    "\4\20\4\0\3\20\1\0\30\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\17\20\1\u01be"+
    "\10\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\10\20\1\u017f\17\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\21\20\1\u01bf"+
    "\6\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\5\20\1\u01c0\22\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\1\20\1\u0134"+
    "\26\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\13\20\1\u01c1\14\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\1\u01c2\27\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\10\20\1\u01c3\17\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\17\20\1\u01c4\10\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\14\20\1\u01c5\13\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\3\20\1\u01c6\24\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\14\20\1\u01c7\13\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\2\20\1\u01bb\25\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\15\20\1\u0133\12\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\20\20\1\u01c8\7\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\4\20\1\u01c9\23\20\1\0\1\20\6\0\1\20"+
    "\12\0\1\20\1\u016f\1\u0170\1\u0171\2\20\1\u0172\1\20"+
    "\1\261\4\0\3\20\1\0\30\20\1\0\2\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\21\55\1\u01ca\11\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\10\55\1\u01cb\6\55\1\u01cc"+
    "\13\55\1\0\1\55\1\0\1\55\1\0\3\55\1\0"+
    "\27\55\1\0\21\55\1\u0137\11\55\1\0\1\55\1\0"+
    "\1\55\1\0\3\55\1\0\27\55\1\0\21\55\1\u01cd"+
    "\11\55\1\0\1\55\1\0\1\55\1\0\3\55\1\0"+
    "\27\55\1\0\17\55\1\u01ce\13\55\1\0\1\55\1\0"+
    "\1\55\1\0\3\55\1\0\11\55\1\u01cf\3\55\1\333"+
    "\11\55\1\0\33\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\14\55\1\u01d0\12\55\1\0\33\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\11\55\1\333"+
    "\15\55\1\0\33\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\13\55\1\333\13\55\1\0\33\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\17\55\1\u01d1\13\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\10\55\1\u0197\22\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\5\55\1\u01d2\25\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\1\55\1\u0149\31\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\13\55\1\u01d3\17\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\1\u0187\32\55\1\0\1\55"+
    "\1\0\1\55\1\0\3\55\1\0\27\55\1\0\10\55"+
    "\1\u01d4\22\55\1\0\1\55\1\0\1\55\1\0\3\55"+
    "\1\0\27\55\1\0\17\55\1\u01d5\13\55\1\0\1\55"+
    "\1\0\1\55\1\0\3\55\1\0\27\55\1\0\3\55"+
    "\1\u01d6\27\55\1\0\1\55\1\0\1\55\1\0\3\55"+
    "\1\0\27\55\1\0\14\55\1\u01d7\16\55\1\0\1\55"+
    "\1\0\1\55\1\0\3\55\1\0\27\55\1\0\2\55"+
    "\1\u01ce\30\55\1\0\1\55\1\0\1\55\1\0\3\55"+
    "\1\0\27\55\1\0\4\55\1\u01d8\26\55\1\0\1\55"+
    "\1\0\1\55\1\0\3\55\1\0\10\55\1\u018a\1\u018b"+
    "\1\u018c\2\55\1\u018d\1\55\1\333\7\55\1\0\31\55"+
    "\64\0\1\u01d9\62\0\1\u01da\6\0\1\u01db\75\0\1\u014c"+
    "\73\0\1\u01dc\71\0\1\u01dd\35\0\1\u01de\3\0\1\364"+
    "\72\0\1\u01df\70\0\1\364\75\0\1\364\127\0\1\u01e0"+
    "\64\0\1\u01ad\70\0\1\u01e1\67\0\1\u015e\105\0\1\u01e2"+
    "\60\0\1\u019d\103\0\1\u01e3\102\0\1\u01e4\57\0\1\u01e5"+
    "\104\0\1\u01e6\61\0\1\u01dd\75\0\1\u01e7\47\0\1\u01a0"+
    "\1\u01a1\1\u01a2\2\0\1\u01a3\1\0\1\364\41\0\1\20"+
    "\6\0\1\20\12\0\11\20\4\0\3\20\1\0\20\20"+
    "\1\u012d\7\20\1\0\1\20\6\0\1\20\12\0\11\20"+
    "\4\0\3\20\1\0\2\20\1\u01e8\25\20\1\0\1\20"+
    "\6\0\1\20\12\0\1\20\2\u01e9\1\u01ea\5\261\4\0"+
    "\3\20\1\0\30\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\15\20\1\u01eb\12\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\17\20\1\u01ec\10\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\14\20\1\u01ed\13\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\1\u0180\27\20\1\0\1\20\6\0\1\20\12\0\11\20"+
    "\4\0\3\20\1\0\1\u01ee\27\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\26\20\1\u0133"+
    "\1\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\10\20\1\u01ef\17\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\21\20\1\261"+
    "\6\20\1\0\1\20\6\0\1\20\12\0\10\20\1\261"+
    "\4\0\3\20\1\0\30\20\1\0\1\20\6\0\1\20"+
    "\12\0\6\20\1\261\2\20\4\0\3\20\1\0\30\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\14\20\1\u01f0\13\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\4\20\1\u0115\23\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\10\20\1\u01f1\17\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\1\261\27\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\21\20\1\u0117\6\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\2\20\1\261\25\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\14\20\1\u01f2\13\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\3\20\1\u0115\24\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\10\20\1\u01f3\17\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\6\20\1\261\21\20\1\0"+
    "\1\20\6\0\1\20\12\0\11\20\4\0\3\20\1\0"+
    "\5\20\1\u01f4\22\20\1\0\1\20\6\0\1\20\12\0"+
    "\11\20\4\0\3\20\1\0\3\20\1\261\24\20\1\0"+
    "\2\55\1\0\1\55\1\0\1\55\1\0\3\55\1\0"+
    "\27\55\1\0\17\55\1\u01f5\13\55\1\0\1\55\1\0"+
    "\1\55\1\0\3\55\1\0\27\55\1\0\14\55\1\355"+
    "\16\55\1\0\1\55\1\0\1\55\1\0\3\55\1\0"+
    "\27\55\1\0\1\u0198\32\55\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\27\55\1\0\10\55\1\u01f6\22\55"+
    "\1\0\1\55\1\0\1\55\1\0\3\55\1\0\27\55"+
    "\1\0\21\55\1\333\11\55\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\17\55\1\333\7\55\1\0\33\55"+
    "\1\0\1\55\1\0\1\55\1\0\3\55\1\0\15\55"+
    "\1\333\11\55\1\0\33\55\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\27\55\1\0\14\55\1\u01f7\16\55"+
    "\1\0\1\55\1\0\1\55\1\0\3\55\1\0\27\55"+
    "\1\0\10\55\1\u01f8\22\55\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\27\55\1\0\1\333\32\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\2\55\1\333\30\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\14\55\1\u01f9\16\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\10\55\1\u01fa\22\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\6\55\1\333\24\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\3\55\1\333\25\55\62\0\1\u01fb\70\0\1\u0106\57\0"+
    "\1\u01ae\103\0\1\u01fc\104\0\1\364\41\0\1\364\71\0"+
    "\1\364\122\0\1\u01fd\67\0\1\u01fe\63\0\1\364\75\0"+
    "\1\364\105\0\1\u01ff\67\0\1\u0200\71\0\1\364\70\0"+
    "\1\364\25\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\4\20\1\u017d\23\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\261\4\0\3\20\1\0\30\20\1\0"+
    "\1\20\6\0\1\20\12\0\3\261\6\20\4\0\3\20"+
    "\1\0\30\20\1\0\1\20\6\0\1\20\12\0\11\20"+
    "\4\0\3\20\1\0\3\20\1\u01e8\24\20\1\0\1\20"+
    "\6\0\1\20\12\0\11\20\4\0\3\20\1\0\22\20"+
    "\1\u0201\5\20\1\0\1\20\6\0\1\20\12\0\11\20"+
    "\4\0\3\20\1\0\22\20\1\u0117\5\20\1\0\1\20"+
    "\6\0\1\20\12\0\11\20\4\0\3\20\1\0\21\20"+
    "\1\u0202\6\20\1\0\1\20\6\0\1\20\12\0\11\20"+
    "\4\0\3\20\1\0\15\20\1\u0203\12\20\1\0\1\20"+
    "\6\0\1\20\12\0\11\20\4\0\3\20\1\0\1\u0110"+
    "\27\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\4\20\1\277\23\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\21\20\1\u0204"+
    "\6\20\1\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\4\20\1\u0205\23\20\1\0\2\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\22\55\1\u0206\10\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\15\55\1\u0207\15\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\27\55\1\0"+
    "\1\u0208\32\55\1\0\1\55\1\0\1\55\1\0\3\55"+
    "\1\0\27\55\1\0\4\55\1\337\26\55\1\0\1\55"+
    "\1\0\1\55\1\0\3\55\1\0\27\55\1\0\21\55"+
    "\1\u0209\7\55\65\0\1\u020a\66\0\1\u020b\56\0\1\u020c"+
    "\77\0\1\370\110\0\1\u020d\7\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\2\20\1\u020e\25\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\4\20\1\u020f\23\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\14\20\1\261\13\20"+
    "\1\0\1\20\6\0\1\20\12\0\11\20\4\0\3\20"+
    "\1\0\26\20\1\261\1\20\1\0\1\20\6\0\1\20"+
    "\12\0\11\20\4\0\3\20\1\0\17\20\1\u017d\10\20"+
    "\1\0\2\55\1\0\1\55\1\0\1\55\1\0\3\55"+
    "\1\0\27\55\1\0\2\55\1\u0210\30\55\1\0\1\55"+
    "\1\0\1\55\1\0\3\55\1\0\27\55\1\0\14\55"+
    "\1\333\16\55\1\0\1\55\1\0\1\55\1\0\3\55"+
    "\1\0\27\55\1\0\12\55\1\333\20\55\1\0\1\55"+
    "\1\0\1\55\1\0\3\55\1\0\27\55\1\0\26\55"+
    "\1\333\2\55\45\0\1\u0211\105\0\1\364\71\0\1\364"+
    "\107\0\1\364\2\0\1\20\6\0\1\20\12\0\11\20"+
    "\4\0\3\20\1\0\21\20\1\u0212\6\20\1\0\1\20"+
    "\6\0\1\20\12\0\11\20\4\0\3\20\1\0\2\20"+
    "\1\u0213\25\20\1\0\2\55\1\0\1\55\1\0\1\55"+
    "\1\0\3\55\1\0\27\55\1\0\21\55\1\u0214\7\55"+
    "\64\0\1\u0215\7\0\1\20\6\0\1\20\12\0\11\20"+
    "\4\0\3\20\1\0\15\20\1\277\12\20\1\0\1\20"+
    "\6\0\1\20\12\0\11\20\4\0\3\20\1\0\1\u0216"+
    "\27\20\1\0\2\55\1\0\1\55\1\0\1\55\1\0"+
    "\3\55\1\0\27\55\1\0\15\55\1\337\13\55\60\0"+
    "\1\370\13\0\1\20\6\0\1\20\12\0\11\20\4\0"+
    "\3\20\1\0\12\20\1\u0217\15\20\1\0\1\20\6\0"+
    "\1\20\12\0\11\20\4\0\3\20\1\0\12\20\1\u017d"+
    "\15\20\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25980];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\2\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\32\1\1\11\1\1\2\11\15\1\2\11\1\1\2\11"+
    "\1\1\1\11\16\1\1\11\11\1\2\11\15\1\1\11"+
    "\1\1\2\11\1\1\2\11\15\1\2\11\1\1\1\11"+
    "\15\1\1\11\1\1\3\11\16\1\5\0\2\1\1\0"+
    "\1\1\1\0\103\1\2\0\1\11\26\0\1\1\2\0"+
    "\74\1\6\0\1\1\17\0\14\1\2\11\55\1\25\0"+
    "\51\1\17\0\23\1\4\0\1\1\1\0\11\1\4\0"+
    "\3\1\1\0\3\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[535];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    public static int bandera = 0;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   for(Token t: tokens){
    t.print();
  }

  System.out.println("\nErrores\n");
  for(Token t: errores){
    t.print();
  }
  return 0;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println(yyline);
  System.out.println(yycolumn); 
  // throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 39: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 40: break;
          case 3:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 41: break;
          case 4:
            { string.setLength(0); yybegin(STRING); bandera = yycolumn;
            }
            // fall through
          case 42: break;
          case 5:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Identificador"));
            }
            // fall through
          case 43: break;
          case 6:
            { string.setLength(0); yybegin(Chars); bandera = yycolumn;
            }
            // fall through
          case 44: break;
          case 7:
            { string.setLength(0);
  string.append(yytext());
  yybegin(numberState);
            }
            // fall through
          case 45: break;
          case 8:
            { string.append( yytext() );
            }
            // fall through
          case 46: break;
          case 9:
            { System.out.println("HOLA");
    //string.append( yytext() );
    errores.add(new Token(string.toString(), yyline, bandera, "Error stringASAD"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 47: break;
          case 10:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 48: break;
          case 11:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error string"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 49: break;
          case 12:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
    yybegin(hexaStateError);
            }
            // fall through
          case 50: break;
          case 13:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 51: break;
          case 14:
            { yybegin(YYINITIAL);
    string.append( yytext() ); 
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada"));
            }
            // fall through
          case 52: break;
          case 15:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 53: break;
          case 16:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); 
    errores.add(new Token("Comillas", yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 54: break;
          case 17:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 55: break;
          case 18:
            { 
            }
            // fall through
          case 56: break;
          case 19:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 57: break;
          case 20:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
            }
            // fall through
          case 58: break;
          case 21:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(")", yyline+1, yycolumn, "Operador"));
            }
            // fall through
          case 59: break;
          case 22:
            { string.append(yytext());
            }
            // fall through
          case 60: break;
          case 23:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(";", yyline+1, yycolumn, "Operador"));
            }
            // fall through
          case 61: break;
          case 24:
            { string.append(yytext()); yybegin(Identificadorcillo);
            }
            // fall through
          case 62: break;
          case 25:
            { yybegin(NaturalNumbers);
    string.append(yytext());
            }
            // fall through
          case 63: break;
          case 26:
            { bandera = 1; 
    string.append(yytext());
            }
            // fall through
          case 64: break;
          case 27:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
    }
            }
            // fall through
          case 65: break;
          case 28:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
            }
            // fall through
          case 66: break;
          case 29:
            { System.out.println("HOLA2");
    string.append( yytext() );
    errores.add(new Token(string.toString(), yyline, bandera, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 67: break;
          case 30:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 68: break;
          case 31:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
            }
            // fall through
          case 69: break;
          case 32:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error: identificador")); yybegin(YYINITIAL);
            }
            // fall through
          case 70: break;
          case 33:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error Decimal"));
            }
            // fall through
          case 71: break;
          case 34:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 72: break;
          case 35:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 73: break;
          case 36:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 74: break;
          case 37:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 75: break;
          case 38:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaStateC);
            }
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
