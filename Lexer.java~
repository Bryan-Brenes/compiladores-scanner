// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

/* JFlex example: partial Java language lexer specification */
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int hexaState = 4;
  public static final int hexaStateC = 6;
  public static final int hexaStateError = 8;
  public static final int hexaStateCError = 10;
  public static final int numberState = 12;
  public static final int NaturalNumbers = 14;
  public static final int Chars = 16;
  public static final int Identificadorcillo = 18;
  public static final int hope = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\3\u1f00\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\3\u1f00\1\u3e00\1\u3f00\4\u1f00"+
    "\1\u4000\11\u1f00\3\u0100\1\u4100\1\u4200\13\u1f00\4\u0100\1\u4300"+
    "\63\u1f00\2\u0100\1\u4400\4\u1f00\1\u4500\100\u1f00\1\u4600\40\u1f00"+
    "\1\u4700\1\u4800\1\u1f00\1\u4900\1\u4a00\1\u4b00\1\u4c00\26\u1f00"+
    "\1\u4d00\21\u1f00\246\u0100\1\u4e00\20\u0100\1\u4f00\1\u5000\77\u1f00"+
    "\2\u0100\1\u5000\u0b05\u1f00\1\u5100\1\u5200\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\5\1\6\1\7\1\3\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\33\1\11\1\35\1\36\1\37\1\40\1\11"+
    "\1\3\4\41\1\42\1\41\24\43\1\14\1\44\1\14"+
    "\1\11\1\10\1\3\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\43\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\43\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\14\1\75\1\14"+
    "\1\11\41\0\2\3\4\10\4\3\1\10\2\3\1\0"+
    "\7\3\1\10\4\3\1\10\5\3\27\10\1\3\37\10"+
    "\1\3\u01ca\10\4\3\14\10\16\3\5\10\7\3\1\10"+
    "\1\3\1\10\21\3\160\0\5\10\1\3\2\10\2\3"+
    "\4\10\10\3\1\10\1\3\3\10\1\3\1\10\1\3"+
    "\24\10\1\3\123\10\1\3\213\10\1\3\5\0\2\3"+
    "\236\10\11\3\46\10\2\3\1\10\7\3\47\10\7\3"+
    "\1\10\1\3\55\0\1\3\1\0\1\3\2\0\1\3"+
    "\2\0\1\3\1\0\10\3\33\10\5\3\3\10\15\3"+
    "\5\0\6\3\1\10\4\3\13\0\5\3\53\10\37\0"+
    "\4\3\2\10\1\0\143\10\1\3\1\10\10\0\1\3"+
    "\6\0\2\10\2\0\1\3\4\0\2\10\12\0\3\10"+
    "\2\3\1\10\17\3\1\0\1\10\1\0\36\10\33\0"+
    "\2\3\131\10\13\0\1\10\16\3\12\0\41\10\11\0"+
    "\2\10\4\3\1\10\5\3\26\10\4\0\1\10\11\0"+
    "\1\10\3\0\1\10\5\0\22\3\31\10\3\0\104\3"+
    "\1\10\1\3\13\10\67\3\33\0\1\3\4\0\66\10"+
    "\3\0\1\10\22\0\1\10\7\0\12\10\2\0\2\3"+
    "\12\0\1\3\7\10\1\3\7\10\1\3\3\0\1\3"+
    "\10\10\2\3\2\10\2\3\26\10\1\3\7\10\1\3"+
    "\1\10\3\3\4\10\2\3\1\0\1\10\7\0\2\3"+
    "\2\0\2\3\3\0\1\10\10\3\1\0\4\3\2\10"+
    "\1\3\3\10\2\0\2\3\12\0\4\10\7\3\1\10"+
    "\5\3\3\0\1\3\6\10\4\3\2\10\2\3\26\10"+
    "\1\3\7\10\1\3\2\10\1\3\2\10\1\3\2\10"+
    "\2\3\1\0\1\3\5\0\4\3\2\0\2\3\3\0"+
    "\3\3\1\0\7\3\4\10\1\3\1\10\7\3\14\0"+
    "\3\10\1\0\13\3\3\0\1\3\11\10\1\3\3\10"+
    "\1\3\26\10\1\3\7\10\1\3\2\10\1\3\5\10"+
    "\2\3\1\0\1\10\10\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\10\17\3\2\10\2\0\2\3\12\0\1\3"+
    "\1\10\17\3\3\0\1\3\10\10\2\3\2\10\2\3"+
    "\26\10\1\3\7\10\1\3\2\10\1\3\5\10\2\3"+
    "\1\0\1\10\7\0\2\3\2\0\2\3\3\0\10\3"+
    "\2\0\4\3\2\10\1\3\3\10\2\0\2\3\12\0"+
    "\1\3\1\10\20\3\1\0\1\10\1\3\6\10\3\3"+
    "\3\10\1\3\4\10\3\3\2\10\1\3\1\10\1\3"+
    "\2\10\3\3\2\10\3\3\3\10\3\3\14\10\4\3"+
    "\5\0\3\3\3\0\1\3\4\0\2\3\1\10\6\3"+
    "\1\0\16\3\12\0\11\3\1\10\7\3\3\0\1\3"+
    "\10\10\1\3\3\10\1\3\27\10\1\3\12\10\1\3"+
    "\5\10\3\3\1\10\7\0\1\3\3\0\1\3\4\0"+
    "\7\3\2\0\1\3\2\10\6\3\2\10\2\0\2\3"+
    "\12\0\22\3\2\0\1\3\10\10\1\3\3\10\1\3"+
    "\27\10\1\3\12\10\1\3\5\10\2\3\1\0\1\10"+
    "\7\0\1\3\3\0\1\3\4\0\7\3\2\0\7\3"+
    "\1\10\1\3\2\10\2\0\2\3\12\0\1\3\2\10"+
    "\17\3\2\0\1\3\10\10\1\3\3\10\1\3\51\10"+
    "\2\3\1\10\7\0\1\3\3\0\1\3\4\0\1\10"+
    "\10\3\1\0\10\3\2\10\2\0\2\3\12\0\12\3"+
    "\6\10\2\3\2\0\1\3\22\10\3\3\30\10\1\3"+
    "\11\10\1\3\1\10\2\3\7\10\3\3\1\0\4\3"+
    "\6\0\1\3\1\0\1\3\10\0\22\3\2\0\15\3"+
    "\60\10\1\0\2\10\7\0\4\3\10\10\10\0\1\3"+
    "\12\0\47\3\2\10\1\3\1\10\2\3\2\10\1\3"+
    "\1\10\2\3\1\10\6\3\4\10\1\3\7\10\1\3"+
    "\3\10\1\3\1\10\1\3\1\10\2\3\2\10\1\3"+
    "\4\10\1\0\2\10\6\0\1\3\2\0\1\10\2\3"+
    "\5\10\1\3\1\10\1\3\6\0\2\3\12\0\2\3"+
    "\4\10\40\3\1\10\27\3\2\0\6\3\12\0\13\3"+
    "\1\0\1\3\1\0\1\3\1\0\4\3\2\0\10\10"+
    "\1\3\44\10\4\3\24\0\1\3\2\0\5\10\13\0"+
    "\1\3\44\0\11\3\1\0\71\3\53\10\24\0\1\10"+
    "\12\0\6\3\6\10\4\0\4\10\3\0\1\10\3\0"+
    "\2\10\7\0\3\10\4\0\15\10\14\0\1\10\17\0"+
    "\2\3\46\10\1\3\1\10\5\3\1\10\2\3\53\10"+
    "\1\3\115\10\1\3\4\10\2\3\7\10\1\3\1\10"+
    "\1\3\4\10\2\3\51\10\1\3\4\10\2\3\41\10"+
    "\1\3\4\10\2\3\7\10\1\3\1\10\1\3\4\10"+
    "\2\3\17\10\1\3\71\10\1\3\4\10\2\3\103\10"+
    "\2\3\3\0\40\3\20\10\20\3\125\10\14\3\u016c\10"+
    "\2\3\21\10\1\3\32\10\5\3\113\10\3\3\3\10"+
    "\17\3\15\10\1\3\4\10\3\0\13\3\22\10\3\0"+
    "\13\3\22\10\2\0\14\3\15\10\1\3\3\10\1\3"+
    "\2\0\14\3\64\10\40\0\3\3\1\10\3\3\2\10"+
    "\1\0\2\3\12\0\41\3\3\0\2\3\12\0\6\3"+
    "\130\10\10\3\51\10\1\0\1\10\5\3\106\10\12\3"+
    "\35\10\3\3\14\0\4\3\14\0\12\3\12\0\36\10"+
    "\2\3\5\10\13\3\54\10\4\3\21\0\7\10\2\0"+
    "\6\3\12\0\46\3\27\10\5\0\4\3\65\10\12\0"+
    "\1\3\35\0\2\3\13\0\6\3\12\0\15\3\1\10"+
    "\130\3\5\0\57\10\21\0\7\10\4\3\12\0\21\3"+
    "\11\0\14\3\3\0\36\10\15\0\2\10\12\0\54\10"+
    "\16\0\14\3\44\10\24\0\10\3\12\0\3\3\3\10"+
    "\12\0\44\10\122\3\3\0\1\3\25\0\4\10\1\0"+
    "\4\10\3\0\2\10\11\3\300\10\47\0\25\3\4\0"+
    "\26\10\2\3\6\10\2\3\46\10\2\3\6\10\2\3"+
    "\10\10\1\3\1\10\1\3\1\10\1\3\1\10\1\3"+
    "\37\10\2\3\65\10\1\3\7\10\1\3\1\10\3\3"+
    "\3\10\1\3\7\10\3\3\4\10\2\3\6\10\4\3"+
    "\15\10\5\3\3\10\1\3\7\10\16\3\5\0\32\3"+
    "\5\0\20\3\2\10\23\3\1\10\13\3\5\0\5\3"+
    "\6\0\1\3\1\10\15\3\1\10\20\3\15\10\3\3"+
    "\33\10\25\3\15\0\4\3\1\0\3\3\14\0\21\3"+
    "\1\10\4\3\1\10\2\3\12\10\1\3\1\10\3\3"+
    "\5\10\6\3\1\10\1\3\1\10\1\3\1\10\1\3"+
    "\4\10\1\3\13\10\2\3\4\10\5\3\5\10\4\3"+
    "\1\10\21\3\51\10\u0177\3\57\10\1\3\57\10\1\3"+
    "\205\10\6\3\4\10\3\0\2\10\14\3\46\10\1\3"+
    "\1\10\5\3\1\10\2\3\70\10\7\3\1\10\17\3"+
    "\1\0\27\10\11\3\7\10\1\3\7\10\1\3\7\10"+
    "\1\3\7\10\1\3\7\10\1\3\7\10\1\3\7\10"+
    "\1\3\7\10\1\3\40\0\57\3\1\10\325\3\3\10"+
    "\31\3\11\10\6\0\1\3\5\10\2\3\5\10\4\3"+
    "\126\10\2\3\2\0\2\3\3\10\1\3\132\10\1\3"+
    "\4\10\5\3\51\10\3\3\136\10\21\3\33\10\65\3"+
    "\306\10\112\3\315\10\63\3\215\10\103\3\56\10\2\3"+
    "\15\10\3\3\20\10\12\0\2\10\24\3\57\10\1\0"+
    "\4\3\12\0\1\3\31\10\7\3\1\0\120\10\2\0"+
    "\45\3\11\10\2\3\147\10\2\3\4\10\1\3\4\10"+
    "\14\3\13\10\115\3\12\10\1\0\3\10\1\0\4\10"+
    "\1\0\27\10\5\0\20\3\1\10\7\3\64\10\14\3"+
    "\2\0\62\10\21\0\13\3\12\0\6\3\22\0\6\10"+
    "\3\3\1\10\4\3\12\0\34\10\10\0\2\3\27\10"+
    "\15\0\14\3\35\10\3\3\4\0\57\10\16\0\16\3"+
    "\1\10\12\0\46\3\51\10\16\0\11\3\3\10\1\0"+
    "\10\10\2\0\2\3\12\0\6\3\27\10\3\3\1\10"+
    "\1\0\4\3\60\10\1\0\1\10\3\0\2\10\2\0"+
    "\5\10\2\0\1\10\1\0\1\10\30\3\3\10\2\3"+
    "\13\10\5\0\2\3\3\10\2\0\12\3\6\10\2\3"+
    "\6\10\2\3\6\10\11\3\7\10\1\3\7\10\221\3"+
    "\43\10\10\0\1\3\2\0\2\3\12\0\6\3\244\10"+
    "\14\3\27\10\4\3\61\10\4\3\156\10\2\3\152\10"+
    "\46\3\7\10\14\3\5\10\5\3\1\10\1\0\12\10"+
    "\1\3\15\10\1\3\5\10\1\3\1\10\1\3\2\10"+
    "\1\3\2\10\1\3\154\10\41\3\153\10\22\3\100\10"+
    "\2\3\66\10\50\3\15\10\3\3\20\0\20\3\7\0"+
    "\14\3\2\10\30\3\3\10\31\3\1\10\6\3\5\10"+
    "\1\3\207\10\2\3\1\0\4\3\1\10\13\3\12\0"+
    "\7\3\32\10\4\3\1\10\1\3\32\10\13\3\131\10"+
    "\3\3\6\10\2\3\6\10\2\3\6\10\2\3\3\10"+
    "\3\3\2\10\3\3\2\10\22\3\3\0\4\3\14\10"+
    "\1\3\32\10\1\3\23\10\1\3\2\10\1\3\17\10"+
    "\2\3\16\10\42\3\173\10\105\3\65\10\210\3\1\0"+
    "\202\3\35\10\3\3\61\10\57\3\37\10\21\3\33\10"+
    "\65\3\36\10\2\3\44\10\4\3\10\10\1\3\5\10"+
    "\52\3\236\10\2\3\12\0\126\3\6\10\2\3\1\10"+
    "\1\3\54\10\1\3\2\10\3\3\1\10\2\3\27\10"+
    "\252\3\26\10\12\3\32\10\106\3\70\10\6\3\2\10"+
    "\100\3\1\10\3\0\1\3\2\0\5\3\4\0\4\10"+
    "\1\3\3\10\1\3\33\10\4\3\3\0\4\3\1\0"+
    "\40\3\35\10\203\3\66\10\12\3\26\10\12\3\23\10"+
    "\215\3\111\10\267\3\3\0\65\10\17\0\37\3\12\0"+
    "\20\3\3\0\55\10\13\0\2\3\1\0\22\3\31\10"+
    "\7\3\12\0\6\3\3\0\44\10\16\0\1\3\12\0"+
    "\100\3\3\0\60\10\16\0\4\10\13\3\12\0\246\3"+
    "\53\10\15\0\10\3\12\0\66\3\157\10\221\3\143\10"+
    "\235\3\57\10\321\3\71\10\307\3\105\10\13\3\1\10"+
    "\56\0\20\3\4\0\15\10\140\3\2\10\u0163\3\5\0"+
    "\3\3\26\0\2\3\7\0\36\3\4\0\224\3\3\0"+
    "\273\3\125\10\1\3\107\10\1\3\2\10\2\3\1\10"+
    "\2\3\2\10\2\3\4\10\1\3\14\10\1\3\1\10"+
    "\1\3\7\10\1\3\101\10\1\3\4\10\2\3\10\10"+
    "\1\3\7\10\1\3\34\10\1\3\4\10\1\3\5\10"+
    "\1\3\1\10\3\3\7\10\1\3\u0154\10\2\3\31\10"+
    "\1\3\31\10\1\3\37\10\1\3\31\10\1\3\37\10"+
    "\1\3\31\10\1\3\37\10\1\3\31\10\1\3\37\10"+
    "\1\3\31\10\1\3\10\10\2\3\62\0\4\10\1\3"+
    "\33\10\1\3\2\10\1\3\1\10\2\3\1\10\1\3"+
    "\12\10\1\3\4\10\1\3\1\10\1\3\1\10\6\3"+
    "\1\10\4\3\1\10\1\3\1\10\1\3\1\10\1\3"+
    "\3\10\1\3\2\10\1\3\1\10\2\3\1\10\1\3"+
    "\1\10\1\3\1\10\1\3\1\10\1\3\1\10\1\3"+
    "\2\10\1\3\1\10\2\3\4\10\1\3\7\10\1\3"+
    "\4\10\1\3\4\10\1\3\1\10\1\3\12\10\1\3"+
    "\21\10\5\3\3\10\1\3\5\10\1\3\21\10\104\3"+
    "\327\10\51\3\65\10\13\3\336\10\343\3\1\0\36\3"+
    "\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21248];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\2\2\1\3\1\4\1\5\2\3\1\6"+
    "\5\3\2\7\2\3\21\5\1\3\1\10\2\11\1\12"+
    "\1\13\15\10\1\14\2\15\1\16\1\17\1\10\1\20"+
    "\1\10\5\21\11\14\12\22\1\23\1\24\15\23\2\25"+
    "\1\26\2\27\1\30\3\31\1\32\12\31\1\33\2\34"+
    "\1\35\15\33\2\36\1\37\1\40\2\41\15\27\1\42"+
    "\1\43\15\42\10\0\2\44\1\0\1\2\1\0\1\44"+
    "\1\5\1\45\47\5\2\10\1\45\26\10\2\0\1\45"+
    "\26\0\1\44\2\0\16\5\1\45\2\5\1\45\23\5"+
    "\1\46\1\5\6\10\1\45\16\10\6\0\1\45\17\0"+
    "\1\2\3\5\1\45\1\47\6\5\1\50\1\51\17\5"+
    "\1\47\6\5\1\45\25\10\1\45\25\0\1\45\2\5"+
    "\1\45\26\5\17\10\17\0\1\5\2\45\7\5\1\45"+
    "\2\5\4\10\1\45\1\10\4\0\1\45\1\0\5\5"+
    "\4\10\4\0\2\5\1\10\1\0\2\5\1\10\1\0"+
    "\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[557];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02aa\0\u02e8\0\u0326\0\u02aa"+
    "\0\u0364\0\u02aa\0\u03a2\0\u02aa\0\u03e0\0\u041e\0\u045c\0\u049a"+
    "\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a"+
    "\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a"+
    "\0\u02aa\0\u0aa8\0\u02aa\0\u02aa\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0"+
    "\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90"+
    "\0\u0dce\0\u02aa\0\u02aa\0\u0e0c\0\u02aa\0\u02aa\0\u0e4a\0\u02aa"+
    "\0\u0e88\0\u02aa\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc"+
    "\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u02aa"+
    "\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170"+
    "\0\u11ae\0\u02aa\0\u02aa\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe"+
    "\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae"+
    "\0\u02aa\0\u11ec\0\u02aa\0\u02aa\0\u122a\0\u02aa\0\u02aa\0\u0ec6"+
    "\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6"+
    "\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u02aa\0\u02aa\0\u1268\0\u02aa"+
    "\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078"+
    "\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u02aa\0\u12a6\0\u02aa"+
    "\0\u02aa\0\u02aa\0\u12e4\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe"+
    "\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae"+
    "\0\u02aa\0\u02aa\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc"+
    "\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u1322"+
    "\0\u1360\0\u139e\0\u13dc\0\u049a\0\u0516\0\u141a\0\u1458\0\u1496"+
    "\0\u139e\0\u14d4\0\u1512\0\u1550\0\u0516\0\u158e\0\u0364\0\u15cc"+
    "\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc"+
    "\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c"+
    "\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c"+
    "\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c"+
    "\0\u0a6a\0\u1fba\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e"+
    "\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e"+
    "\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e"+
    "\0\u254c\0\u02aa\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0"+
    "\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0"+
    "\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0"+
    "\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90"+
    "\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80"+
    "\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070"+
    "\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260"+
    "\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450"+
    "\0\u0364\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602"+
    "\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2"+
    "\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2"+
    "\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\u3bd2"+
    "\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u3d84\0\u3dc2"+
    "\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8\0\u2b1c\0\u3f36\0\u3f74"+
    "\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u40aa\0\u40e8\0\u4126\0\u4164"+
    "\0\u41a2\0\u02aa\0\u02aa\0\u41e0\0\u421e\0\u425c\0\u429a\0\u42d8"+
    "\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e\0\u444c\0\u448a\0\u44c8"+
    "\0\u4506\0\u4544\0\u0364\0\u4582\0\u45c0\0\u45fe\0\u463c\0\u467a"+
    "\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0\0\u47ee\0\u482c\0\u486a"+
    "\0\u48a8\0\u48e6\0\u4924\0\u4962\0\u49a0\0\u49de\0\u4a1c\0\u4a5a"+
    "\0\u4a98\0\u4ad6\0\u4b14\0\u4b52\0\u4b90\0\u4bce\0\u4c0c\0\u4c4a"+
    "\0\u4c88\0\u4cc6\0\u4d04\0\u4d42\0\u4d80\0\u4dbe\0\u4dfc\0\u4e3a"+
    "\0\u4e78\0\u4eb6\0\u4ef4\0\u4f32\0\u4f70\0\u4fae\0\u4fec\0\u502a"+
    "\0\u5068\0\u50a6\0\u50e4\0\u5122\0\u5160\0\u519e\0\u51dc\0\u521a"+
    "\0\u5258\0\u5296\0\u52d4\0\u5312\0\u5350\0\u538e\0\u53cc\0\u540a"+
    "\0\u5448\0\u5486\0\u54c4\0\u5502\0\u5540\0\u557e\0\u55bc\0\u55fa"+
    "\0\u5638\0\u5676\0\u56b4\0\u56f2\0\u5730\0\u576e\0\u57ac\0\u57ea"+
    "\0\u5828\0\u5866\0\u58a4\0\u58e2\0\u5920\0\u595e\0\u599c\0\u59da"+
    "\0\u5a18\0\u5a56\0\u5a94\0\u5ad2\0\u5b10\0\u5b4e\0\u5b8c\0\u5bca"+
    "\0\u5c08\0\u5c46\0\u5c84\0\u5cc2\0\u5d00\0\u5d3e\0\u5d7c\0\u5dba"+
    "\0\u5df8\0\u5e36\0\u5e74\0\u5eb2\0\u5ef0\0\u5f2e\0\u5f6c\0\u5faa"+
    "\0\u5fe8\0\u6026\0\u6064\0\u60a2\0\u60e0\0\u611e\0\u615c\0\u331a"+
    "\0\u619a\0\u61d8\0\u6216\0\u6254\0\u6292\0\u62d0\0\u38ac\0\u630e"+
    "\0\u634c\0\u638a\0\u63c8\0\u6406\0\u3dc2\0\u6444\0\u6482\0\u64c0"+
    "\0\u64fe\0\u653c\0\u657a\0\u65b8\0\u65f6\0\u6634\0\u6672\0\u66b0"+
    "\0\u66ee\0\u672c\0\u676a\0\u67a8\0\u67e6\0\u6824\0\u6862\0\u68a0"+
    "\0\u68de\0\u691c\0\u695a\0\u6998\0\u69d6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[557];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\2\15\1\14\1\16\1\15\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\2\22\1\25\1\26\1\22\1\27"+
    "\1\30\1\31\1\32\10\33\1\22\1\34\1\17\1\35"+
    "\3\21\1\14\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\21\1\44\1\45\2\21\1\46\2\21\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\21\1\56\1\21"+
    "\1\57\2\60\1\61\1\60\1\62\2\60\1\63\3\60"+
    "\1\64\30\60\1\64\2\60\1\65\1\66\1\67\1\70"+
    "\2\60\1\71\2\60\1\72\2\60\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\4\60\1\102\2\103\1\102"+
    "\1\104\1\103\1\102\1\105\3\102\1\106\10\102\11\107"+
    "\1\110\3\102\2\111\2\102\2\112\1\113\1\114\1\115"+
    "\1\116\2\102\1\117\2\102\1\120\2\102\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\1\127\4\102\1\130\2\103"+
    "\1\130\1\104\1\103\1\130\1\106\3\130\1\105\10\130"+
    "\11\107\1\110\3\130\2\111\2\130\2\112\1\113\1\114"+
    "\1\115\1\116\2\130\1\131\2\130\1\132\2\130\1\133"+
    "\1\134\1\135\1\136\1\137\1\140\1\141\4\130\7\142"+
    "\1\143\37\142\1\144\1\145\1\146\1\147\2\142\1\150"+
    "\2\142\1\151\2\142\1\152\1\153\1\154\1\155\1\156"+
    "\1\157\1\160\17\142\1\143\33\142\1\144\1\145\1\146"+
    "\1\147\2\142\1\150\2\142\1\151\2\142\1\152\1\153"+
    "\1\154\1\155\1\156\1\157\1\160\4\142\1\112\2\161"+
    "\1\112\1\162\1\161\7\112\1\163\2\112\1\161\1\112"+
    "\1\164\1\112\11\165\1\166\3\112\1\167\1\112\1\167"+
    "\1\112\2\167\1\170\1\171\1\172\1\173\2\167\1\174"+
    "\2\167\1\175\2\167\1\176\1\177\1\200\1\201\1\202"+
    "\1\203\1\204\3\167\1\112\1\205\2\206\1\205\1\207"+
    "\1\206\13\205\1\164\2\205\11\165\1\210\11\205\1\211"+
    "\1\212\1\213\1\214\2\205\1\215\2\205\1\216\2\205"+
    "\1\217\1\220\1\221\1\222\1\223\1\224\1\225\4\205"+
    "\2\60\1\226\1\60\1\227\2\60\1\230\3\60\1\231"+
    "\30\60\1\230\2\60\1\65\1\66\1\67\1\70\2\60"+
    "\1\71\2\60\1\72\2\60\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\4\60\1\164\2\232\1\164\1\233"+
    "\1\232\6\164\2\232\17\164\1\232\11\164\1\234\1\235"+
    "\1\236\1\237\2\164\1\240\2\164\1\241\2\164\1\242"+
    "\1\243\1\244\1\245\1\246\1\247\1\250\4\164\2\251"+
    "\1\252\2\251\1\252\41\251\1\253\1\254\1\255\1\256"+
    "\2\251\1\257\2\251\1\260\2\251\1\261\1\262\1\263"+
    "\1\264\1\265\1\266\1\267\4\251\100\0\1\15\132\0"+
    "\1\22\36\0\1\21\7\0\1\21\13\0\11\21\4\0"+
    "\3\21\1\0\30\21\13\0\1\22\101\0\1\22\20\0"+
    "\1\22\55\0\1\270\1\0\1\271\2\0\1\272\12\0"+
    "\1\22\57\0\1\273\1\274\1\0\1\275\10\276\2\0"+
    "\1\22\57\0\1\277\1\300\1\0\11\301\57\0\1\302"+
    "\4\0\1\303\13\0\1\22\60\0\1\304\1\0\11\305"+
    "\63\0\1\304\1\0\11\33\77\0\2\22\75\0\2\22"+
    "\35\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\3\21\1\306\14\21\1\307\7\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\1\310"+
    "\14\21\1\311\1\21\1\312\6\21\1\313\1\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\1\314\14\21\1\315\12\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\1\316\3\21\1\317"+
    "\10\21\1\307\12\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\12\21\1\320\1\21\1\321"+
    "\4\21\1\322\6\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\1\323\7\21\1\324\4\21"+
    "\1\325\1\21\1\326\2\21\1\327\5\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\4\21"+
    "\1\330\10\21\1\331\12\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\5\21\1\307\5\21"+
    "\1\332\1\333\13\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\1\334\7\21\1\335\4\21"+
    "\1\336\12\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\1\337\16\21\1\340\2\21\1\341"+
    "\5\21\1\0\1\21\7\0\1\21\13\0\11\21\4\0"+
    "\3\21\1\0\4\21\1\342\23\21\1\0\1\21\7\0"+
    "\1\21\13\0\11\21\4\0\3\21\1\0\4\21\1\343"+
    "\10\21\1\344\3\21\1\345\5\21\1\346\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\7\21"+
    "\1\347\7\21\1\350\10\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\5\21\1\351\2\21"+
    "\1\352\17\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\1\325\7\21\1\353\17\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\4\21\1\354\2\21\1\355\20\21\1\0\1\21\7\0"+
    "\1\21\13\0\11\21\4\0\3\21\1\0\4\21\1\356"+
    "\23\21\76\0\1\22\2\60\1\0\1\60\1\0\2\60"+
    "\1\0\3\60\1\0\30\60\1\0\31\60\2\0\1\61"+
    "\73\0\2\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\15\60\1\357\15\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\4\60"+
    "\1\360\10\60\1\361\15\60\1\0\1\60\1\0\2\60"+
    "\1\0\3\60\1\0\30\60\1\0\12\60\1\362\1\60"+
    "\1\363\16\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\1\364\14\60\1\365\1\60\1\366"+
    "\2\60\1\367\10\60\1\0\1\60\1\0\2\60\1\0"+
    "\3\60\1\0\30\60\1\0\5\60\1\361\5\60\1\370"+
    "\1\371\16\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\1\372\14\60\1\373\15\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\30\60\1\0"+
    "\1\374\16\60\1\375\2\60\1\376\10\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\4\60"+
    "\1\377\26\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\15\60\1\u0100\3\60\1\u0101\11\60"+
    "\1\0\1\60\1\0\2\60\1\0\3\60\1\0\30\60"+
    "\1\0\7\60\1\u0102\7\60\1\u0103\13\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\5\60"+
    "\1\u0104\2\60\1\u0105\22\60\1\0\1\60\1\0\2\60"+
    "\1\0\3\60\1\0\30\60\1\0\1\365\7\60\1\u0106"+
    "\22\60\1\0\1\60\1\0\2\60\1\0\3\60\1\0"+
    "\30\60\1\0\7\60\1\u0107\21\60\2\0\1\103\117\0"+
    "\11\107\102\0\2\111\115\0\1\u0108\64\0\1\u0109\10\0"+
    "\1\u010a\72\0\1\u010b\1\0\1\u010c\61\0\1\u010d\14\0"+
    "\1\u010e\1\0\1\u010f\2\0\1\u0110\60\0\1\u010a\5\0"+
    "\1\u0111\1\u0112\61\0\1\u0113\14\0\1\u0114\60\0\1\u0115"+
    "\16\0\1\u0116\2\0\1\u0117\57\0\1\u0118\106\0\1\u0119"+
    "\3\0\1\u011a\63\0\1\u011b\7\0\1\u011c\63\0\1\u011d"+
    "\2\0\1\u011e\65\0\1\u010e\7\0\1\u011f\74\0\1\u0120"+
    "\23\0\1\161\117\0\11\165\43\0\1\206\75\0\1\226"+
    "\75\0\1\232\112\0\1\270\1\0\1\271\2\0\1\272"+
    "\72\0\1\271\2\0\1\272\75\0\11\301\62\0\1\273"+
    "\1\274\1\0\1\275\10\276\63\0\1\304\1\0\11\276"+
    "\62\0\1\277\2\0\11\301\62\0\1\u0121\1\300\1\0"+
    "\11\301\41\0\16\u0122\1\u0123\57\u0122\2\303\1\15\1\303"+
    "\1\16\71\303\22\0\1\300\53\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\3\21\1\u0124\24\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\12\21\1\u0125\15\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\15\21\1\u0126\12\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\4\21\1\u0127\23\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\21\21\1\u0128\6\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\12\21\1\u0129\15\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\14\21\1\u012a\13\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\26\21\1\u012b\1\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\12\21\1\u012c\15\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\20\21\1\u012d\7\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\22\21\1\u012e\5\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\7\21\1\u012f\20\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\12\21\1\320\15\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\14\21\1\u0130\13\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\17\21\1\307\10\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\15\21\1\u012e\12\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\14\21\1\u0131\13\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\25\21\1\u0132\2\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\22\21\1\u0133\5\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\16\21\1\u0134\11\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\21\21\1\u0135\6\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\16\21\1\u0136\11\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\14\21\1\u0137\13\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\3\21\1\u0138\24\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\26\21\1\u0139\1\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\1\u013a\7\21\1\u013b\17\21\1\0\1\21\7\0"+
    "\1\21\13\0\11\21\4\0\3\21\1\0\1\21\1\u013c"+
    "\26\21\1\0\1\21\7\0\1\21\13\0\11\21\4\0"+
    "\3\21\1\0\21\21\1\u013d\6\21\1\0\1\21\7\0"+
    "\1\21\13\0\11\21\4\0\3\21\1\0\2\21\1\u013e"+
    "\11\21\1\u013f\13\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\12\21\1\u0140\15\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\17\21\1\u0141\10\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\1\u0142\27\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\10\21"+
    "\1\u0143\17\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\1\u0144\21\21\1\u012d\5\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\10\21\1\u0145\17\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\14\21\1\u0146\13\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\4\21\1\u0147\23\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\4\21\1\u0148\3\21\1\u0149"+
    "\17\21\1\0\1\21\7\0\1\21\13\0\11\21\4\0"+
    "\3\21\1\0\10\21\1\u014a\17\21\1\0\1\21\7\0"+
    "\1\21\13\0\11\21\4\0\3\21\1\0\1\u0133\27\21"+
    "\1\0\2\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\14\60\1\u014b\16\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\12\60"+
    "\1\u014c\20\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\20\60\1\u014d\12\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\22\60"+
    "\1\u014e\10\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\12\60\1\362\20\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\17\60"+
    "\1\361\13\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\15\60\1\u014e\15\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\14\60"+
    "\1\u014f\16\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\16\60\1\u0150\14\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\21\60"+
    "\1\u0151\11\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\16\60\1\u0152\14\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\3\60"+
    "\1\u0153\27\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\26\60\1\u0154\4\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\1\u0155"+
    "\7\60\1\u0156\22\60\1\0\1\60\1\0\2\60\1\0"+
    "\3\60\1\0\30\60\1\0\1\60\1\u0157\31\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\30\60\1\0"+
    "\21\60\1\u0158\11\60\1\0\1\60\1\0\2\60\1\0"+
    "\3\60\1\0\30\60\1\0\12\60\1\u0159\20\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\30\60\1\0"+
    "\17\60\1\u015a\13\60\1\0\1\60\1\0\2\60\1\0"+
    "\3\60\1\0\30\60\1\0\10\60\1\u015b\22\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\30\60\1\0"+
    "\22\60\1\u014d\10\60\1\0\1\60\1\0\2\60\1\0"+
    "\3\60\1\0\30\60\1\0\10\60\1\u015c\22\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\30\60\1\0"+
    "\14\60\1\u015d\16\60\1\0\1\60\1\0\2\60\1\0"+
    "\3\60\1\0\30\60\1\0\4\60\1\u015e\26\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\30\60\1\0"+
    "\10\60\1\u015f\20\60\61\0\1\u0160\73\0\1\u0161\103\0"+
    "\1\u0162\77\0\1\u0163\65\0\1\u010b\102\0\1\u010a\73\0"+
    "\1\u0163\74\0\1\u0164\77\0\1\u0165\100\0\1\u0166\72\0"+
    "\1\u0167\62\0\1\u0168\120\0\1\u0169\47\0\1\u016a\7\0"+
    "\1\u016b\66\0\1\u016c\115\0\1\u016d\66\0\1\u016e\102\0"+
    "\1\u016f\66\0\1\u0170\107\0\1\u0162\63\0\1\u0171\101\0"+
    "\1\u0172\65\0\1\u0173\101\0\1\u0174\41\0\1\u0121\2\0"+
    "\11\301\41\0\16\u0122\1\u0175\75\u0122\1\u0175\4\u0122\1\u0176"+
    "\52\u0122\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\17\21\1\u0177\10\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\1\u0178\27\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\12\21\1\307\15\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\1\u0179\27\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\4\21"+
    "\1\u017a\23\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\12\21\1\u017b\15\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\20\21"+
    "\1\u017c\1\u017d\6\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\20\21\1\u0149\7\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\4\21\1\u017e\23\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\4\21\1\307\23\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\13\21\1\307\14\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\4\21\1\u017f\23\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\14\21\1\u0180\13\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\2\21\1\u0181\25\21\1\0"+
    "\1\21\6\0\1\u0182\1\21\2\0\1\u0183\10\0\11\21"+
    "\4\0\3\21\1\0\30\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\17\21\1\u012b\10\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\15\21\1\u0184\12\21\1\0\1\21\7\0\1\21"+
    "\13\0\1\21\1\u0185\1\u0186\1\u0187\2\21\1\u0188\1\21"+
    "\1\307\4\0\3\21\1\0\4\21\1\u0189\23\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\16\21\1\u018a\11\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\22\21\1\u018b\5\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\10\21\1\u018c\17\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\1\u018d\27\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\6\21"+
    "\1\u018e\21\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\23\21\1\u018f\4\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\12\21"+
    "\1\u0190\15\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\22\21\1\u0191\5\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\15\21"+
    "\1\u0192\12\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\3\21\1\u0193\24\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\10\21"+
    "\1\u0194\17\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\10\21\1\u0195\11\21\1\u0196\5\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\1\21\1\u0197\26\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\20\21\1\307\7\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\14\21\1\u0198\13\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\25\21\1\u0199\2\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\21\21\1\u019a\6\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\24\21\1\307\3\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\11\21\1\u012b\16\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\12\21\1\u012d\15\21"+
    "\1\0\2\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\20\60\1\u019b\1\u019c\11\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\30\60\1\0"+
    "\4\60\1\u019d\26\60\1\0\1\60\1\0\2\60\1\0"+
    "\3\60\1\0\30\60\1\0\4\60\1\361\26\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\30\60\1\0"+
    "\13\60\1\361\17\60\1\0\1\60\1\0\2\60\1\0"+
    "\3\60\1\0\30\60\1\0\2\60\1\u019e\30\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\30\60\1\0"+
    "\15\60\1\u019f\15\60\1\0\1\60\1\0\2\60\1\0"+
    "\3\60\1\0\11\60\1\u01a0\1\u01a1\1\u01a2\2\60\1\u01a3"+
    "\1\60\1\361\7\60\1\0\4\60\1\u01a4\26\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\30\60\1\0"+
    "\16\60\1\u01a5\14\60\1\0\1\60\1\0\2\60\1\0"+
    "\3\60\1\0\30\60\1\0\10\60\1\u01a6\22\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\30\60\1\0"+
    "\1\u01a7\32\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\6\60\1\u01a8\24\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\23\60"+
    "\1\u01a9\7\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\12\60\1\u01aa\20\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\22\60"+
    "\1\u01ab\10\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\10\60\1\u01ac\22\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\10\60"+
    "\1\u01ad\11\60\1\u01ae\10\60\1\0\1\60\1\0\2\60"+
    "\1\0\3\60\1\0\30\60\1\0\20\60\1\361\12\60"+
    "\1\0\1\60\1\0\2\60\1\0\3\60\1\0\30\60"+
    "\1\0\25\60\1\u01af\5\60\1\0\1\60\1\0\2\60"+
    "\1\0\3\60\1\0\30\60\1\0\21\60\1\u01b0\11\60"+
    "\1\0\1\60\1\0\2\60\1\0\3\60\1\0\30\60"+
    "\1\0\24\60\1\361\6\60\1\0\1\60\1\0\2\60"+
    "\1\0\3\60\1\0\30\60\1\0\12\60\1\u014d\16\60"+
    "\65\0\1\u01b1\1\u01b2\60\0\1\u01b3\75\0\1\u010a\104\0"+
    "\1\u010a\64\0\1\u01b4\110\0\1\u01b5\40\0\1\u01b6\1\u01b7"+
    "\1\u01b8\2\0\1\u01b9\1\0\1\u010a\14\0\1\u01ba\107\0"+
    "\1\u01bb\67\0\1\u01bc\65\0\1\u01bd\103\0\1\u01be\112\0"+
    "\1\u01bf\64\0\1\u01c0\105\0\1\u01c1\63\0\1\u01c2\75\0"+
    "\1\u01c3\11\0\1\u01c4\73\0\1\u010a\102\0\1\u01c5\71\0"+
    "\1\u01c6\100\0\1\u010a\63\0\1\u0162\16\0\16\u0122\1\u0175"+
    "\4\u0122\1\15\52\u0122\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\4\21\1\u01c7\23\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\14\21"+
    "\1\u01c8\13\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\11\21\1\307\16\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\20\21"+
    "\1\u01c9\7\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\2\21\1\u01ca\25\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\21\21"+
    "\1\u01cb\6\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\10\21\1\u01cc\6\21\1\u01cd\10\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\6\21\1\u01ce\12\21\1\u012d\6\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\17\21"+
    "\1\u0149\10\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\4\21\1\u01cf\23\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\21\21"+
    "\1\u01d0\6\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\17\21\1\u01d1\10\21\1\0\1\21"+
    "\7\0\1\21\13\0\2\21\1\u01d2\3\21\1\307\2\21"+
    "\4\0\3\21\1\0\30\21\1\0\1\21\7\0\1\21"+
    "\13\0\5\21\1\u01d3\3\21\4\0\3\21\1\0\30\21"+
    "\1\0\1\21\7\0\1\21\13\0\2\21\1\307\6\21"+
    "\4\0\3\21\1\0\30\21\1\0\1\21\7\0\1\21"+
    "\13\0\4\21\1\307\4\21\4\0\3\21\1\0\30\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\17\21\1\u01d4\10\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\10\21\1\u0195\17\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\21\21\1\u01d5\6\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\5\21\1\u01d6\22\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\1\21\1\u014a\26\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\13\21\1\u01d7\14\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\1\u01d8\27\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\10\21\1\u01d9\17\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\17\21\1\u01da\10\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\14\21\1\u01db\13\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\3\21\1\u01dc\24\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\14\21\1\u01dd\13\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\2\21\1\u01d1\25\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\15\21\1\u0149\12\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\20\21\1\u01de\7\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\4\21\1\u01df\23\21\1\0"+
    "\1\21\7\0\1\21\13\0\1\21\1\u0185\1\u0186\1\u0187"+
    "\2\21\1\u0188\1\21\1\307\4\0\3\21\1\0\30\21"+
    "\1\0\2\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\21\60\1\u01e0\11\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\10\60"+
    "\1\u01e1\6\60\1\u01e2\13\60\1\0\1\60\1\0\2\60"+
    "\1\0\3\60\1\0\30\60\1\0\21\60\1\u014d\11\60"+
    "\1\0\1\60\1\0\2\60\1\0\3\60\1\0\30\60"+
    "\1\0\21\60\1\u01e3\11\60\1\0\1\60\1\0\2\60"+
    "\1\0\3\60\1\0\30\60\1\0\17\60\1\u01e4\13\60"+
    "\1\0\1\60\1\0\2\60\1\0\3\60\1\0\12\60"+
    "\1\u01e5\3\60\1\361\11\60\1\0\33\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\15\60\1\u01e6\12\60"+
    "\1\0\33\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\12\60\1\361\15\60\1\0\33\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\14\60\1\361\13\60"+
    "\1\0\33\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\17\60\1\u01e7\13\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\10\60"+
    "\1\u01ad\22\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\5\60\1\u01e8\25\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\1\60"+
    "\1\u015f\31\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\13\60\1\u01e9\17\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\1\u019d"+
    "\32\60\1\0\1\60\1\0\2\60\1\0\3\60\1\0"+
    "\30\60\1\0\10\60\1\u01ea\22\60\1\0\1\60\1\0"+
    "\2\60\1\0\3\60\1\0\30\60\1\0\17\60\1\u01eb"+
    "\13\60\1\0\1\60\1\0\2\60\1\0\3\60\1\0"+
    "\30\60\1\0\3\60\1\u01ec\27\60\1\0\1\60\1\0"+
    "\2\60\1\0\3\60\1\0\30\60\1\0\14\60\1\u01ed"+
    "\16\60\1\0\1\60\1\0\2\60\1\0\3\60\1\0"+
    "\30\60\1\0\2\60\1\u01e4\30\60\1\0\1\60\1\0"+
    "\2\60\1\0\3\60\1\0\30\60\1\0\4\60\1\u01ee"+
    "\26\60\1\0\1\60\1\0\2\60\1\0\3\60\1\0"+
    "\11\60\1\u01a0\1\u01a1\1\u01a2\2\60\1\u01a3\1\60\1\361"+
    "\7\60\1\0\31\60\66\0\1\u01ef\64\0\1\u01f0\6\0"+
    "\1\u01f1\77\0\1\u0162\75\0\1\u01f2\73\0\1\u01f3\37\0"+
    "\1\u01f4\3\0\1\u010a\74\0\1\u01f5\72\0\1\u010a\77\0"+
    "\1\u010a\131\0\1\u01f6\66\0\1\u01c3\72\0\1\u01f7\71\0"+
    "\1\u0174\107\0\1\u01f8\62\0\1\u01b3\105\0\1\u01f9\104\0"+
    "\1\u01fa\61\0\1\u01fb\106\0\1\u01fc\63\0\1\u01f3\77\0"+
    "\1\u01fd\51\0\1\u01b6\1\u01b7\1\u01b8\2\0\1\u01b9\1\0"+
    "\1\u010a\41\0\1\21\7\0\1\21\13\0\11\21\4\0"+
    "\3\21\1\0\20\21\1\u0143\7\21\1\0\1\21\7\0"+
    "\1\21\13\0\11\21\4\0\3\21\1\0\2\21\1\u01fe"+
    "\25\21\1\0\1\21\7\0\1\21\13\0\1\21\2\u01ff"+
    "\1\u0200\5\307\4\0\3\21\1\0\30\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\15\21"+
    "\1\u0201\12\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\17\21\1\u0202\10\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\14\21"+
    "\1\u0203\13\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\1\u0196\27\21\1\0\1\21\7\0"+
    "\1\21\13\0\11\21\4\0\3\21\1\0\1\u0204\27\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\26\21\1\u0149\1\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\10\21\1\u0205\17\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\21\21\1\307\6\21\1\0\1\21\7\0\1\21"+
    "\13\0\10\21\1\307\4\0\3\21\1\0\30\21\1\0"+
    "\1\21\7\0\1\21\13\0\6\21\1\307\2\21\4\0"+
    "\3\21\1\0\30\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\14\21\1\u0206\13\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\4\21\1\u012b\23\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\10\21\1\u0207\17\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\1\307\27\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\21\21\1\u012d\6\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\2\21"+
    "\1\307\25\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\14\21\1\u0208\13\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\3\21"+
    "\1\u012b\24\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\10\21\1\u0209\17\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\6\21"+
    "\1\307\21\21\1\0\1\21\7\0\1\21\13\0\11\21"+
    "\4\0\3\21\1\0\5\21\1\u020a\22\21\1\0\1\21"+
    "\7\0\1\21\13\0\11\21\4\0\3\21\1\0\3\21"+
    "\1\307\24\21\1\0\2\60\1\0\1\60\1\0\2\60"+
    "\1\0\3\60\1\0\30\60\1\0\17\60\1\u020b\13\60"+
    "\1\0\1\60\1\0\2\60\1\0\3\60\1\0\30\60"+
    "\1\0\14\60\1\u0103\16\60\1\0\1\60\1\0\2\60"+
    "\1\0\3\60\1\0\30\60\1\0\1\u01ae\32\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\30\60\1\0"+
    "\10\60\1\u020c\22\60\1\0\1\60\1\0\2\60\1\0"+
    "\3\60\1\0\30\60\1\0\21\60\1\361\11\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\20\60\1\361"+
    "\7\60\1\0\33\60\1\0\1\60\1\0\2\60\1\0"+
    "\3\60\1\0\16\60\1\361\11\60\1\0\33\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\30\60\1\0"+
    "\14\60\1\u020d\16\60\1\0\1\60\1\0\2\60\1\0"+
    "\3\60\1\0\30\60\1\0\10\60\1\u020e\22\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\30\60\1\0"+
    "\1\361\32\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\2\60\1\361\30\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\14\60"+
    "\1\u020f\16\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\10\60\1\u0210\22\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\6\60"+
    "\1\361\24\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\3\60\1\361\25\60\64\0\1\u0211"+
    "\72\0\1\u011c\61\0\1\u01c4\105\0\1\u0212\106\0\1\u010a"+
    "\43\0\1\u010a\73\0\1\u010a\124\0\1\u0213\71\0\1\u0214"+
    "\65\0\1\u010a\77\0\1\u010a\107\0\1\u0215\71\0\1\u0216"+
    "\73\0\1\u010a\72\0\1\u010a\25\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\4\21\1\u0193\23\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\307\4\0\3\21"+
    "\1\0\30\21\1\0\1\21\7\0\1\21\13\0\3\307"+
    "\6\21\4\0\3\21\1\0\30\21\1\0\1\21\7\0"+
    "\1\21\13\0\11\21\4\0\3\21\1\0\3\21\1\u01fe"+
    "\24\21\1\0\1\21\7\0\1\21\13\0\11\21\4\0"+
    "\3\21\1\0\22\21\1\u0217\5\21\1\0\1\21\7\0"+
    "\1\21\13\0\11\21\4\0\3\21\1\0\22\21\1\u012d"+
    "\5\21\1\0\1\21\7\0\1\21\13\0\11\21\4\0"+
    "\3\21\1\0\21\21\1\u0218\6\21\1\0\1\21\7\0"+
    "\1\21\13\0\11\21\4\0\3\21\1\0\15\21\1\u0219"+
    "\12\21\1\0\1\21\7\0\1\21\13\0\11\21\4\0"+
    "\3\21\1\0\1\u0126\27\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\4\21\1\325\23\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\21\21\1\u021a\6\21\1\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\4\21\1\u021b\23\21"+
    "\1\0\2\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\22\60\1\u021c\10\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\15\60"+
    "\1\u021d\15\60\1\0\1\60\1\0\2\60\1\0\3\60"+
    "\1\0\30\60\1\0\1\u021e\32\60\1\0\1\60\1\0"+
    "\2\60\1\0\3\60\1\0\30\60\1\0\4\60\1\365"+
    "\26\60\1\0\1\60\1\0\2\60\1\0\3\60\1\0"+
    "\30\60\1\0\21\60\1\u021f\7\60\67\0\1\u0220\70\0"+
    "\1\u0221\60\0\1\u0222\101\0\1\u010e\112\0\1\u0223\7\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\2\21\1\u0224\25\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\4\21\1\u0225\23\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\14\21\1\307\13\21\1\0\1\21\7\0\1\21\13\0"+
    "\11\21\4\0\3\21\1\0\26\21\1\307\1\21\1\0"+
    "\1\21\7\0\1\21\13\0\11\21\4\0\3\21\1\0"+
    "\17\21\1\u0193\10\21\1\0\2\60\1\0\1\60\1\0"+
    "\2\60\1\0\3\60\1\0\30\60\1\0\2\60\1\u0226"+
    "\30\60\1\0\1\60\1\0\2\60\1\0\3\60\1\0"+
    "\30\60\1\0\14\60\1\361\16\60\1\0\1\60\1\0"+
    "\2\60\1\0\3\60\1\0\30\60\1\0\12\60\1\361"+
    "\20\60\1\0\1\60\1\0\2\60\1\0\3\60\1\0"+
    "\30\60\1\0\26\60\1\361\2\60\47\0\1\u0227\107\0"+
    "\1\u010a\73\0\1\u010a\111\0\1\u010a\2\0\1\21\7\0"+
    "\1\21\13\0\11\21\4\0\3\21\1\0\21\21\1\u0228"+
    "\6\21\1\0\1\21\7\0\1\21\13\0\11\21\4\0"+
    "\3\21\1\0\2\21\1\u0229\25\21\1\0\2\60\1\0"+
    "\1\60\1\0\2\60\1\0\3\60\1\0\30\60\1\0"+
    "\21\60\1\u022a\7\60\66\0\1\u022b\7\0\1\21\7\0"+
    "\1\21\13\0\11\21\4\0\3\21\1\0\15\21\1\325"+
    "\12\21\1\0\1\21\7\0\1\21\13\0\11\21\4\0"+
    "\3\21\1\0\1\u022c\27\21\1\0\2\60\1\0\1\60"+
    "\1\0\2\60\1\0\3\60\1\0\30\60\1\0\15\60"+
    "\1\365\13\60\62\0\1\u010e\13\0\1\21\7\0\1\21"+
    "\13\0\11\21\4\0\3\21\1\0\12\21\1\u022d\15\21"+
    "\1\0\1\21\7\0\1\21\13\0\11\21\4\0\3\21"+
    "\1\0\12\21\1\u0193\15\21\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27156];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\2\11\2\1\1\11\1\1\1\11\1\1\1\11"+
    "\34\1\1\11\1\1\2\11\15\1\2\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\15\1\1\11\11\1\2\11"+
    "\15\1\1\11\1\1\2\11\1\1\2\11\15\1\2\11"+
    "\1\1\1\11\15\1\1\11\1\1\3\11\16\1\2\11"+
    "\15\1\10\0\2\1\1\0\1\1\1\0\103\1\2\0"+
    "\1\11\26\0\1\1\2\0\74\1\6\0\1\1\17\0"+
    "\14\1\2\11\55\1\25\0\51\1\17\0\23\1\4\0"+
    "\1\1\1\0\11\1\4\0\3\1\1\0\3\1\1\0"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[557];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    StringBuffer stringN = new StringBuffer();
    public static int banderaN = 0;
    public static int bandera = 0;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   for(Token t: tokens){
    t.print();
  }

  System.out.println("\nErrores\n");
  for(Token t: errores){
    t.print();
  }
  return 0;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { if(banderaN == 1 ){
    stringN.append(yytext()); yybegin(hope);
    
   }
   else{
     stringN.setLength(0);
     stringN.append(yytext());yybegin(hope);
   }
            }
            // fall through
          case 42: break;
          case 2:
            { /* ignore */ ;banderaN =0;
            }
            // fall through
          case 43: break;
          case 3:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
  banderaN =0;
            }
            // fall through
          case 44: break;
          case 4:
            { string.setLength(0); yybegin(STRING); bandera = yycolumn;
  banderaN =0;
            }
            // fall through
          case 45: break;
          case 5:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Identificador"));
  stringN.setLength(0);
  stringN.append(yytext());
  System.out.println(stringN.toString());
  banderaN = 1;
            }
            // fall through
          case 46: break;
          case 6:
            { string.setLength(0); yybegin(Chars); bandera = yycolumn;
  banderaN =0;
            }
            // fall through
          case 47: break;
          case 7:
            { string.setLength(0);
  string.append(yytext());
  yybegin(numberState);
  banderaN =0;
            }
            // fall through
          case 48: break;
          case 8:
            { string.append( yytext() );
            }
            // fall through
          case 49: break;
          case 9:
            { System.out.println("HOLA");
    //string.append( yytext() );
    errores.add(new Token(string.toString(), yyline, bandera, "Error stringASAD"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 50: break;
          case 10:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 51: break;
          case 11:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error string"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 52: break;
          case 12:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
    yybegin(hexaStateError);
            }
            // fall through
          case 53: break;
          case 13:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 54: break;
          case 14:
            { yybegin(YYINITIAL);
    string.append( yytext() ); 
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada"));
            }
            // fall through
          case 55: break;
          case 15:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 56: break;
          case 16:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); 
    errores.add(new Token("Comillas", yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 57: break;
          case 17:
            { System.out.println(yyline);
  System.out.println(yycolumn); 
  // throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 58: break;
          case 18:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 59: break;
          case 19:
            { 
            }
            // fall through
          case 60: break;
          case 20:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 61: break;
          case 21:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
            }
            // fall through
          case 62: break;
          case 22:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(")", yyline+1, yycolumn, "Operador"));
            }
            // fall through
          case 63: break;
          case 23:
            { string.append(yytext());
            }
            // fall through
          case 64: break;
          case 24:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(";", yyline+1, yycolumn, "Operador"));
            }
            // fall through
          case 65: break;
          case 25:
            { string.append(yytext()); yybegin(Identificadorcillo);
            }
            // fall through
          case 66: break;
          case 26:
            { yybegin(NaturalNumbers);
    string.append(yytext());
            }
            // fall through
          case 67: break;
          case 27:
            { bandera = 1; 
    string.append(yytext());
            }
            // fall through
          case 68: break;
          case 28:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
    }
            }
            // fall through
          case 69: break;
          case 29:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
            }
            // fall through
          case 70: break;
          case 30:
            { System.out.println("HOLA2");
    string.append( yytext() );
    errores.add(new Token(string.toString(), yyline, bandera, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 71: break;
          case 31:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 72: break;
          case 32:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
            }
            // fall through
          case 73: break;
          case 33:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error: identificador")); yybegin(YYINITIAL);
            }
            // fall through
          case 74: break;
          case 34:
            { stringN.append(yytext());
            }
            // fall through
          case 75: break;
          case 35:
            { errores.add(new Token(stringN.toString(), yyline, yycolumn, "Error: identificador"));
        banderaN =0;
        yybegin(YYINITIAL);
            }
            // fall through
          case 76: break;
          case 36:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error Decimal"));banderaN =0;
            }
            // fall through
          case 77: break;
          case 37:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 78: break;
          case 38:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 79: break;
          case 39:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 80: break;
          case 40:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 81: break;
          case 41:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaStateC);
            }
            // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
