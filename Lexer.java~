// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

/* JFlex example: partial Java language lexer specification */
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int hexaState = 4;
  public static final int hexaStateC = 6;
  public static final int hexaStateError = 8;
  public static final int hexaStateCError = 10;
  public static final int numberState = 12;
  public static final int NaturalNumbers = 14;
  public static final int Chars = 16;
  public static final int Identificadorcillo = 18;
  public static final int hope = 20;
  public static final int filtro = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\3\u1f00\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\3\u1f00\1\u3e00\1\u3f00\4\u1f00"+
    "\1\u4000\11\u1f00\3\u0100\1\u4100\1\u4200\13\u1f00\4\u0100\1\u4300"+
    "\63\u1f00\2\u0100\1\u4400\4\u1f00\1\u4500\100\u1f00\1\u4600\40\u1f00"+
    "\1\u4700\1\u4800\1\u1f00\1\u4900\1\u4a00\1\u4b00\1\u4c00\26\u1f00"+
    "\1\u4d00\21\u1f00\246\u0100\1\u4e00\20\u0100\1\u4f00\1\u5000\77\u1f00"+
    "\2\u0100\1\u5000\u0b05\u1f00\1\u5100\1\u5200\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\5\1\6\1\7\1\3\1\10\1\11\1\12\1\13"+
    "\2\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\11\1\3"+
    "\6\42\11\43\1\44\2\43\1\45\7\43\1\14\1\46"+
    "\1\14\1\11\1\10\1\3\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\43\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\43\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\14\1\77"+
    "\1\14\1\11\41\0\1\100\1\3\4\10\4\3\1\10"+
    "\2\3\1\0\7\3\1\10\4\3\1\10\5\3\2\10"+
    "\1\101\24\10\1\3\37\10\1\3\u01ca\10\4\3\14\10"+
    "\16\3\5\10\7\3\1\10\1\3\1\10\21\3\160\0"+
    "\5\10\1\3\2\10\2\3\4\10\10\3\1\10\1\3"+
    "\3\10\1\3\1\10\1\3\24\10\1\3\123\10\1\3"+
    "\213\10\1\3\5\0\2\3\236\10\11\3\46\10\2\3"+
    "\1\10\7\3\47\10\7\3\1\10\1\3\55\0\1\3"+
    "\1\0\1\3\2\0\1\3\2\0\1\3\1\0\10\3"+
    "\33\10\5\3\3\10\15\3\5\0\6\3\1\10\4\3"+
    "\13\0\5\3\53\10\37\0\4\3\2\10\1\0\143\10"+
    "\1\3\1\10\10\0\1\3\6\0\2\10\2\0\1\3"+
    "\4\0\2\10\12\0\3\10\2\3\1\10\17\3\1\0"+
    "\1\10\1\0\36\10\33\0\2\3\131\10\13\0\1\10"+
    "\16\3\12\0\41\10\11\0\2\10\4\3\1\10\5\3"+
    "\26\10\4\0\1\10\11\0\1\10\3\0\1\10\5\0"+
    "\22\3\31\10\3\0\104\3\1\10\1\3\13\10\67\3"+
    "\33\0\1\3\4\0\66\10\3\0\1\10\22\0\1\10"+
    "\7\0\12\10\2\0\2\3\12\0\1\3\7\10\1\3"+
    "\7\10\1\3\3\0\1\3\10\10\2\3\2\10\2\3"+
    "\26\10\1\3\7\10\1\3\1\10\3\3\4\10\2\3"+
    "\1\0\1\10\7\0\2\3\2\0\2\3\3\0\1\10"+
    "\10\3\1\0\4\3\2\10\1\3\3\10\2\0\2\3"+
    "\12\0\4\10\7\3\1\10\5\3\3\0\1\3\6\10"+
    "\4\3\2\10\2\3\26\10\1\3\7\10\1\3\2\10"+
    "\1\3\2\10\1\3\2\10\2\3\1\0\1\3\5\0"+
    "\4\3\2\0\2\3\3\0\3\3\1\0\7\3\4\10"+
    "\1\3\1\10\7\3\14\0\3\10\1\0\13\3\3\0"+
    "\1\3\11\10\1\3\3\10\1\3\26\10\1\3\7\10"+
    "\1\3\2\10\1\3\5\10\2\3\1\0\1\10\10\0"+
    "\1\3\3\0\1\3\3\0\2\3\1\10\17\3\2\10"+
    "\2\0\2\3\12\0\1\3\1\10\17\3\3\0\1\3"+
    "\10\10\2\3\2\10\2\3\26\10\1\3\7\10\1\3"+
    "\2\10\1\3\5\10\2\3\1\0\1\10\7\0\2\3"+
    "\2\0\2\3\3\0\10\3\2\0\4\3\2\10\1\3"+
    "\3\10\2\0\2\3\12\0\1\3\1\10\20\3\1\0"+
    "\1\10\1\3\6\10\3\3\3\10\1\3\4\10\3\3"+
    "\2\10\1\3\1\10\1\3\2\10\3\3\2\10\3\3"+
    "\3\10\3\3\14\10\4\3\5\0\3\3\3\0\1\3"+
    "\4\0\2\3\1\10\6\3\1\0\16\3\12\0\11\3"+
    "\1\10\7\3\3\0\1\3\10\10\1\3\3\10\1\3"+
    "\27\10\1\3\12\10\1\3\5\10\3\3\1\10\7\0"+
    "\1\3\3\0\1\3\4\0\7\3\2\0\1\3\2\10"+
    "\6\3\2\10\2\0\2\3\12\0\22\3\2\0\1\3"+
    "\10\10\1\3\3\10\1\3\27\10\1\3\12\10\1\3"+
    "\5\10\2\3\1\0\1\10\7\0\1\3\3\0\1\3"+
    "\4\0\7\3\2\0\7\3\1\10\1\3\2\10\2\0"+
    "\2\3\12\0\1\3\2\10\17\3\2\0\1\3\10\10"+
    "\1\3\3\10\1\3\51\10\2\3\1\10\7\0\1\3"+
    "\3\0\1\3\4\0\1\10\10\3\1\0\10\3\2\10"+
    "\2\0\2\3\12\0\12\3\6\10\2\3\2\0\1\3"+
    "\22\10\3\3\30\10\1\3\11\10\1\3\1\10\2\3"+
    "\7\10\3\3\1\0\4\3\6\0\1\3\1\0\1\3"+
    "\10\0\22\3\2\0\15\3\60\10\1\0\2\10\7\0"+
    "\4\3\10\10\10\0\1\3\12\0\47\3\2\10\1\3"+
    "\1\10\2\3\2\10\1\3\1\10\2\3\1\10\6\3"+
    "\4\10\1\3\7\10\1\3\3\10\1\3\1\10\1\3"+
    "\1\10\2\3\2\10\1\3\4\10\1\0\2\10\6\0"+
    "\1\3\2\0\1\10\2\3\5\10\1\3\1\10\1\3"+
    "\6\0\2\3\12\0\2\3\4\10\40\3\1\10\27\3"+
    "\2\0\6\3\12\0\13\3\1\0\1\3\1\0\1\3"+
    "\1\0\4\3\2\0\10\10\1\3\44\10\4\3\24\0"+
    "\1\3\2\0\5\10\13\0\1\3\44\0\11\3\1\0"+
    "\71\3\53\10\24\0\1\10\12\0\6\3\6\10\4\0"+
    "\4\10\3\0\1\10\3\0\2\10\7\0\3\10\4\0"+
    "\15\10\14\0\1\10\17\0\2\3\46\10\1\3\1\10"+
    "\5\3\1\10\2\3\53\10\1\3\115\10\1\3\4\10"+
    "\2\3\7\10\1\3\1\10\1\3\4\10\2\3\51\10"+
    "\1\3\4\10\2\3\41\10\1\3\4\10\2\3\7\10"+
    "\1\3\1\10\1\3\4\10\2\3\17\10\1\3\71\10"+
    "\1\3\4\10\2\3\103\10\2\3\3\0\40\3\20\10"+
    "\20\3\125\10\14\3\u016c\10\2\3\21\10\1\3\32\10"+
    "\5\3\113\10\3\3\3\10\17\3\15\10\1\3\4\10"+
    "\3\0\13\3\22\10\3\0\13\3\22\10\2\0\14\3"+
    "\15\10\1\3\3\10\1\3\2\0\14\3\64\10\40\0"+
    "\3\3\1\10\3\3\2\10\1\0\2\3\12\0\41\3"+
    "\3\0\2\3\12\0\6\3\130\10\10\3\51\10\1\0"+
    "\1\10\5\3\106\10\12\3\35\10\3\3\14\0\4\3"+
    "\14\0\12\3\12\0\36\10\2\3\5\10\13\3\54\10"+
    "\4\3\21\0\7\10\2\0\6\3\12\0\46\3\27\10"+
    "\5\0\4\3\65\10\12\0\1\3\35\0\2\3\13\0"+
    "\6\3\12\0\15\3\1\10\130\3\5\0\57\10\21\0"+
    "\7\10\4\3\12\0\21\3\11\0\14\3\3\0\36\10"+
    "\15\0\2\10\12\0\54\10\16\0\14\3\44\10\24\0"+
    "\10\3\12\0\3\3\3\10\12\0\44\10\122\3\3\0"+
    "\1\3\25\0\4\10\1\0\4\10\3\0\2\10\11\3"+
    "\300\10\47\0\25\3\4\0\26\10\2\3\6\10\2\3"+
    "\46\10\2\3\6\10\2\3\10\10\1\3\1\10\1\3"+
    "\1\10\1\3\1\10\1\3\37\10\2\3\65\10\1\3"+
    "\7\10\1\3\1\10\3\3\3\10\1\3\7\10\3\3"+
    "\4\10\2\3\6\10\4\3\15\10\5\3\3\10\1\3"+
    "\7\10\16\3\5\0\32\3\5\0\20\3\2\10\23\3"+
    "\1\10\13\3\5\0\5\3\6\0\1\3\1\10\15\3"+
    "\1\10\20\3\15\10\3\3\33\10\25\3\15\0\4\3"+
    "\1\0\3\3\14\0\21\3\1\10\4\3\1\10\2\3"+
    "\12\10\1\3\1\10\3\3\5\10\6\3\1\10\1\3"+
    "\1\10\1\3\1\10\1\3\4\10\1\3\13\10\2\3"+
    "\4\10\5\3\5\10\4\3\1\10\21\3\51\10\u0177\3"+
    "\57\10\1\3\57\10\1\3\205\10\6\3\4\10\3\0"+
    "\2\10\14\3\46\10\1\3\1\10\5\3\1\10\2\3"+
    "\70\10\7\3\1\10\17\3\1\0\27\10\11\3\7\10"+
    "\1\3\7\10\1\3\7\10\1\3\7\10\1\3\7\10"+
    "\1\3\7\10\1\3\7\10\1\3\7\10\1\3\40\0"+
    "\57\3\1\10\325\3\3\10\31\3\11\10\6\0\1\3"+
    "\5\10\2\3\5\10\4\3\126\10\2\3\2\0\2\3"+
    "\3\10\1\3\132\10\1\3\4\10\5\3\51\10\3\3"+
    "\136\10\21\3\33\10\65\3\306\10\112\3\315\10\63\3"+
    "\215\10\103\3\56\10\2\3\15\10\3\3\20\10\12\0"+
    "\2\10\24\3\57\10\1\0\4\3\12\0\1\3\31\10"+
    "\7\3\1\0\120\10\2\0\45\3\11\10\2\3\147\10"+
    "\2\3\4\10\1\3\4\10\14\3\13\10\115\3\12\10"+
    "\1\0\3\10\1\0\4\10\1\0\27\10\5\0\20\3"+
    "\1\10\7\3\64\10\14\3\2\0\62\10\21\0\13\3"+
    "\12\0\6\3\22\0\6\10\3\3\1\10\4\3\12\0"+
    "\34\10\10\0\2\3\27\10\15\0\14\3\35\10\3\3"+
    "\4\0\57\10\16\0\16\3\1\10\12\0\46\3\51\10"+
    "\16\0\11\3\3\10\1\0\10\10\2\0\2\3\12\0"+
    "\6\3\27\10\3\3\1\10\1\0\4\3\60\10\1\0"+
    "\1\10\3\0\2\10\2\0\5\10\2\0\1\10\1\0"+
    "\1\10\30\3\3\10\2\3\13\10\5\0\2\3\3\10"+
    "\2\0\12\3\6\10\2\3\6\10\2\3\6\10\11\3"+
    "\7\10\1\3\7\10\221\3\43\10\10\0\1\3\2\0"+
    "\2\3\12\0\6\3\244\10\14\3\27\10\4\3\61\10"+
    "\4\3\156\10\2\3\152\10\46\3\7\10\14\3\5\10"+
    "\5\3\1\10\1\0\12\10\1\3\15\10\1\3\5\10"+
    "\1\3\1\10\1\3\2\10\1\3\2\10\1\3\154\10"+
    "\41\3\153\10\22\3\100\10\2\3\66\10\50\3\15\10"+
    "\3\3\20\0\20\3\7\0\14\3\2\10\30\3\3\10"+
    "\31\3\1\10\6\3\5\10\1\3\207\10\2\3\1\0"+
    "\4\3\1\10\13\3\12\0\7\3\32\10\4\3\1\10"+
    "\1\3\32\10\13\3\131\10\3\3\6\10\2\3\6\10"+
    "\2\3\6\10\2\3\3\10\3\3\2\10\3\3\2\10"+
    "\22\3\3\0\4\3\14\10\1\3\32\10\1\3\23\10"+
    "\1\3\2\10\1\3\17\10\2\3\16\10\42\3\173\10"+
    "\105\3\65\10\210\3\1\0\202\3\35\10\3\3\61\10"+
    "\57\3\37\10\21\3\33\10\65\3\36\10\2\3\44\10"+
    "\4\3\10\10\1\3\5\10\52\3\236\10\2\3\12\0"+
    "\126\3\6\10\2\3\1\10\1\3\54\10\1\3\2\10"+
    "\3\3\1\10\2\3\27\10\252\3\26\10\12\3\32\10"+
    "\106\3\70\10\6\3\2\10\100\3\1\10\3\0\1\3"+
    "\2\0\5\3\4\0\4\10\1\3\3\10\1\3\33\10"+
    "\4\3\3\0\4\3\1\0\40\3\35\10\203\3\66\10"+
    "\12\3\26\10\12\3\23\10\215\3\111\10\267\3\3\0"+
    "\65\10\17\0\37\3\12\0\20\3\3\0\55\10\13\0"+
    "\2\3\1\0\22\3\31\10\7\3\12\0\6\3\3\0"+
    "\44\10\16\0\1\3\12\0\100\3\3\0\60\10\16\0"+
    "\4\10\13\3\12\0\246\3\53\10\15\0\10\3\12\0"+
    "\66\3\157\10\221\3\143\10\235\3\57\10\321\3\71\10"+
    "\307\3\105\10\13\3\1\10\56\0\20\3\4\0\15\10"+
    "\140\3\2\10\u0163\3\5\0\3\3\26\0\2\3\7\0"+
    "\36\3\4\0\224\3\3\0\273\3\125\10\1\3\107\10"+
    "\1\3\2\10\2\3\1\10\2\3\2\10\2\3\4\10"+
    "\1\3\14\10\1\3\1\10\1\3\7\10\1\3\101\10"+
    "\1\3\4\10\2\3\10\10\1\3\7\10\1\3\34\10"+
    "\1\3\4\10\1\3\5\10\1\3\1\10\3\3\7\10"+
    "\1\3\u0154\10\2\3\31\10\1\3\31\10\1\3\37\10"+
    "\1\3\31\10\1\3\37\10\1\3\31\10\1\3\37\10"+
    "\1\3\31\10\1\3\37\10\1\3\31\10\1\3\10\10"+
    "\2\3\62\0\4\10\1\3\33\10\1\3\2\10\1\3"+
    "\1\10\2\3\1\10\1\3\12\10\1\3\4\10\1\3"+
    "\1\10\1\3\1\10\6\3\1\10\4\3\1\10\1\3"+
    "\1\10\1\3\1\10\1\3\3\10\1\3\2\10\1\3"+
    "\1\10\2\3\1\10\1\3\1\10\1\3\1\10\1\3"+
    "\1\10\1\3\1\10\1\3\2\10\1\3\1\10\2\3"+
    "\4\10\1\3\7\10\1\3\4\10\1\3\4\10\1\3"+
    "\1\10\1\3\12\10\1\3\21\10\5\3\3\10\1\3"+
    "\5\10\1\3\21\10\104\3\327\10\51\3\65\10\13\3"+
    "\336\10\343\3\1\0\36\3\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21248];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\3\2\1\3\1\4\1\5\2\3\1\6"+
    "\6\3\3\7\3\3\21\5\1\3\1\1\1\5\1\10"+
    "\2\11\1\12\1\13\15\10\1\14\3\15\1\16\1\17"+
    "\1\14\2\10\1\20\1\10\5\21\11\14\13\22\2\23"+
    "\1\24\15\23\12\21\1\25\3\26\1\25\3\27\1\30"+
    "\15\25\2\31\1\32\1\33\3\34\16\27\1\35\3\36"+
    "\17\35\1\37\2\40\6\41\1\42\2\41\15\40\1\41"+
    "\1\37\2\0\1\43\3\0\1\43\5\0\2\44\1\0"+
    "\1\2\1\0\1\44\1\5\1\45\50\5\2\10\1\45"+
    "\26\10\2\0\1\45\27\0\1\43\1\44\2\0\1\43"+
    "\1\0\1\2\1\43\1\44\16\5\1\45\2\5\1\45"+
    "\24\5\1\46\1\5\6\10\1\45\16\10\6\0\1\45"+
    "\17\0\1\43\2\0\1\2\1\44\3\5\1\45\1\47"+
    "\6\5\1\50\1\51\20\5\1\47\6\5\1\45\25\10"+
    "\1\45\25\0\1\45\1\0\1\43\1\2\2\5\1\45"+
    "\27\5\17\10\20\0\1\43\1\5\2\45\10\5\1\45"+
    "\2\5\4\10\1\45\1\10\4\0\1\45\2\0\1\43"+
    "\6\5\4\10\5\0\2\5\1\10\2\0\2\5\1\10"+
    "\2\0\1\5\1\0\1\5\11\0\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[639];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u0318\0\u035a\0\u039c"+
    "\0\u03de\0\u0318\0\u0420\0\u0462\0\u04a4\0\u0318\0\u04e6\0\u0528"+
    "\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0318"+
    "\0\u0738\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906"+
    "\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16"+
    "\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u039c\0\u0c60\0\u0ca2\0\u0318"+
    "\0\u0ce4\0\u0318\0\u0318\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e"+
    "\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e"+
    "\0\u0318\0\u0318\0\u1080\0\u039c\0\u0318\0\u0318\0\u039c\0\u10c2"+
    "\0\u1104\0\u0318\0\u1146\0\u0318\0\u1188\0\u11ca\0\u120c\0\u124e"+
    "\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e"+
    "\0\u14a0\0\u0318\0\u039c\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398"+
    "\0\u13da\0\u141c\0\u145e\0\u14a0\0\u0318\0\u039c\0\u0318\0\u1188"+
    "\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398"+
    "\0\u13da\0\u141c\0\u145e\0\u14a0\0\u039c\0\u1290\0\u12d2\0\u1314"+
    "\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u0318\0\u0318"+
    "\0\u14e2\0\u039c\0\u039c\0\u0318\0\u1524\0\u1566\0\u0318\0\u1188"+
    "\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398"+
    "\0\u13da\0\u141c\0\u145e\0\u14a0\0\u0318\0\u15a8\0\u0318\0\u0318"+
    "\0\u0318\0\u15ea\0\u039c\0\u039c\0\u1188\0\u11ca\0\u120c\0\u124e"+
    "\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e"+
    "\0\u14a0\0\u0318\0\u0318\0\u162c\0\u039c\0\u039c\0\u166e\0\u1188"+
    "\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398"+
    "\0\u13da\0\u141c\0\u145e\0\u14a0\0\u0318\0\u0318\0\u039c\0\u16b0"+
    "\0\u0318\0\u16f2\0\u1734\0\u039c\0\u1776\0\u0318\0\u17b8\0\u17fa"+
    "\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356"+
    "\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u183c\0\u039c\0\u187e"+
    "\0\u0462\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c"+
    "\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1986\0\u1b96\0\u1bd8\0\u1c1a"+
    "\0\u1a8e\0\u1c5c\0\u0420\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6"+
    "\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6"+
    "\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6"+
    "\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394\0\u23d6"+
    "\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6"+
    "\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u2730\0\u0ca2\0\u2772\0\u27b4"+
    "\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4"+
    "\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4"+
    "\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u0318\0\u2da2"+
    "\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2"+
    "\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2"+
    "\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390\0\u33d2"+
    "\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0\0\u35e2"+
    "\0\u3624\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u376e\0\u37b0\0\u37f2"+
    "\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u393c\0\u397e\0\u39c0\0\u3a02"+
    "\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12"+
    "\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22"+
    "\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c\0\u0420\0\u3fae\0\u3ff0"+
    "\0\u4032\0\u4074\0\u40b6\0\u40f8\0\u413a\0\u417c\0\u41be\0\u4200"+
    "\0\u4242\0\u4284\0\u42c6\0\u4308\0\u434a\0\u438c\0\u43ce\0\u4410"+
    "\0\u4452\0\u4494\0\u44d6\0\u4518\0\u455a\0\u459c\0\u45de\0\u4620"+
    "\0\u4662\0\u46a4\0\u46e6\0\u4728\0\u476a\0\u47ac\0\u47ee\0\u4830"+
    "\0\u4872\0\u48b4\0\u48f6\0\u4938\0\u497a\0\u49bc\0\u49fe\0\u4a40"+
    "\0\u4a82\0\u4ac4\0\u4b06\0\u4b48\0\u4b8a\0\u3456\0\u4bcc\0\u4c0e"+
    "\0\u4c50\0\u4c92\0\u4cd4\0\u4d16\0\u4d58\0\u4d9a\0\u4ddc\0\u4e1e"+
    "\0\u4e60\0\u4ea2\0\u0318\0\u0318\0\u4ee4\0\u4f26\0\u4f68\0\u4faa"+
    "\0\u4fec\0\u502e\0\u5070\0\u50b2\0\u50f4\0\u5136\0\u5178\0\u51ba"+
    "\0\u51fc\0\u523e\0\u5280\0\u52c2\0\u0420\0\u5304\0\u5346\0\u5388"+
    "\0\u53ca\0\u540c\0\u544e\0\u5490\0\u54d2\0\u5514\0\u5556\0\u5598"+
    "\0\u55da\0\u561c\0\u565e\0\u56a0\0\u56e2\0\u5724\0\u5766\0\u57a8"+
    "\0\u57ea\0\u582c\0\u586e\0\u58b0\0\u58f2\0\u5934\0\u5976\0\u59b8"+
    "\0\u59fa\0\u5a3c\0\u5a7e\0\u5ac0\0\u5b02\0\u5b44\0\u5b86\0\u5bc8"+
    "\0\u5c0a\0\u5c4c\0\u5c8e\0\u5cd0\0\u5d12\0\u5d54\0\u5d96\0\u5dd8"+
    "\0\u5e1a\0\u5e5c\0\u5e9e\0\u5ee0\0\u5f22\0\u5f64\0\u5fa6\0\u5fe8"+
    "\0\u602a\0\u606c\0\u0462\0\u60ae\0\u60f0\0\u6132\0\u6174\0\u61b6"+
    "\0\u61f8\0\u623a\0\u627c\0\u62be\0\u6300\0\u6342\0\u6384\0\u63c6"+
    "\0\u6408\0\u644a\0\u648c\0\u64ce\0\u6510\0\u6552\0\u6594\0\u65d6"+
    "\0\u6618\0\u665a\0\u669c\0\u66de\0\u6720\0\u6762\0\u67a4\0\u67e6"+
    "\0\u6828\0\u686a\0\u68ac\0\u68ee\0\u6930\0\u6972\0\u69b4\0\u69f6"+
    "\0\u6a38\0\u6a7a\0\u6abc\0\u6afe\0\u6b40\0\u6b82\0\u6bc4\0\u6c06"+
    "\0\u6c48\0\u6c8a\0\u6ccc\0\u6d0e\0\u6d50\0\u6d92\0\u6dd4\0\u6e16"+
    "\0\u6e58\0\u6e9a\0\u6edc\0\u6f1e\0\u6f60\0\u6fa2\0\u6fe4\0\u7026"+
    "\0\u7068\0\u70aa\0\u70ec\0\u712e\0\u7170\0\u71b2\0\u71f4\0\u7236"+
    "\0\u3e22\0\u7278\0\u72ba\0\u72fc\0\u733e\0\u7380\0\u73c2\0\u4410"+
    "\0\u7404\0\u7446\0\u7488\0\u74ca\0\u750c\0\u497a\0\u754e\0\u7590"+
    "\0\u75d2\0\u7614\0\u7656\0\u7698\0\u76da\0\u771c\0\u775e\0\u77a0"+
    "\0\u77e2\0\u7824\0\u7866\0\u78a8\0\u78ea\0\u792c\0\u796e\0\u79b0"+
    "\0\u79f2\0\u7a34\0\u7a76\0\u7ab8\0\u7afa\0\u7b3c\0\u7b7e\0\u7bc0"+
    "\0\u7c02\0\u7c44\0\u7c86\0\u7cc8\0\u7d0a\0\u7d4c\0\u7d8e\0\u7dd0"+
    "\0\u7e12\0\u7e54\0\u7e96\0\u7ed8\0\u7f1a\0\u7f5c\0\u0318";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[639];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\2\16\1\15\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\24\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\2\36\2\37\3\36\2\37\1\31"+
    "\1\40\1\41\1\21\1\42\4\23\1\15\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\23\1\51\1\52\2\23"+
    "\1\53\2\23\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\23\1\63\1\23\1\64\1\65\1\66\2\67"+
    "\1\70\1\67\1\71\2\67\1\72\3\67\1\73\32\67"+
    "\1\73\2\67\1\74\1\75\1\76\1\77\2\67\1\100"+
    "\2\67\1\101\2\67\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\6\67\1\111\2\112\1\111\1\113\1\114"+
    "\1\111\1\115\3\111\1\116\3\111\1\117\1\111\2\117"+
    "\3\120\2\121\3\120\2\121\1\117\1\122\3\111\1\123"+
    "\4\111\2\124\1\125\1\126\1\127\1\130\2\111\1\131"+
    "\2\111\1\132\2\111\1\133\1\134\1\135\1\136\1\137"+
    "\1\140\1\141\4\111\2\117\1\142\2\112\1\142\1\113"+
    "\1\114\1\142\1\116\3\142\1\115\3\142\1\143\1\142"+
    "\2\143\3\120\2\121\3\120\2\121\1\143\1\122\3\142"+
    "\1\123\4\142\2\124\1\125\1\126\1\127\1\130\2\142"+
    "\1\144\2\142\1\145\2\142\1\146\1\147\1\150\1\151"+
    "\1\152\1\153\1\154\4\142\2\143\5\155\1\156\1\155"+
    "\1\157\7\155\1\156\1\155\5\156\2\155\3\156\2\155"+
    "\1\156\13\155\1\160\1\161\1\162\1\163\2\155\1\164"+
    "\2\155\1\165\2\155\1\166\1\167\1\170\1\171\1\172"+
    "\1\173\1\174\4\155\2\156\5\155\1\156\5\155\1\157"+
    "\3\155\1\156\1\155\5\156\2\155\3\156\2\155\1\156"+
    "\13\155\1\160\1\161\1\162\1\163\2\155\1\164\2\155"+
    "\1\165\2\155\1\166\1\167\1\170\1\171\1\172\1\173"+
    "\1\174\4\155\2\156\5\124\1\175\11\124\1\175\1\124"+
    "\5\175\2\124\3\175\2\124\1\175\13\124\1\125\1\126"+
    "\1\127\1\130\2\124\1\176\2\124\1\177\2\124\1\200"+
    "\1\201\1\202\1\203\1\204\1\205\1\206\4\124\2\175"+
    "\1\207\2\210\1\207\1\211\1\212\11\207\1\213\1\214"+
    "\2\213\3\215\2\216\3\215\2\216\1\213\1\217\12\207"+
    "\1\220\1\221\1\222\1\223\2\207\1\224\2\207\1\225"+
    "\2\207\1\226\1\227\1\230\1\231\1\232\1\233\1\234"+
    "\4\207\2\213\2\67\1\235\1\67\1\236\2\67\1\237"+
    "\3\67\1\240\32\67\1\237\2\67\1\74\1\75\1\76"+
    "\1\77\2\67\1\100\2\67\1\101\2\67\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\6\67\1\214\2\241"+
    "\1\214\1\242\1\243\6\214\1\241\2\214\1\244\1\214"+
    "\5\244\2\214\3\244\2\214\1\244\1\241\12\214\1\245"+
    "\1\246\1\247\1\250\2\214\1\251\2\214\1\252\2\214"+
    "\1\253\1\254\1\255\1\256\1\257\1\260\1\261\4\214"+
    "\2\244\1\262\2\263\1\262\1\264\1\265\6\262\1\263"+
    "\2\262\1\266\1\262\1\266\1\267\3\266\2\262\3\266"+
    "\2\262\1\266\1\263\12\262\1\270\1\271\1\272\1\273"+
    "\2\262\1\274\2\262\1\275\2\262\1\276\1\277\1\300"+
    "\1\301\1\302\1\303\1\304\4\262\2\266\1\305\2\306"+
    "\1\305\1\306\1\307\1\310\2\305\1\311\1\312\1\305"+
    "\1\311\1\313\1\310\1\314\1\310\1\314\1\315\3\307"+
    "\2\306\3\307\2\306\1\314\1\316\1\317\1\310\1\320"+
    "\4\306\1\305\2\306\1\321\1\322\1\323\1\324\2\306"+
    "\1\325\2\306\1\326\2\306\1\327\1\330\1\331\1\332"+
    "\1\333\1\334\1\335\3\306\1\336\2\337\104\0\1\16"+
    "\143\0\1\340\43\0\1\341\1\0\1\342\2\341\1\0"+
    "\7\341\12\0\1\341\1\0\1\341\1\24\1\341\4\342"+
    "\1\0\30\342\1\341\1\0\1\342\1\23\7\0\1\23"+
    "\12\0\12\23\5\0\4\23\1\0\30\23\2\0\1\23"+
    "\6\0\1\341\1\0\1\342\2\341\1\0\7\341\12\0"+
    "\1\341\1\0\3\341\4\342\1\0\30\342\1\341\1\0"+
    "\1\342\6\0\1\341\1\0\1\342\1\341\1\24\1\0"+
    "\7\341\12\0\1\341\1\0\3\341\4\342\1\0\30\342"+
    "\1\341\1\0\1\342\6\0\1\341\1\0\1\342\2\341"+
    "\1\0\1\341\1\24\5\341\12\0\1\341\1\0\1\341"+
    "\1\24\1\341\4\342\1\0\30\342\1\341\1\0\1\342"+
    "\6\0\1\341\1\0\1\342\2\341\1\0\2\341\1\343"+
    "\1\341\1\344\2\341\1\345\11\0\1\341\1\0\1\341"+
    "\1\24\1\341\4\342\1\0\30\342\1\341\1\0\1\342"+
    "\6\0\1\341\1\0\1\342\2\341\1\0\7\341\12\0"+
    "\1\341\1\0\3\341\2\342\1\346\1\342\1\0\30\342"+
    "\1\341\1\0\1\342\6\0\1\341\1\0\1\342\2\341"+
    "\1\0\4\341\1\347\1\350\1\341\1\351\11\352\1\341"+
    "\1\0\1\341\1\24\1\341\4\342\1\0\30\342\1\341"+
    "\1\0\1\342\6\0\1\341\1\0\1\342\2\341\1\0"+
    "\4\341\1\353\1\354\1\341\12\355\1\341\1\0\3\341"+
    "\2\342\1\346\1\342\1\0\30\342\1\341\1\0\1\342"+
    "\6\0\1\341\1\0\1\342\2\341\1\0\1\341\1\356"+
    "\4\341\1\357\12\0\1\341\1\0\1\341\1\24\1\341"+
    "\2\342\1\346\1\342\1\0\30\342\1\341\1\0\1\342"+
    "\21\0\1\360\1\0\12\361\7\0\1\340\56\0\1\360"+
    "\1\0\12\37\7\0\1\340\56\0\1\360\1\0\12\37"+
    "\53\0\1\341\1\0\1\342\2\341\1\0\7\341\12\0"+
    "\1\341\1\0\2\24\1\341\4\342\1\0\30\342\1\341"+
    "\1\0\1\342\6\0\1\341\1\0\1\342\2\341\1\0"+
    "\7\341\12\0\1\341\1\0\1\341\2\24\4\342\1\0"+
    "\30\342\1\341\1\0\1\342\1\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\3\23\1\362\14\23\1\363"+
    "\7\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\1\364\14\23\1\365\1\23\1\366\6\23"+
    "\1\367\1\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\1\370\14\23\1\371\12\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\1\372\3\23\1\373\10\23\1\363\12\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\12\23"+
    "\1\374\1\23\1\375\4\23\1\376\6\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\1\377"+
    "\7\23\1\u0100\4\23\1\u0101\1\23\1\u0102\2\23\1\u0103"+
    "\5\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\4\23\1\u0104\10\23\1\u0105\12\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\5\23\1\363\5\23\1\u0106\1\u0107\13\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\2\23\1\u0108\1\23"+
    "\1\0\1\u0109\7\23\1\u010a\4\23\1\u010b\12\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\2\23\1\u0108"+
    "\1\23\1\0\1\u010c\16\23\1\u010d\2\23\1\u010e\5\23"+
    "\2\0\2\23\7\0\1\23\12\0\12\23\5\0\4\23"+
    "\1\0\4\23\1\u010f\23\23\2\0\2\23\7\0\1\23"+
    "\12\0\12\23\5\0\4\23\1\0\4\23\1\u0110\10\23"+
    "\1\u0111\3\23\1\u0112\5\23\1\u0113\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\7\23\1\u0114"+
    "\7\23\1\u0115\10\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\5\23\1\u0116\2\23\1\u0117"+
    "\17\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\1\u0101\7\23\1\u0118\17\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\4\23"+
    "\1\u0119\2\23\1\u011a\20\23\2\0\2\23\7\0\1\23"+
    "\12\0\12\23\5\0\4\23\1\0\4\23\1\u011b\23\23"+
    "\2\0\1\23\6\0\1\341\1\0\1\342\2\341\1\0"+
    "\7\341\12\0\1\341\1\0\3\341\4\342\1\0\30\342"+
    "\1\24\1\0\1\342\1\23\7\0\1\23\12\0\12\23"+
    "\5\0\2\23\1\u0108\1\23\1\0\30\23\2\0\1\23"+
    "\2\67\1\0\1\67\1\0\2\67\1\0\3\67\1\0"+
    "\32\67\1\0\33\67\2\0\1\70\77\0\2\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\15\67\1\u011c\17\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\4\67\1\u011d\10\67\1\u011e"+
    "\17\67\1\0\1\67\1\0\2\67\1\0\3\67\1\0"+
    "\32\67\1\0\12\67\1\u011f\1\67\1\u0120\20\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\1\u0121\14\67\1\u0122\1\67\1\u0123\2\67\1\u0124\12\67"+
    "\1\0\1\67\1\0\2\67\1\0\3\67\1\0\32\67"+
    "\1\0\5\67\1\u011e\5\67\1\u0125\1\u0126\20\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\1\u0127\14\67\1\u0128\17\67\1\0\1\67\1\0\2\67"+
    "\1\0\3\67\1\0\32\67\1\0\1\u0129\16\67\1\u012a"+
    "\2\67\1\u012b\12\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\4\67\1\u012c\30\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\15\67\1\u012d\3\67\1\u012e\13\67\1\0\1\67\1\0"+
    "\2\67\1\0\3\67\1\0\32\67\1\0\7\67\1\u012f"+
    "\7\67\1\u0130\15\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\5\67\1\u0131\2\67\1\u0132"+
    "\24\67\1\0\1\67\1\0\2\67\1\0\3\67\1\0"+
    "\32\67\1\0\1\u0122\7\67\1\u0133\24\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\7\67"+
    "\1\u0134\23\67\2\0\1\112\122\0\12\121\7\0\1\340"+
    "\60\0\12\121\107\0\1\123\123\0\1\u0135\70\0\1\u0136"+
    "\10\0\1\u0137\76\0\1\u0138\1\0\1\u0139\65\0\1\u013a"+
    "\14\0\1\u013b\1\0\1\u013c\2\0\1\u013d\64\0\1\u0137"+
    "\5\0\1\u013e\1\u013f\62\0\1\340\2\0\1\u0140\14\0"+
    "\1\u0141\61\0\1\340\2\0\1\u0142\16\0\1\u0143\2\0"+
    "\1\u0144\63\0\1\u0145\112\0\1\u0146\3\0\1\u0147\67\0"+
    "\1\u0148\7\0\1\u0149\67\0\1\u014a\2\0\1\u014b\71\0"+
    "\1\u013b\7\0\1\u014c\100\0\1\u014d\25\0\1\210\122\0"+
    "\12\216\7\0\1\340\60\0\12\216\47\0\1\235\101\0"+
    "\1\241\101\0\1\263\121\0\1\263\21\0\1\340\75\0"+
    "\1\311\53\0\1\311\104\0\1\311\22\0\1\311\101\0"+
    "\1\311\3\0\1\340\74\0\2\311\101\0\2\311\137\0"+
    "\1\311\66\0\1\u014e\15\0\1\342\7\0\1\342\12\0"+
    "\12\342\5\0\4\342\1\0\30\342\2\0\1\342\6\0"+
    "\1\341\1\0\1\342\2\341\1\0\2\341\1\343\1\341"+
    "\1\344\2\341\1\345\11\0\1\341\1\0\3\341\4\342"+
    "\1\0\30\342\1\341\1\0\1\342\6\0\1\341\1\0"+
    "\1\342\2\341\1\0\4\341\1\344\2\341\1\345\11\0"+
    "\1\341\1\0\3\341\4\342\1\0\30\342\1\341\1\0"+
    "\1\342\23\0\12\355\45\0\1\342\7\0\1\342\12\0"+
    "\12\342\5\0\4\342\1\0\15\342\1\u014f\12\342\2\0"+
    "\1\342\6\0\1\341\1\0\1\342\2\341\1\0\4\341"+
    "\1\347\1\350\1\341\1\351\11\352\1\341\1\0\3\341"+
    "\4\342\1\0\30\342\1\341\1\0\1\342\6\0\1\341"+
    "\1\0\1\342\2\341\1\0\4\341\1\353\1\354\1\341"+
    "\12\355\1\341\1\0\3\341\4\342\1\0\30\342\1\341"+
    "\1\0\1\342\21\0\1\360\1\0\12\361\66\0\1\360"+
    "\1\0\12\352\53\0\1\341\1\0\1\342\2\341\1\0"+
    "\4\341\1\353\2\341\12\355\1\341\1\0\3\341\4\342"+
    "\1\0\30\342\1\341\1\0\1\342\6\0\1\341\1\0"+
    "\1\342\2\341\1\0\4\341\1\u0150\1\354\1\341\12\355"+
    "\1\341\1\0\3\341\4\342\1\0\30\342\1\341\1\0"+
    "\1\342\6\u0151\1\u0152\1\u0151\1\u0153\2\u0152\1\u0151\1\u0152"+
    "\1\u0154\5\u0152\12\u0151\1\u0152\1\u0151\3\u0152\4\u0153\1\u0151"+
    "\30\u0153\1\u0152\1\u0151\1\u0153\2\u0155\1\16\1\u0155\1\17"+
    "\1\u0155\1\357\1\u0155\1\u0156\2\357\1\u0155\7\357\12\u0155"+
    "\1\357\1\u0155\3\357\4\u0156\1\u0155\30\u0156\1\357\1\u0155"+
    "\1\u0156\21\0\1\u0157\60\0\1\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\3\23\1\u0158\24\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\12\23\1\u0159\15\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\15\23\1\u015a\12\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\4\23\1\u015b\23\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\21\23\1\u015c\6\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\12\23\1\u015d\15\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\14\23\1\u015e\13\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\26\23\1\u015f\1\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\12\23\1\u0160\15\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\20\23\1\u0161\7\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\22\23\1\u0162\5\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\7\23\1\u0163\20\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\12\23\1\374\15\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\14\23\1\u0164\13\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\17\23\1\363\10\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\15\23\1\u0162\12\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\14\23\1\u0165\13\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\25\23\1\u0166\2\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\22\23\1\u0167\5\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\16\23\1\u0168\11\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\21\23\1\u0169\6\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\15\23\1\u016a\12\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\16\23\1\u016b\11\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\14\23\1\u016c\13\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\3\23\1\u016d\24\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\26\23\1\u016e\1\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\1\u016f\7\23\1\u0170\17\23"+
    "\2\0\2\23\7\0\1\23\12\0\12\23\5\0\4\23"+
    "\1\0\1\23\1\u0171\26\23\2\0\2\23\7\0\1\23"+
    "\12\0\12\23\5\0\4\23\1\0\21\23\1\u0172\6\23"+
    "\2\0\2\23\7\0\1\23\12\0\12\23\5\0\4\23"+
    "\1\0\2\23\1\u0173\11\23\1\u0174\13\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\12\23"+
    "\1\u0175\15\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\17\23\1\u0176\10\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\1\u0177"+
    "\27\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\10\23\1\u0178\17\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\1\u0179\21\23"+
    "\1\u0161\5\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\10\23\1\u017a\17\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\14\23"+
    "\1\u017b\13\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\4\23\1\u017c\23\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\4\23"+
    "\1\u017d\3\23\1\u017e\17\23\2\0\2\23\7\0\1\23"+
    "\12\0\12\23\5\0\4\23\1\0\10\23\1\u017f\17\23"+
    "\2\0\2\23\7\0\1\23\12\0\12\23\5\0\4\23"+
    "\1\0\1\u0167\27\23\2\0\1\23\2\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\14\67"+
    "\1\u0180\20\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\12\67\1\u0181\22\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\20\67"+
    "\1\u0182\14\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\22\67\1\u0183\12\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\12\67"+
    "\1\u011f\22\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\17\67\1\u011e\15\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\15\67"+
    "\1\u0183\17\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\14\67\1\u0184\20\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\16\67"+
    "\1\u0185\16\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\21\67\1\u0186\13\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\16\67"+
    "\1\u0187\16\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\3\67\1\u0188\31\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\26\67"+
    "\1\u0189\6\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\1\u018a\7\67\1\u018b\24\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\1\67\1\u018c\33\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\21\67\1\u018d\13\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\12\67\1\u018e\22\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\17\67\1\u018f\15\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\10\67\1\u0190\24\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\22\67\1\u0182\12\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\10\67\1\u0191\24\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\14\67\1\u0192\20\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\4\67\1\u0193\30\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\10\67\1\u0194\22\67\63\0"+
    "\1\u0195\77\0\1\u0196\107\0\1\u0197\103\0\1\u0198\71\0"+
    "\1\u0138\106\0\1\u0137\77\0\1\u0198\100\0\1\u0199\103\0"+
    "\1\u019a\104\0\1\u019b\76\0\1\u019c\66\0\1\u019d\124\0"+
    "\1\u019e\53\0\1\u019f\7\0\1\u01a0\72\0\1\u01a1\121\0"+
    "\1\u01a2\72\0\1\u01a3\106\0\1\u01a4\72\0\1\u01a5\113\0"+
    "\1\u0197\67\0\1\u01a6\105\0\1\u01a7\71\0\1\u01a8\105\0"+
    "\1\u01a9\105\0\1\u01aa\16\0\1\342\7\0\1\342\12\0"+
    "\12\342\5\0\4\342\1\0\14\342\1\u01ab\13\342\2\0"+
    "\1\342\6\0\1\341\1\0\1\342\2\341\1\0\4\341"+
    "\1\u0150\2\341\12\355\1\341\1\0\3\341\4\342\1\0"+
    "\30\342\1\341\1\0\1\342\15\u0151\1\u01ac\72\u0151\1\u0152"+
    "\1\u0151\1\u0153\2\u0152\1\u0151\1\u0152\1\u01ad\5\u0152\12\u0151"+
    "\1\u0152\1\u0151\3\u0152\4\u0153\1\u0151\30\u0153\1\u0152\1\u0151"+
    "\2\u0153\7\u0151\1\u0153\4\u0151\1\u01ac\5\u0151\12\u0153\5\u0151"+
    "\4\u0153\1\u0151\30\u0153\2\u0151\1\u0153\6\u0151\1\u0152\1\u0151"+
    "\1\u0153\2\u0152\1\u0151\1\u0152\1\u01ad\4\u0152\1\u01ae\12\u0151"+
    "\1\u0152\1\u0151\3\u0152\4\u0153\1\u0151\30\u0153\1\u0152\1\u0151"+
    "\1\u0153\2\u0155\1\16\1\u0155\1\17\75\u0155\1\u0156\1\u0155"+
    "\1\16\1\u0155\1\17\3\u0155\1\u0156\12\u0155\12\u0156\5\u0155"+
    "\4\u0156\1\u0155\30\u0156\2\u0155\1\u0156\20\0\1\u01af\1\u0157"+
    "\1\0\12\355\45\0\1\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\17\23\1\u01b0\10\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\1\u01b1"+
    "\27\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\12\23\1\363\15\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\1\u01b2\27\23"+
    "\2\0\2\23\7\0\1\23\12\0\12\23\5\0\4\23"+
    "\1\0\4\23\1\u01b3\23\23\2\0\2\23\7\0\1\23"+
    "\12\0\12\23\5\0\4\23\1\0\12\23\1\u01b4\15\23"+
    "\2\0\2\23\7\0\1\23\12\0\12\23\5\0\4\23"+
    "\1\0\20\23\1\u01b5\1\u01b6\6\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\20\23\1\u017e"+
    "\7\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\4\23\1\u01b7\23\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\4\23\1\363"+
    "\23\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\13\23\1\363\14\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\4\23\1\u01b8"+
    "\23\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\14\23\1\u01b9\13\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\2\23\1\u01ba"+
    "\25\23\2\0\2\23\6\0\1\u01bb\1\23\2\0\1\u01bc"+
    "\7\0\12\23\5\0\4\23\1\0\30\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\17\23"+
    "\1\u015f\10\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\15\23\1\u01bd\12\23\2\0\2\23"+
    "\7\0\1\23\12\0\1\23\1\u01be\1\u01bf\1\u01c0\2\23"+
    "\1\u01c1\1\23\1\363\1\23\5\0\4\23\1\0\4\23"+
    "\1\u01c2\23\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\14\23\1\u01c3\13\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\16\23"+
    "\1\u01c4\11\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\22\23\1\u01c5\5\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\10\23"+
    "\1\u01c6\17\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\1\u01c7\27\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\6\23\1\u01c8"+
    "\21\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\23\23\1\u01c9\4\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\12\23\1\u01ca"+
    "\15\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\22\23\1\u01cb\5\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\15\23\1\u01cc"+
    "\12\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\3\23\1\u01cd\24\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\10\23\1\u01ce"+
    "\17\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\10\23\1\u01cf\11\23\1\u01d0\5\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\1\23\1\u01d1\26\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\20\23\1\363\7\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\14\23\1\u01d2\13\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\25\23\1\u01d3\2\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\21\23\1\u01d4\6\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\24\23\1\363\3\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\11\23\1\u015f\16\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\12\23\1\u0161\15\23\2\0"+
    "\1\23\2\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\20\67\1\u01d5\1\u01d6\13\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\4\67\1\u01d7\30\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\4\67\1\u011e\30\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\13\67\1\u011e\21\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\2\67\1\u01d8\32\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\15\67\1\u01d9\17\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\10\67\1\u01da\1\u01db\1\u01dc\2\67\1\u01dd"+
    "\1\67\1\u011e\12\67\1\0\4\67\1\u01de\30\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\16\67\1\u01df\16\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\10\67\1\u01e0\24\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\1\u01e1\34\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\6\67\1\u01e2\26\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\23\67"+
    "\1\u01e3\11\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\12\67\1\u01e4\22\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\22\67"+
    "\1\u01e5\12\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\10\67\1\u01e6\24\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\10\67"+
    "\1\u01e7\11\67\1\u01e8\12\67\1\0\1\67\1\0\2\67"+
    "\1\0\3\67\1\0\32\67\1\0\20\67\1\u011e\14\67"+
    "\1\0\1\67\1\0\2\67\1\0\3\67\1\0\32\67"+
    "\1\0\25\67\1\u01e9\7\67\1\0\1\67\1\0\2\67"+
    "\1\0\3\67\1\0\32\67\1\0\21\67\1\u01ea\13\67"+
    "\1\0\1\67\1\0\2\67\1\0\3\67\1\0\32\67"+
    "\1\0\24\67\1\u011e\10\67\1\0\1\67\1\0\2\67"+
    "\1\0\3\67\1\0\32\67\1\0\12\67\1\u0182\20\67"+
    "\67\0\1\u01eb\1\u01ec\64\0\1\u01ed\101\0\1\u0137\110\0"+
    "\1\u0137\70\0\1\u01ee\114\0\1\u01ef\41\0\1\u01f0\1\u01f1"+
    "\1\u01f2\2\0\1\u01f3\1\0\1\u0137\17\0\1\u01f4\113\0"+
    "\1\u01f5\73\0\1\u01f6\71\0\1\u01f7\107\0\1\u01f8\116\0"+
    "\1\u01f9\70\0\1\u01fa\111\0\1\u01fb\67\0\1\u01fc\101\0"+
    "\1\u01fd\11\0\1\u01fe\77\0\1\u0137\106\0\1\u01ff\75\0"+
    "\1\u0200\104\0\1\u0137\67\0\1\u0197\71\0\1\u0201\30\0"+
    "\1\342\7\0\1\342\12\0\12\342\5\0\4\342\1\0"+
    "\2\342\1\u0202\25\342\2\0\1\342\15\u0151\1\u01ac\4\u0151"+
    "\1\16\65\u0151\1\u0152\1\u0151\1\u0153\2\u0152\1\u0151\1\u0152"+
    "\1\u01ad\4\u0152\1\u0203\12\u0151\1\u0152\1\u0151\3\u0152\4\u0153"+
    "\1\u0151\30\u0153\1\u0152\1\u0151\1\u0153\20\0\1\u01af\2\0"+
    "\12\355\45\0\1\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\4\23\1\u0204\23\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\14\23\1\u0205"+
    "\13\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\11\23\1\363\16\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\20\23\1\u0206"+
    "\7\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\2\23\1\u0207\25\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\21\23\1\u0208"+
    "\6\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\10\23\1\u0209\6\23\1\u020a\10\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\6\23\1\u020b\12\23\1\u0161\6\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\17\23\1\u017e"+
    "\10\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\4\23\1\u020c\23\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\21\23\1\u020d"+
    "\6\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\17\23\1\u020e\10\23\2\0\2\23\7\0"+
    "\1\23\12\0\2\23\1\u020f\3\23\1\363\3\23\5\0"+
    "\4\23\1\0\30\23\2\0\2\23\7\0\1\23\12\0"+
    "\5\23\1\u0210\4\23\5\0\4\23\1\0\30\23\2\0"+
    "\2\23\7\0\1\23\12\0\2\23\1\363\7\23\5\0"+
    "\4\23\1\0\30\23\2\0\2\23\7\0\1\23\12\0"+
    "\4\23\1\363\5\23\5\0\4\23\1\0\30\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\17\23\1\u0211\10\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\2\23\1\u0212\25\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\10\23\1\u01cf\17\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\21\23\1\u0213\6\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\5\23\1\u0214\22\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\1\23\1\u017f\26\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\13\23\1\u0215\14\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\1\u0216\27\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\10\23"+
    "\1\u0217\17\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\17\23\1\u0218\10\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\14\23"+
    "\1\u0219\13\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\3\23\1\u021a\24\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\14\23"+
    "\1\u021b\13\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\2\23\1\u020e\25\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\15\23"+
    "\1\u017e\12\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\20\23\1\u021c\7\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\4\23"+
    "\1\u021d\23\23\2\0\2\23\7\0\1\23\12\0\1\23"+
    "\1\u01be\1\u01bf\1\u01c0\2\23\1\u01c1\1\23\1\363\1\23"+
    "\5\0\4\23\1\0\30\23\2\0\1\23\2\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\21\67\1\u021e\13\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\10\67\1\u021f\6\67\1\u0220"+
    "\15\67\1\0\1\67\1\0\2\67\1\0\3\67\1\0"+
    "\32\67\1\0\21\67\1\u0182\13\67\1\0\1\67\1\0"+
    "\2\67\1\0\3\67\1\0\32\67\1\0\21\67\1\u0221"+
    "\13\67\1\0\1\67\1\0\2\67\1\0\3\67\1\0"+
    "\32\67\1\0\17\67\1\u0222\15\67\1\0\1\67\1\0"+
    "\2\67\1\0\3\67\1\0\11\67\1\u0223\3\67\1\u011e"+
    "\14\67\1\0\35\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\14\67\1\u0224\15\67\1\0\35\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\11\67\1\u011e"+
    "\20\67\1\0\35\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\13\67\1\u011e\16\67\1\0\35\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\17\67\1\u0225\15\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\10\67\1\u01e7\24\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\5\67\1\u0226\27\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\1\67\1\u0194\33\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\13\67\1\u0227\21\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\1\u01d7\34\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\10\67"+
    "\1\u0228\24\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\17\67\1\u0229\15\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\3\67"+
    "\1\u022a\31\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\14\67\1\u022b\20\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\2\67"+
    "\1\u0222\32\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\4\67\1\u022c\30\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\10\67\1\u01da\1\u01db"+
    "\1\u01dc\2\67\1\u01dd\1\67\1\u011e\12\67\1\0\33\67"+
    "\70\0\1\u022d\70\0\1\u022e\6\0\1\u022f\103\0\1\u0197"+
    "\101\0\1\u0230\77\0\1\u0231\40\0\1\u0232\3\0\1\u0137"+
    "\100\0\1\u0233\76\0\1\u0137\103\0\1\u0137\140\0\1\u0234"+
    "\72\0\1\u01fd\76\0\1\u0235\75\0\1\u01a9\113\0\1\u0236"+
    "\66\0\1\u01ed\111\0\1\u0237\110\0\1\u0238\65\0\1\u0239"+
    "\112\0\1\u023a\67\0\1\u0231\103\0\1\u023b\52\0\1\u01f0"+
    "\1\u01f1\1\u01f2\2\0\1\u01f3\1\0\1\u0137\124\0\1\u023c"+
    "\23\0\1\342\7\0\1\342\12\0\12\342\5\0\4\342"+
    "\1\0\7\342\1\u023d\20\342\2\0\1\342\1\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\20\23\1\u0178"+
    "\7\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\2\23\1\u023e\25\23\2\0\2\23\7\0"+
    "\1\23\12\0\1\23\2\u023f\1\u0240\6\363\5\0\4\23"+
    "\1\0\30\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\15\23\1\u0241\12\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\17\23"+
    "\1\u0242\10\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\14\23\1\u0243\13\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\1\u01d0"+
    "\27\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\1\u0244\27\23\2\0\2\23\7\0\1\23"+
    "\12\0\12\23\5\0\4\23\1\0\26\23\1\u017e\1\23"+
    "\2\0\2\23\7\0\1\23\12\0\12\23\5\0\4\23"+
    "\1\0\10\23\1\u0245\17\23\2\0\2\23\7\0\1\23"+
    "\12\0\12\23\5\0\4\23\1\0\21\23\1\363\6\23"+
    "\2\0\2\23\7\0\1\23\12\0\10\23\1\363\1\23"+
    "\5\0\4\23\1\0\30\23\2\0\2\23\7\0\1\23"+
    "\12\0\6\23\1\363\3\23\5\0\4\23\1\0\30\23"+
    "\2\0\2\23\7\0\1\23\12\0\12\23\5\0\4\23"+
    "\1\0\14\23\1\u0246\13\23\2\0\2\23\7\0\1\23"+
    "\12\0\12\23\5\0\4\23\1\0\7\23\1\u0247\20\23"+
    "\2\0\2\23\7\0\1\23\12\0\12\23\5\0\4\23"+
    "\1\0\4\23\1\u015f\23\23\2\0\2\23\7\0\1\23"+
    "\12\0\12\23\5\0\4\23\1\0\10\23\1\u0248\17\23"+
    "\2\0\2\23\7\0\1\23\12\0\12\23\5\0\4\23"+
    "\1\0\1\363\27\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\21\23\1\u0161\6\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\2\23\1\363\25\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\14\23\1\u0249\13\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\3\23\1\u015f\24\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\10\23\1\u024a\17\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\6\23\1\363\21\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\5\23\1\u024b\22\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\3\23\1\363\24\23\2\0\1\23\2\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\17\67"+
    "\1\u024c\15\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\14\67\1\u0130\20\67\1\0\1\67"+
    "\1\0\2\67\1\0\3\67\1\0\32\67\1\0\1\u01e8"+
    "\34\67\1\0\1\67\1\0\2\67\1\0\3\67\1\0"+
    "\32\67\1\0\10\67\1\u024d\24\67\1\0\1\67\1\0"+
    "\2\67\1\0\3\67\1\0\32\67\1\0\21\67\1\u011e"+
    "\13\67\1\0\1\67\1\0\2\67\1\0\3\67\1\0"+
    "\17\67\1\u011e\12\67\1\0\35\67\1\0\1\67\1\0"+
    "\2\67\1\0\3\67\1\0\15\67\1\u011e\14\67\1\0"+
    "\35\67\1\0\1\67\1\0\2\67\1\0\3\67\1\0"+
    "\32\67\1\0\14\67\1\u024e\20\67\1\0\1\67\1\0"+
    "\2\67\1\0\3\67\1\0\32\67\1\0\10\67\1\u024f"+
    "\24\67\1\0\1\67\1\0\2\67\1\0\3\67\1\0"+
    "\32\67\1\0\1\u011e\34\67\1\0\1\67\1\0\2\67"+
    "\1\0\3\67\1\0\32\67\1\0\2\67\1\u011e\32\67"+
    "\1\0\1\67\1\0\2\67\1\0\3\67\1\0\32\67"+
    "\1\0\14\67\1\u0250\20\67\1\0\1\67\1\0\2\67"+
    "\1\0\3\67\1\0\32\67\1\0\10\67\1\u0251\24\67"+
    "\1\0\1\67\1\0\2\67\1\0\3\67\1\0\32\67"+
    "\1\0\6\67\1\u011e\26\67\1\0\1\67\1\0\2\67"+
    "\1\0\3\67\1\0\32\67\1\0\3\67\1\u011e\27\67"+
    "\66\0\1\u0252\76\0\1\u0149\65\0\1\u01fe\111\0\1\u0253"+
    "\112\0\1\u0137\44\0\1\u0137\77\0\1\u0137\133\0\1\u0254"+
    "\75\0\1\u0255\71\0\1\u0137\103\0\1\u0137\113\0\1\u0256"+
    "\75\0\1\u0257\77\0\1\u0137\76\0\1\u0137\113\0\1\u0258"+
    "\15\0\1\342\7\0\1\342\12\0\12\342\5\0\4\342"+
    "\1\0\15\342\1\u0259\12\342\2\0\1\342\1\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\4\23\1\u01cd"+
    "\23\23\2\0\2\23\7\0\1\23\12\0\12\363\5\0"+
    "\4\23\1\0\30\23\2\0\2\23\7\0\1\23\12\0"+
    "\3\363\7\23\5\0\4\23\1\0\30\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\3\23"+
    "\1\u023e\24\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\22\23\1\u025a\5\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\22\23"+
    "\1\u0161\5\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\21\23\1\u025b\6\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\15\23"+
    "\1\u025c\12\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\1\u015a\27\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\15\23\1\u025d"+
    "\12\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\4\23\1\u0101\23\23\2\0\2\23\7\0"+
    "\1\23\12\0\12\23\5\0\4\23\1\0\21\23\1\u025e"+
    "\6\23\2\0\2\23\7\0\1\23\12\0\12\23\5\0"+
    "\4\23\1\0\4\23\1\u025f\23\23\2\0\1\23\2\67"+
    "\1\0\1\67\1\0\2\67\1\0\3\67\1\0\32\67"+
    "\1\0\22\67\1\u0260\12\67\1\0\1\67\1\0\2\67"+
    "\1\0\3\67\1\0\32\67\1\0\15\67\1\u0261\17\67"+
    "\1\0\1\67\1\0\2\67\1\0\3\67\1\0\32\67"+
    "\1\0\1\u0262\34\67\1\0\1\67\1\0\2\67\1\0"+
    "\3\67\1\0\32\67\1\0\4\67\1\u0122\30\67\1\0"+
    "\1\67\1\0\2\67\1\0\3\67\1\0\32\67\1\0"+
    "\21\67\1\u0263\11\67\71\0\1\u0264\74\0\1\u0265\64\0"+
    "\1\u0266\105\0\1\u013b\116\0\1\u0267\46\0\1\u0268\44\0"+
    "\1\342\7\0\1\342\12\0\12\342\1\u0268\4\0\4\342"+
    "\1\0\30\342\2\0\1\342\1\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\2\23\1\u0269\25\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\4\23\1\u026a\23\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\14\23\1\363\13\23\2\0"+
    "\2\23\7\0\1\23\12\0\12\23\1\u0268\4\0\4\23"+
    "\1\0\30\23\2\0\2\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\26\23\1\363\1\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\17\23"+
    "\1\u01cd\10\23\2\0\1\23\2\67\1\0\1\67\1\0"+
    "\2\67\1\0\3\67\1\0\32\67\1\0\2\67\1\u026b"+
    "\32\67\1\0\1\67\1\0\2\67\1\0\3\67\1\0"+
    "\32\67\1\0\14\67\1\u011e\20\67\1\0\1\67\1\0"+
    "\2\67\1\0\3\67\1\0\32\67\1\0\12\67\1\u011e"+
    "\22\67\1\0\1\67\1\0\2\67\1\0\3\67\1\0"+
    "\32\67\1\0\26\67\1\u011e\4\67\51\0\1\u026c\113\0"+
    "\1\u0137\77\0\1\u0137\115\0\1\u0137\43\0\1\u026d\42\0"+
    "\1\23\7\0\1\23\12\0\12\23\5\0\4\23\1\0"+
    "\21\23\1\u026e\6\23\2\0\2\23\7\0\1\23\12\0"+
    "\12\23\5\0\4\23\1\0\2\23\1\u026f\25\23\2\0"+
    "\1\23\2\67\1\0\1\67\1\0\2\67\1\0\3\67"+
    "\1\0\32\67\1\0\21\67\1\u0270\11\67\70\0\1\u0271"+
    "\74\0\1\u0272\16\0\1\23\7\0\1\23\12\0\12\23"+
    "\5\0\4\23\1\0\15\23\1\u0101\12\23\2\0\2\23"+
    "\7\0\1\23\12\0\12\23\5\0\4\23\1\0\1\u0273"+
    "\27\23\2\0\1\23\2\67\1\0\1\67\1\0\2\67"+
    "\1\0\3\67\1\0\32\67\1\0\15\67\1\u0122\15\67"+
    "\64\0\1\u013b\106\0\1\u0274\10\0\1\23\7\0\1\23"+
    "\12\0\12\23\5\0\4\23\1\0\12\23\1\u0275\15\23"+
    "\2\0\1\23\62\0\1\u0276\17\0\1\23\7\0\1\23"+
    "\12\0\12\23\5\0\4\23\1\0\12\23\1\u01cd\15\23"+
    "\2\0\1\23\50\0\1\u0277\104\0\1\u0278\114\0\1\u0279"+
    "\60\0\1\u027a\124\0\1\u027b\60\0\1\u027c\122\0\1\u027d"+
    "\64\0\1\u027e\67\0\1\u027f\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32670];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\2\11\3\1\1\11\3\1\1\11\11\1\1\11"+
    "\27\1\1\11\1\1\2\11\15\1\2\11\2\1\2\11"+
    "\3\1\1\11\1\1\1\11\15\1\1\11\12\1\1\11"+
    "\1\1\1\11\27\1\2\11\3\1\1\11\2\1\1\11"+
    "\15\1\1\11\1\1\3\11\20\1\2\11\21\1\2\11"+
    "\2\1\1\11\4\1\1\11\21\1\2\0\1\1\3\0"+
    "\1\1\5\0\2\1\1\0\1\1\1\0\104\1\2\0"+
    "\1\11\27\0\2\1\2\0\1\1\1\0\100\1\6\0"+
    "\1\1\17\0\1\1\2\0\15\1\2\11\56\1\25\0"+
    "\1\1\1\0\53\1\20\0\25\1\4\0\1\1\2\0"+
    "\13\1\5\0\3\1\2\0\3\1\2\0\1\1\1\0"+
    "\1\1\11\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[639];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    StringBuffer stringN = new StringBuffer();
    public static int banderaN = 0;
    public static int bandera = 0;
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   for(Token t: tokens){
    t.print();
  }

  System.out.println("\nErrores\n");
  for(Token t: errores){
    t.print();
  }
  return 0;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { stringN.setLength(0);
     stringN.append(yytext());
     yybegin(hope);
            }
            // fall through
          case 43: break;
          case 2:
            { /* ignore */ ;banderaN =0;
            }
            // fall through
          case 44: break;
          case 3:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
            }
            // fall through
          case 45: break;
          case 4:
            { string.setLength(0); yybegin(STRING); bandera = yycolumn;
            }
            // fall through
          case 46: break;
          case 5:
            { stringN.setLength(0);
string.setLength(0);
string.append(yytext());
stringN.append(yytext());
yybegin(filtro);
            }
            // fall through
          case 47: break;
          case 6:
            { string.setLength(0); yybegin(Chars); bandera = yycolumn;
            }
            // fall through
          case 48: break;
          case 7:
            { string.setLength(0);
  string.append(yytext());
  yybegin(numberState);
  banderaN =0;
            }
            // fall through
          case 49: break;
          case 8:
            { string.append( yytext() );
            }
            // fall through
          case 50: break;
          case 9:
            { System.out.println("HOLA");
    //string.append( yytext() );
    errores.add(new Token(string.toString(), yyline, bandera, "Error stringASAD"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 51: break;
          case 10:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 52: break;
          case 11:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error string"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 53: break;
          case 12:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
    yybegin(hexaStateError);
            }
            // fall through
          case 54: break;
          case 13:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 55: break;
          case 14:
            { yybegin(YYINITIAL);
    string.append( yytext() ); 
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal hexadecimal/Palabra Reservada"));
            }
            // fall through
          case 56: break;
          case 15:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: comillas de cierre incorrectas"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 57: break;
          case 16:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador")); 
    errores.add(new Token("Comillas", yyline, yycolumn, "Error: hexadecimal sin cierre"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 58: break;
          case 17:
            { System.out.println(yyline);
  System.out.println(yycolumn); 
  // throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 59: break;
          case 18:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error: Numero no es hexadecimal"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 60: break;
          case 19:
            { 
            }
            // fall through
          case 61: break;
          case 20:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 62: break;
          case 21:
            { bandera = 1; 
    string.append(yytext());
            }
            // fall through
          case 63: break;
          case 22:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
    }
            }
            // fall through
          case 64: break;
          case 23:
            { string.append(yytext());
            }
            // fall through
          case 65: break;
          case 24:
            { if(bandera == 1){
      yybegin(YYINITIAL);
      errores.add(new Token(string.toString(), yyline, yycolumn, "Error: Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
    else{
      yybegin(YYINITIAL);
      tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
      tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
    }
            }
            // fall through
          case 66: break;
          case 25:
            { System.out.println("HOLA2");
    string.append( yytext() );
    errores.add(new Token(string.toString(), yyline, bandera, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 67: break;
          case 26:
            { errores.add(new Token(string.toString(), yyline, yycolumn, "Error char"));
    yybegin(YYINITIAL);
            }
            // fall through
          case 68: break;
          case 27:
            { yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal char"));
            }
            // fall through
          case 69: break;
          case 28:
            { errores.add(new Token(string.toString(), yyline, bandera, "Error: identificador")); yybegin(YYINITIAL);
            }
            // fall through
          case 70: break;
          case 29:
            { stringN.append(yytext());yybegin(hope);
            }
            // fall through
          case 71: break;
          case 30:
            { errores.add(new Token(stringN.toString(), yyline, yycolumn, "Error: identificador"));
        yybegin(YYINITIAL);
            }
            // fall through
          case 72: break;
          case 31:
            { stringN.append(yytext());
  yybegin(hope);
            }
            // fall through
          case 73: break;
          case 32:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 74: break;
          case 33:
            { string.append(yytext()) ;
             errores.add(new Token(string.toString(), yyline, yycolumn, "Error Identificador"));
            yybegin(YYINITIAL);
            }
            // fall through
          case 75: break;
          case 34:
            { tokens.add(new Token(string.toString(), yyline, yycolumn, "Identificador"));
  tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 76: break;
          case 35:
            { string.setLength(0);
  string.append(yytext());
  errores.add(new Token(string.toString(), yyline, yycolumn, "Error Decimal"));
  yybegin(YYINITIAL);
            }
            // fall through
          case 77: break;
          case 36:
            { errores.add(new Token(yytext(), yyline, yycolumn, "Error Decimal"));
            }
            // fall through
          case 78: break;
          case 37:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 79: break;
          case 38:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Units"));
            }
            // fall through
          case 80: break;
          case 39:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Transac"));
            }
            // fall through
          case 81: break;
          case 40:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaState);
            }
            // fall through
          case 82: break;
          case 41:
            { string.setLength(0); 
                      string.append(yytext());
                      yybegin(hexaStateC);
            }
            // fall through
          case 83: break;
          case 42:
            { {WhiteSpace} | "," {
    yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
  }

  ")" {
    yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(")", yyline+1, yycolumn, "Operador"));
  }

  ";" {
    yybegin(YYINITIAL);
    tokens.add(new Token(string.toString(), yyline, yycolumn, "literal numerico"));
    tokens.add(new Token(";", yyline+1, yycolumn, "Operador"));
  }

  {numbersH} { string.append(yytext());}
  "." { 
    string.append(yytext());
  }

  "e" { 
    yybegin(NaturalNumbers);
    string.append(yytext());
  }

"!" | "&&"|"^" | "=="|"!="|"||"|"<="|"<" |">="|">" |"&"|"|"|"^"|
"~" | "+" |"-" | "" |"/" |"%" |"*"| "<<" |">>"|"="|"," |";"|"."|
"(" | ")" |"[" | "]" | "?"|":" |"{"|"}"|"+="|"-="|"*=" |"/=" {
  tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal numerico"));
  tokens.add(new Token(yytext(), yyline, yycolumn, "Operador"));
  yybegin(YYINITIAL);
}

  [A-DF-Za-df-z] { 
    string.append(yytext()); yybegin(Identificadorcillo); 
  }
            }
            // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
