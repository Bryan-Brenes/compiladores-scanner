// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.jflex

/* JFlex example: partial Java language lexer specification */
import java.util.ArrayList;
/**
    * This class is a simple example lexer.
    */

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\3\u1f00\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\3\u1f00\1\u3e00\1\u3f00\4\u1f00"+
    "\1\u4000\11\u1f00\3\u0100\1\u4100\1\u4200\13\u1f00\4\u0100\1\u4300"+
    "\63\u1f00\2\u0100\1\u4400\4\u1f00\1\u4500\100\u1f00\1\u4600\40\u1f00"+
    "\1\u4700\1\u4800\1\u1f00\1\u4900\1\u4a00\1\u4b00\1\u4c00\26\u1f00"+
    "\1\u4d00\21\u1f00\246\u0100\1\u4e00\20\u0100\1\u4f00\1\u5000\77\u1f00"+
    "\2\u0100\1\u5000\u0b05\u1f00\1\u5100\1\u5200\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\3\1\5\1\3\1\6\5\3\1\7\1\10"+
    "\3\3\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\21\3\3\1\23\3\3\32\6"+
    "\1\3\1\24\2\3\1\6\1\3\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\6\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\6\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\6\4\3"+
    "\41\0\2\3\4\6\4\3\1\6\2\3\1\0\7\3"+
    "\1\6\4\3\1\6\5\3\27\6\1\3\37\6\1\3"+
    "\u01ca\6\4\3\14\6\16\3\5\6\7\3\1\6\1\3"+
    "\1\6\21\3\160\0\5\6\1\3\2\6\2\3\4\6"+
    "\10\3\1\6\1\3\3\6\1\3\1\6\1\3\24\6"+
    "\1\3\123\6\1\3\213\6\1\3\5\0\2\3\236\6"+
    "\11\3\46\6\2\3\1\6\7\3\47\6\7\3\1\6"+
    "\1\3\55\0\1\3\1\0\1\3\2\0\1\3\2\0"+
    "\1\3\1\0\10\3\33\6\5\3\3\6\15\3\5\0"+
    "\6\3\1\6\4\3\13\0\5\3\53\6\37\0\4\3"+
    "\2\6\1\0\143\6\1\3\1\6\10\0\1\3\6\0"+
    "\2\6\2\0\1\3\4\0\2\6\12\0\3\6\2\3"+
    "\1\6\17\3\1\0\1\6\1\0\36\6\33\0\2\3"+
    "\131\6\13\0\1\6\16\3\12\0\41\6\11\0\2\6"+
    "\4\3\1\6\5\3\26\6\4\0\1\6\11\0\1\6"+
    "\3\0\1\6\5\0\22\3\31\6\3\0\104\3\1\6"+
    "\1\3\13\6\67\3\33\0\1\3\4\0\66\6\3\0"+
    "\1\6\22\0\1\6\7\0\12\6\2\0\2\3\12\0"+
    "\1\3\7\6\1\3\7\6\1\3\3\0\1\3\10\6"+
    "\2\3\2\6\2\3\26\6\1\3\7\6\1\3\1\6"+
    "\3\3\4\6\2\3\1\0\1\6\7\0\2\3\2\0"+
    "\2\3\3\0\1\6\10\3\1\0\4\3\2\6\1\3"+
    "\3\6\2\0\2\3\12\0\4\6\7\3\1\6\5\3"+
    "\3\0\1\3\6\6\4\3\2\6\2\3\26\6\1\3"+
    "\7\6\1\3\2\6\1\3\2\6\1\3\2\6\2\3"+
    "\1\0\1\3\5\0\4\3\2\0\2\3\3\0\3\3"+
    "\1\0\7\3\4\6\1\3\1\6\7\3\14\0\3\6"+
    "\1\0\13\3\3\0\1\3\11\6\1\3\3\6\1\3"+
    "\26\6\1\3\7\6\1\3\2\6\1\3\5\6\2\3"+
    "\1\0\1\6\10\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\6\17\3\2\6\2\0\2\3\12\0\1\3\1\6"+
    "\17\3\3\0\1\3\10\6\2\3\2\6\2\3\26\6"+
    "\1\3\7\6\1\3\2\6\1\3\5\6\2\3\1\0"+
    "\1\6\7\0\2\3\2\0\2\3\3\0\10\3\2\0"+
    "\4\3\2\6\1\3\3\6\2\0\2\3\12\0\1\3"+
    "\1\6\20\3\1\0\1\6\1\3\6\6\3\3\3\6"+
    "\1\3\4\6\3\3\2\6\1\3\1\6\1\3\2\6"+
    "\3\3\2\6\3\3\3\6\3\3\14\6\4\3\5\0"+
    "\3\3\3\0\1\3\4\0\2\3\1\6\6\3\1\0"+
    "\16\3\12\0\11\3\1\6\7\3\3\0\1\3\10\6"+
    "\1\3\3\6\1\3\27\6\1\3\12\6\1\3\5\6"+
    "\3\3\1\6\7\0\1\3\3\0\1\3\4\0\7\3"+
    "\2\0\1\3\2\6\6\3\2\6\2\0\2\3\12\0"+
    "\22\3\2\0\1\3\10\6\1\3\3\6\1\3\27\6"+
    "\1\3\12\6\1\3\5\6\2\3\1\0\1\6\7\0"+
    "\1\3\3\0\1\3\4\0\7\3\2\0\7\3\1\6"+
    "\1\3\2\6\2\0\2\3\12\0\1\3\2\6\17\3"+
    "\2\0\1\3\10\6\1\3\3\6\1\3\51\6\2\3"+
    "\1\6\7\0\1\3\3\0\1\3\4\0\1\6\10\3"+
    "\1\0\10\3\2\6\2\0\2\3\12\0\12\3\6\6"+
    "\2\3\2\0\1\3\22\6\3\3\30\6\1\3\11\6"+
    "\1\3\1\6\2\3\7\6\3\3\1\0\4\3\6\0"+
    "\1\3\1\0\1\3\10\0\22\3\2\0\15\3\60\6"+
    "\1\0\2\6\7\0\4\3\10\6\10\0\1\3\12\0"+
    "\47\3\2\6\1\3\1\6\2\3\2\6\1\3\1\6"+
    "\2\3\1\6\6\3\4\6\1\3\7\6\1\3\3\6"+
    "\1\3\1\6\1\3\1\6\2\3\2\6\1\3\4\6"+
    "\1\0\2\6\6\0\1\3\2\0\1\6\2\3\5\6"+
    "\1\3\1\6\1\3\6\0\2\3\12\0\2\3\4\6"+
    "\40\3\1\6\27\3\2\0\6\3\12\0\13\3\1\0"+
    "\1\3\1\0\1\3\1\0\4\3\2\0\10\6\1\3"+
    "\44\6\4\3\24\0\1\3\2\0\5\6\13\0\1\3"+
    "\44\0\11\3\1\0\71\3\53\6\24\0\1\6\12\0"+
    "\6\3\6\6\4\0\4\6\3\0\1\6\3\0\2\6"+
    "\7\0\3\6\4\0\15\6\14\0\1\6\17\0\2\3"+
    "\46\6\1\3\1\6\5\3\1\6\2\3\53\6\1\3"+
    "\115\6\1\3\4\6\2\3\7\6\1\3\1\6\1\3"+
    "\4\6\2\3\51\6\1\3\4\6\2\3\41\6\1\3"+
    "\4\6\2\3\7\6\1\3\1\6\1\3\4\6\2\3"+
    "\17\6\1\3\71\6\1\3\4\6\2\3\103\6\2\3"+
    "\3\0\40\3\20\6\20\3\125\6\14\3\u016c\6\2\3"+
    "\21\6\1\3\32\6\5\3\113\6\3\3\3\6\17\3"+
    "\15\6\1\3\4\6\3\0\13\3\22\6\3\0\13\3"+
    "\22\6\2\0\14\3\15\6\1\3\3\6\1\3\2\0"+
    "\14\3\64\6\40\0\3\3\1\6\3\3\2\6\1\0"+
    "\2\3\12\0\41\3\3\0\2\3\12\0\6\3\130\6"+
    "\10\3\51\6\1\0\1\6\5\3\106\6\12\3\35\6"+
    "\3\3\14\0\4\3\14\0\12\3\12\0\36\6\2\3"+
    "\5\6\13\3\54\6\4\3\21\0\7\6\2\0\6\3"+
    "\12\0\46\3\27\6\5\0\4\3\65\6\12\0\1\3"+
    "\35\0\2\3\13\0\6\3\12\0\15\3\1\6\130\3"+
    "\5\0\57\6\21\0\7\6\4\3\12\0\21\3\11\0"+
    "\14\3\3\0\36\6\15\0\2\6\12\0\54\6\16\0"+
    "\14\3\44\6\24\0\10\3\12\0\3\3\3\6\12\0"+
    "\44\6\122\3\3\0\1\3\25\0\4\6\1\0\4\6"+
    "\3\0\2\6\11\3\300\6\47\0\25\3\4\0\26\6"+
    "\2\3\6\6\2\3\46\6\2\3\6\6\2\3\10\6"+
    "\1\3\1\6\1\3\1\6\1\3\1\6\1\3\37\6"+
    "\2\3\65\6\1\3\7\6\1\3\1\6\3\3\3\6"+
    "\1\3\7\6\3\3\4\6\2\3\6\6\4\3\15\6"+
    "\5\3\3\6\1\3\7\6\16\3\5\0\32\3\5\0"+
    "\20\3\2\6\23\3\1\6\13\3\5\0\5\3\6\0"+
    "\1\3\1\6\15\3\1\6\20\3\15\6\3\3\33\6"+
    "\25\3\15\0\4\3\1\0\3\3\14\0\21\3\1\6"+
    "\4\3\1\6\2\3\12\6\1\3\1\6\3\3\5\6"+
    "\6\3\1\6\1\3\1\6\1\3\1\6\1\3\4\6"+
    "\1\3\13\6\2\3\4\6\5\3\5\6\4\3\1\6"+
    "\21\3\51\6\u0177\3\57\6\1\3\57\6\1\3\205\6"+
    "\6\3\4\6\3\0\2\6\14\3\46\6\1\3\1\6"+
    "\5\3\1\6\2\3\70\6\7\3\1\6\17\3\1\0"+
    "\27\6\11\3\7\6\1\3\7\6\1\3\7\6\1\3"+
    "\7\6\1\3\7\6\1\3\7\6\1\3\7\6\1\3"+
    "\7\6\1\3\40\0\57\3\1\6\325\3\3\6\31\3"+
    "\11\6\6\0\1\3\5\6\2\3\5\6\4\3\126\6"+
    "\2\3\2\0\2\3\3\6\1\3\132\6\1\3\4\6"+
    "\5\3\51\6\3\3\136\6\21\3\33\6\65\3\306\6"+
    "\112\3\315\6\63\3\215\6\103\3\56\6\2\3\15\6"+
    "\3\3\20\6\12\0\2\6\24\3\57\6\1\0\4\3"+
    "\12\0\1\3\31\6\7\3\1\0\120\6\2\0\45\3"+
    "\11\6\2\3\147\6\2\3\4\6\1\3\4\6\14\3"+
    "\13\6\115\3\12\6\1\0\3\6\1\0\4\6\1\0"+
    "\27\6\5\0\20\3\1\6\7\3\64\6\14\3\2\0"+
    "\62\6\21\0\13\3\12\0\6\3\22\0\6\6\3\3"+
    "\1\6\4\3\12\0\34\6\10\0\2\3\27\6\15\0"+
    "\14\3\35\6\3\3\4\0\57\6\16\0\16\3\1\6"+
    "\12\0\46\3\51\6\16\0\11\3\3\6\1\0\10\6"+
    "\2\0\2\3\12\0\6\3\27\6\3\3\1\6\1\0"+
    "\4\3\60\6\1\0\1\6\3\0\2\6\2\0\5\6"+
    "\2\0\1\6\1\0\1\6\30\3\3\6\2\3\13\6"+
    "\5\0\2\3\3\6\2\0\12\3\6\6\2\3\6\6"+
    "\2\3\6\6\11\3\7\6\1\3\7\6\221\3\43\6"+
    "\10\0\1\3\2\0\2\3\12\0\6\3\244\6\14\3"+
    "\27\6\4\3\61\6\4\3\156\6\2\3\152\6\46\3"+
    "\7\6\14\3\5\6\5\3\1\6\1\0\12\6\1\3"+
    "\15\6\1\3\5\6\1\3\1\6\1\3\2\6\1\3"+
    "\2\6\1\3\154\6\41\3\153\6\22\3\100\6\2\3"+
    "\66\6\50\3\15\6\3\3\20\0\20\3\7\0\14\3"+
    "\2\6\30\3\3\6\31\3\1\6\6\3\5\6\1\3"+
    "\207\6\2\3\1\0\4\3\1\6\13\3\12\0\7\3"+
    "\32\6\4\3\1\6\1\3\32\6\13\3\131\6\3\3"+
    "\6\6\2\3\6\6\2\3\6\6\2\3\3\6\3\3"+
    "\2\6\3\3\2\6\22\3\3\0\4\3\14\6\1\3"+
    "\32\6\1\3\23\6\1\3\2\6\1\3\17\6\2\3"+
    "\16\6\42\3\173\6\105\3\65\6\210\3\1\0\202\3"+
    "\35\6\3\3\61\6\57\3\37\6\21\3\33\6\65\3"+
    "\36\6\2\3\44\6\4\3\10\6\1\3\5\6\52\3"+
    "\236\6\2\3\12\0\126\3\6\6\2\3\1\6\1\3"+
    "\54\6\1\3\2\6\3\3\1\6\2\3\27\6\252\3"+
    "\26\6\12\3\32\6\106\3\70\6\6\3\2\6\100\3"+
    "\1\6\3\0\1\3\2\0\5\3\4\0\4\6\1\3"+
    "\3\6\1\3\33\6\4\3\3\0\4\3\1\0\40\3"+
    "\35\6\203\3\66\6\12\3\26\6\12\3\23\6\215\3"+
    "\111\6\267\3\3\0\65\6\17\0\37\3\12\0\20\3"+
    "\3\0\55\6\13\0\2\3\1\0\22\3\31\6\7\3"+
    "\12\0\6\3\3\0\44\6\16\0\1\3\12\0\100\3"+
    "\3\0\60\6\16\0\4\6\13\3\12\0\246\3\53\6"+
    "\15\0\10\3\12\0\66\3\157\6\221\3\143\6\235\3"+
    "\57\6\321\3\71\6\307\3\105\6\13\3\1\6\56\0"+
    "\20\3\4\0\15\6\140\3\2\6\u0163\3\5\0\3\3"+
    "\26\0\2\3\7\0\36\3\4\0\224\3\3\0\273\3"+
    "\125\6\1\3\107\6\1\3\2\6\2\3\1\6\2\3"+
    "\2\6\2\3\4\6\1\3\14\6\1\3\1\6\1\3"+
    "\7\6\1\3\101\6\1\3\4\6\2\3\10\6\1\3"+
    "\7\6\1\3\34\6\1\3\4\6\1\3\5\6\1\3"+
    "\1\6\3\3\7\6\1\3\u0154\6\2\3\31\6\1\3"+
    "\31\6\1\3\37\6\1\3\31\6\1\3\37\6\1\3"+
    "\31\6\1\3\37\6\1\3\31\6\1\3\37\6\1\3"+
    "\31\6\1\3\10\6\2\3\62\0\4\6\1\3\33\6"+
    "\1\3\2\6\1\3\1\6\2\3\1\6\1\3\12\6"+
    "\1\3\4\6\1\3\1\6\1\3\1\6\6\3\1\6"+
    "\4\3\1\6\1\3\1\6\1\3\1\6\1\3\3\6"+
    "\1\3\2\6\1\3\1\6\2\3\1\6\1\3\1\6"+
    "\1\3\1\6\1\3\1\6\1\3\1\6\1\3\2\6"+
    "\1\3\1\6\2\3\4\6\1\3\7\6\1\3\4\6"+
    "\1\3\4\6\1\3\1\6\1\3\12\6\1\3\21\6"+
    "\5\3\3\6\1\3\5\6\1\3\21\6\104\3\327\6"+
    "\51\3\65\6\13\3\336\6\343\3\1\0\36\3\140\0"+
    "\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21248];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\1\2\6"+
    "\1\7\20\4\1\10\1\11\16\10\1\0\1\2\1\12"+
    "\1\4\1\13\34\4\2\10\1\13\27\10\2\0\12\4"+
    "\1\13\16\4\6\10\1\13\16\10\1\0\1\2\1\4"+
    "\1\13\1\4\1\13\25\4\1\13\25\10\1\13\2\4"+
    "\1\13\17\4\17\10\1\4\2\13\4\4\1\13\1\4"+
    "\4\10\1\13\1\10\1\14\4\4\4\10\1\4\1\10"+
    "\1\4\1\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\130\0\204\0\130\0\260\0\130"+
    "\0\334\0\130\0\u0108\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4"+
    "\0\u0210\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344"+
    "\0\u0370\0\u039c\0\u03c8\0\u03f4\0\u0420\0\130\0\u044c\0\u0478"+
    "\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8"+
    "\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\130\0\u070c"+
    "\0\260\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840"+
    "\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0"+
    "\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00"+
    "\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0420"+
    "\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94"+
    "\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4"+
    "\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054"+
    "\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4"+
    "\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314"+
    "\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474"+
    "\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4"+
    "\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734"+
    "\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894"+
    "\0\u1054\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c\0\u19c8"+
    "\0\u19f4\0\u1a20\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28"+
    "\0\u1b54\0\u1b80\0\u1bac\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c\0\u1c88"+
    "\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38\0\u1d64\0\u1d90\0\u1dbc\0\u1de8"+
    "\0\u1e14\0\u1e40\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48"+
    "\0\u1f74\0\u1fa0\0\u1fcc\0\u1ff8\0\u2024\0\u2050\0\u207c\0\u20a8"+
    "\0\u20d4\0\u2100\0\u212c\0\u2158\0\u2184\0\u21b0\0\u21dc\0\u2208"+
    "\0\u2234\0\u2260\0\u228c\0\u22b8\0\u22e4\0\u2310\0\u233c\0\u2368"+
    "\0\u2394\0\u23c0\0\u23ec\0\u2418\0\u2444\0\u2470\0\u249c\0\u24c8"+
    "\0\u24f4\0\u2520\0\u254c\0\u2578\0\u25a4\0\u25d0\0\u25fc\0\u2628"+
    "\0\u2654\0\u2680\0\u26ac\0\u26d8\0\u2704\0\u2730\0\u275c\0\u2788"+
    "\0\u27b4\0\u141c\0\u27e0\0\u280c\0\u2838\0\u2864\0\u2890\0\u17b8"+
    "\0\u28bc\0\260\0\u28e8\0\u2914\0\u2940\0\u296c\0\u2998\0\u29c4"+
    "\0\u29f0\0\u2a1c\0\u2a48\0\u2a74\0\u2aa0\0\u2acc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\12\10\13\1\14\1\3\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\7\1\23\1\24\2\7\1\25"+
    "\2\7\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\2\7\2\35\1\3\1\35\1\3\1\36\16\35\1\3"+
    "\2\35\1\37\1\40\1\41\1\42\1\35\1\43\1\44"+
    "\2\35\1\45\2\35\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\2\35\56\0\1\4\51\0\1\7\5\0"+
    "\1\7\3\0\11\7\2\0\27\7\7\0\1\55\1\0"+
    "\1\56\54\0\11\13\54\0\1\57\30\0\1\7\5\0"+
    "\1\7\3\0\11\7\2\0\3\7\1\60\14\7\1\61"+
    "\7\7\5\0\1\7\3\0\11\7\2\0\15\7\1\62"+
    "\1\7\1\63\6\7\1\64\1\7\5\0\1\7\3\0"+
    "\11\7\2\0\15\7\1\65\12\7\5\0\1\7\3\0"+
    "\11\7\2\0\4\7\1\66\10\7\1\61\12\7\5\0"+
    "\1\7\3\0\11\7\2\0\12\7\1\67\1\7\1\70"+
    "\13\7\5\0\1\7\3\0\11\7\2\0\1\71\14\7"+
    "\1\72\1\7\1\73\2\7\1\74\5\7\5\0\1\7"+
    "\3\0\11\7\2\0\4\7\1\75\23\7\5\0\1\7"+
    "\3\0\11\7\2\0\5\7\1\61\5\7\1\76\1\77"+
    "\13\7\5\0\1\7\3\0\11\7\2\0\1\100\14\7"+
    "\1\101\12\7\5\0\1\7\3\0\11\7\2\0\1\102"+
    "\16\7\1\103\2\7\1\104\5\7\5\0\1\7\3\0"+
    "\11\7\2\0\4\7\1\105\23\7\5\0\1\7\3\0"+
    "\11\7\2\0\15\7\1\106\3\7\1\107\6\7\5\0"+
    "\1\7\3\0\11\7\2\0\7\7\1\110\7\7\1\111"+
    "\10\7\5\0\1\7\3\0\11\7\2\0\5\7\1\112"+
    "\2\7\1\113\17\7\5\0\1\7\3\0\11\7\2\0"+
    "\1\72\7\7\1\114\17\7\5\0\1\7\3\0\11\7"+
    "\2\0\7\7\1\115\17\7\2\35\1\0\1\35\2\0"+
    "\16\35\1\0\31\35\1\0\1\35\2\0\16\35\1\0"+
    "\15\35\1\116\13\35\1\0\1\35\2\0\16\35\1\0"+
    "\4\35\1\117\10\35\1\120\13\35\1\0\1\35\2\0"+
    "\16\35\1\0\12\35\1\121\1\35\1\122\14\35\1\0"+
    "\1\35\2\0\16\35\1\0\1\123\14\35\1\124\1\35"+
    "\1\125\2\35\1\126\6\35\1\0\1\35\2\0\16\35"+
    "\1\0\4\35\1\127\24\35\1\0\1\35\2\0\16\35"+
    "\1\0\5\35\1\120\5\35\1\130\1\131\14\35\1\0"+
    "\1\35\2\0\16\35\1\0\1\132\14\35\1\133\13\35"+
    "\1\0\1\35\2\0\16\35\1\0\1\134\16\35\1\135"+
    "\2\35\1\136\6\35\1\0\1\35\2\0\16\35\1\0"+
    "\4\35\1\137\24\35\1\0\1\35\2\0\16\35\1\0"+
    "\15\35\1\140\3\35\1\141\7\35\1\0\1\35\2\0"+
    "\16\35\1\0\7\35\1\142\7\35\1\143\11\35\1\0"+
    "\1\35\2\0\16\35\1\0\5\35\1\144\2\35\1\145"+
    "\20\35\1\0\1\35\2\0\16\35\1\0\1\124\7\35"+
    "\1\146\20\35\1\0\1\35\2\0\16\35\1\0\7\35"+
    "\1\147\17\35\7\150\1\151\44\150\2\56\1\4\1\56"+
    "\1\5\47\56\1\7\5\0\1\7\3\0\11\7\2\0"+
    "\3\7\1\152\24\7\5\0\1\7\3\0\11\7\2\0"+
    "\15\7\1\153\12\7\5\0\1\7\3\0\11\7\2\0"+
    "\4\7\1\154\23\7\5\0\1\7\3\0\11\7\2\0"+
    "\21\7\1\155\6\7\5\0\1\7\3\0\11\7\2\0"+
    "\14\7\1\156\13\7\5\0\1\7\3\0\11\7\2\0"+
    "\12\7\1\157\15\7\5\0\1\7\3\0\11\7\2\0"+
    "\20\7\1\160\7\7\5\0\1\7\3\0\11\7\2\0"+
    "\22\7\1\161\5\7\5\0\1\7\3\0\11\7\2\0"+
    "\12\7\1\67\15\7\5\0\1\7\3\0\11\7\2\0"+
    "\17\7\1\61\10\7\5\0\1\7\3\0\11\7\2\0"+
    "\15\7\1\161\12\7\5\0\1\7\3\0\11\7\2\0"+
    "\14\7\1\162\13\7\5\0\1\7\3\0\11\7\2\0"+
    "\25\7\1\61\2\7\5\0\1\7\3\0\11\7\2\0"+
    "\16\7\1\163\11\7\5\0\1\7\3\0\11\7\2\0"+
    "\21\7\1\164\6\7\5\0\1\7\3\0\11\7\2\0"+
    "\16\7\1\165\11\7\5\0\1\7\3\0\11\7\2\0"+
    "\3\7\1\166\24\7\5\0\1\7\3\0\11\7\2\0"+
    "\26\7\1\167\1\7\5\0\1\7\3\0\11\7\2\0"+
    "\1\170\7\7\1\171\17\7\5\0\1\7\3\0\11\7"+
    "\2\0\1\7\1\172\26\7\5\0\1\7\3\0\11\7"+
    "\2\0\21\7\1\173\6\7\5\0\1\7\3\0\11\7"+
    "\2\0\12\7\1\174\15\7\5\0\1\7\3\0\11\7"+
    "\2\0\17\7\1\175\10\7\5\0\1\7\3\0\11\7"+
    "\2\0\10\7\1\176\17\7\5\0\1\7\3\0\11\7"+
    "\2\0\22\7\1\160\5\7\5\0\1\7\3\0\11\7"+
    "\2\0\10\7\1\177\17\7\5\0\1\7\3\0\11\7"+
    "\2\0\14\7\1\200\13\7\5\0\1\7\3\0\11\7"+
    "\2\0\4\7\1\201\23\7\5\0\1\7\3\0\11\7"+
    "\2\0\10\7\1\202\16\7\2\35\1\0\1\35\2\0"+
    "\16\35\1\0\14\35\1\203\14\35\1\0\1\35\2\0"+
    "\16\35\1\0\12\35\1\204\16\35\1\0\1\35\2\0"+
    "\16\35\1\0\20\35\1\205\10\35\1\0\1\35\2\0"+
    "\16\35\1\0\22\35\1\206\6\35\1\0\1\35\2\0"+
    "\16\35\1\0\12\35\1\121\16\35\1\0\1\35\2\0"+
    "\16\35\1\0\17\35\1\120\11\35\1\0\1\35\2\0"+
    "\16\35\1\0\15\35\1\206\13\35\1\0\1\35\2\0"+
    "\16\35\1\0\14\35\1\207\14\35\1\0\1\35\2\0"+
    "\16\35\1\0\25\35\1\120\3\35\1\0\1\35\2\0"+
    "\16\35\1\0\16\35\1\210\12\35\1\0\1\35\2\0"+
    "\16\35\1\0\21\35\1\211\7\35\1\0\1\35\2\0"+
    "\16\35\1\0\16\35\1\212\12\35\1\0\1\35\2\0"+
    "\16\35\1\0\3\35\1\213\25\35\1\0\1\35\2\0"+
    "\16\35\1\0\26\35\1\214\2\35\1\0\1\35\2\0"+
    "\16\35\1\0\1\215\7\35\1\216\20\35\1\0\1\35"+
    "\2\0\16\35\1\0\1\35\1\217\27\35\1\0\1\35"+
    "\2\0\16\35\1\0\21\35\1\220\7\35\1\0\1\35"+
    "\2\0\16\35\1\0\12\35\1\221\16\35\1\0\1\35"+
    "\2\0\16\35\1\0\17\35\1\222\11\35\1\0\1\35"+
    "\2\0\16\35\1\0\10\35\1\223\20\35\1\0\1\35"+
    "\2\0\16\35\1\0\22\35\1\205\6\35\1\0\1\35"+
    "\2\0\16\35\1\0\10\35\1\224\20\35\1\0\1\35"+
    "\2\0\16\35\1\0\14\35\1\225\14\35\1\0\1\35"+
    "\2\0\16\35\1\0\4\35\1\226\24\35\1\0\1\35"+
    "\2\0\16\35\1\0\10\35\1\227\16\35\7\150\1\230"+
    "\53\150\1\230\1\150\1\231\42\150\1\7\5\0\1\7"+
    "\3\0\11\7\2\0\17\7\1\232\10\7\5\0\1\7"+
    "\3\0\11\7\2\0\12\7\1\233\15\7\5\0\1\7"+
    "\3\0\11\7\2\0\1\234\27\7\5\0\1\7\3\0"+
    "\11\7\2\0\4\7\1\235\23\7\5\0\1\7\3\0"+
    "\11\7\2\0\20\7\1\236\1\237\6\7\5\0\1\7"+
    "\3\0\11\7\2\0\4\7\1\240\23\7\5\0\1\7"+
    "\3\0\11\7\2\0\4\7\1\61\23\7\5\0\1\7"+
    "\3\0\11\7\2\0\13\7\1\61\14\7\5\0\1\7"+
    "\3\0\11\7\2\0\2\7\1\241\25\7\5\0\1\7"+
    "\3\0\11\7\2\0\15\7\1\242\12\7\5\0\1\7"+
    "\3\0\1\7\1\243\1\244\1\245\2\7\1\246\1\7"+
    "\1\61\2\0\4\7\1\247\23\7\5\0\1\7\3\0"+
    "\11\7\2\0\16\7\1\250\11\7\5\0\1\7\3\0"+
    "\11\7\2\0\10\7\1\251\17\7\5\0\1\7\3\0"+
    "\11\7\2\0\1\252\27\7\5\0\1\7\3\0\11\7"+
    "\2\0\6\7\1\253\21\7\5\0\1\7\3\0\11\7"+
    "\2\0\23\7\1\254\4\7\5\0\1\7\3\0\11\7"+
    "\2\0\12\7\1\255\15\7\5\0\1\7\3\0\11\7"+
    "\2\0\22\7\1\256\5\7\5\0\1\7\3\0\11\7"+
    "\2\0\10\7\1\257\17\7\5\0\1\7\3\0\11\7"+
    "\2\0\10\7\1\260\11\7\1\261\5\7\5\0\1\7"+
    "\3\0\11\7\2\0\20\7\1\61\7\7\5\0\1\7"+
    "\3\0\11\7\2\0\25\7\1\262\2\7\5\0\1\7"+
    "\3\0\11\7\2\0\21\7\1\263\6\7\5\0\1\7"+
    "\3\0\11\7\2\0\24\7\1\61\3\7\5\0\1\7"+
    "\3\0\11\7\2\0\12\7\1\160\14\7\2\35\1\0"+
    "\1\35\2\0\16\35\1\0\20\35\1\264\1\265\7\35"+
    "\1\0\1\35\2\0\16\35\1\0\4\35\1\266\24\35"+
    "\1\0\1\35\2\0\16\35\1\0\4\35\1\120\24\35"+
    "\1\0\1\35\2\0\16\35\1\0\13\35\1\120\15\35"+
    "\1\0\1\35\2\0\16\35\1\0\2\35\1\267\26\35"+
    "\1\0\1\35\2\0\16\35\1\0\15\35\1\270\13\35"+
    "\1\0\1\35\2\0\5\35\1\271\1\272\1\273\2\35"+
    "\1\274\1\35\1\120\1\35\1\0\4\35\1\275\24\35"+
    "\1\0\1\35\2\0\16\35\1\0\16\35\1\276\12\35"+
    "\1\0\1\35\2\0\16\35\1\0\10\35\1\277\20\35"+
    "\1\0\1\35\2\0\16\35\1\0\1\300\30\35\1\0"+
    "\1\35\2\0\16\35\1\0\6\35\1\301\22\35\1\0"+
    "\1\35\2\0\16\35\1\0\23\35\1\302\5\35\1\0"+
    "\1\35\2\0\16\35\1\0\12\35\1\303\16\35\1\0"+
    "\1\35\2\0\16\35\1\0\22\35\1\304\6\35\1\0"+
    "\1\35\2\0\16\35\1\0\10\35\1\305\20\35\1\0"+
    "\1\35\2\0\16\35\1\0\10\35\1\306\11\35\1\307"+
    "\6\35\1\0\1\35\2\0\16\35\1\0\20\35\1\120"+
    "\10\35\1\0\1\35\2\0\16\35\1\0\25\35\1\310"+
    "\3\35\1\0\1\35\2\0\16\35\1\0\21\35\1\311"+
    "\7\35\1\0\1\35\2\0\16\35\1\0\24\35\1\120"+
    "\4\35\1\0\1\35\2\0\16\35\1\0\12\35\1\205"+
    "\14\35\7\150\1\230\1\150\1\4\42\150\1\7\5\0"+
    "\1\7\3\0\11\7\2\0\4\7\1\312\23\7\5\0"+
    "\1\7\3\0\11\7\2\0\4\7\1\313\23\7\5\0"+
    "\1\7\3\0\11\7\2\0\11\7\1\61\16\7\5\0"+
    "\1\7\3\0\11\7\2\0\20\7\1\314\7\7\5\0"+
    "\1\7\3\0\11\7\2\0\21\7\1\315\6\7\5\0"+
    "\1\7\3\0\11\7\2\0\10\7\1\316\6\7\1\317"+
    "\10\7\5\0\1\7\3\0\11\7\2\0\21\7\1\160"+
    "\6\7\5\0\1\7\3\0\11\7\2\0\21\7\1\320"+
    "\6\7\5\0\1\7\3\0\11\7\2\0\17\7\1\321"+
    "\10\7\5\0\1\7\3\0\2\7\1\322\3\7\1\61"+
    "\2\7\2\0\30\7\5\0\1\7\3\0\5\7\1\323"+
    "\3\7\2\0\30\7\5\0\1\7\3\0\2\7\1\61"+
    "\6\7\2\0\30\7\5\0\1\7\3\0\4\7\1\61"+
    "\4\7\2\0\30\7\5\0\1\7\3\0\11\7\2\0"+
    "\17\7\1\324\10\7\5\0\1\7\3\0\11\7\2\0"+
    "\10\7\1\260\17\7\5\0\1\7\3\0\11\7\2\0"+
    "\5\7\1\325\22\7\5\0\1\7\3\0\11\7\2\0"+
    "\1\7\1\202\26\7\5\0\1\7\3\0\11\7\2\0"+
    "\13\7\1\326\14\7\5\0\1\7\3\0\11\7\2\0"+
    "\1\240\27\7\5\0\1\7\3\0\11\7\2\0\10\7"+
    "\1\327\17\7\5\0\1\7\3\0\11\7\2\0\17\7"+
    "\1\330\10\7\5\0\1\7\3\0\11\7\2\0\3\7"+
    "\1\331\24\7\5\0\1\7\3\0\11\7\2\0\14\7"+
    "\1\332\13\7\5\0\1\7\3\0\11\7\2\0\2\7"+
    "\1\321\25\7\5\0\1\7\3\0\11\7\2\0\4\7"+
    "\1\333\23\7\5\0\1\7\3\0\1\7\1\243\1\244"+
    "\1\245\2\7\1\246\1\7\1\61\2\0\27\7\2\35"+
    "\1\0\1\35\2\0\16\35\1\0\21\35\1\334\7\35"+
    "\1\0\1\35\2\0\16\35\1\0\10\35\1\335\6\35"+
    "\1\336\11\35\1\0\1\35\2\0\16\35\1\0\21\35"+
    "\1\205\7\35\1\0\1\35\2\0\16\35\1\0\21\35"+
    "\1\337\7\35\1\0\1\35\2\0\16\35\1\0\17\35"+
    "\1\340\11\35\1\0\1\35\2\0\6\35\1\341\3\35"+
    "\1\120\3\35\1\0\31\35\1\0\1\35\2\0\11\35"+
    "\1\342\4\35\1\0\31\35\1\0\1\35\2\0\6\35"+
    "\1\120\7\35\1\0\31\35\1\0\1\35\2\0\10\35"+
    "\1\120\5\35\1\0\31\35\1\0\1\35\2\0\16\35"+
    "\1\0\17\35\1\343\11\35\1\0\1\35\2\0\16\35"+
    "\1\0\10\35\1\306\20\35\1\0\1\35\2\0\16\35"+
    "\1\0\5\35\1\344\23\35\1\0\1\35\2\0\16\35"+
    "\1\0\1\35\1\227\27\35\1\0\1\35\2\0\16\35"+
    "\1\0\13\35\1\345\15\35\1\0\1\35\2\0\16\35"+
    "\1\0\1\266\30\35\1\0\1\35\2\0\16\35\1\0"+
    "\10\35\1\346\20\35\1\0\1\35\2\0\16\35\1\0"+
    "\17\35\1\347\11\35\1\0\1\35\2\0\16\35\1\0"+
    "\3\35\1\350\25\35\1\0\1\35\2\0\16\35\1\0"+
    "\14\35\1\351\14\35\1\0\1\35\2\0\16\35\1\0"+
    "\2\35\1\340\26\35\1\0\1\35\2\0\16\35\1\0"+
    "\4\35\1\352\24\35\1\0\1\35\2\0\5\35\1\271"+
    "\1\272\1\273\2\35\1\274\1\35\1\120\1\35\1\0"+
    "\27\35\1\7\5\0\1\7\3\0\11\7\2\0\20\7"+
    "\1\176\7\7\5\0\1\7\3\0\11\7\2\0\1\353"+
    "\27\7\5\0\1\7\3\0\1\7\2\354\1\355\5\61"+
    "\2\0\30\7\5\0\1\7\3\0\11\7\2\0\17\7"+
    "\1\356\10\7\5\0\1\7\3\0\11\7\2\0\14\7"+
    "\1\111\13\7\5\0\1\7\3\0\11\7\2\0\1\261"+
    "\27\7\5\0\1\7\3\0\11\7\2\0\10\7\1\357"+
    "\17\7\5\0\1\7\3\0\11\7\2\0\21\7\1\61"+
    "\6\7\5\0\1\7\3\0\10\7\1\61\2\0\30\7"+
    "\5\0\1\7\3\0\6\7\1\61\2\7\2\0\30\7"+
    "\5\0\1\7\3\0\11\7\2\0\14\7\1\360\13\7"+
    "\5\0\1\7\3\0\11\7\2\0\10\7\1\361\17\7"+
    "\5\0\1\7\3\0\11\7\2\0\1\61\27\7\5\0"+
    "\1\7\3\0\11\7\2\0\2\7\1\61\25\7\5\0"+
    "\1\7\3\0\11\7\2\0\14\7\1\362\13\7\5\0"+
    "\1\7\3\0\11\7\2\0\10\7\1\363\17\7\5\0"+
    "\1\7\3\0\11\7\2\0\6\7\1\61\21\7\5\0"+
    "\1\7\3\0\11\7\2\0\3\7\1\61\23\7\2\35"+
    "\1\0\1\35\2\0\16\35\1\0\17\35\1\364\11\35"+
    "\1\0\1\35\2\0\16\35\1\0\14\35\1\143\14\35"+
    "\1\0\1\35\2\0\16\35\1\0\1\307\30\35\1\0"+
    "\1\35\2\0\16\35\1\0\10\35\1\365\20\35\1\0"+
    "\1\35\2\0\16\35\1\0\21\35\1\120\7\35\1\0"+
    "\1\35\2\0\14\35\1\120\1\35\1\0\31\35\1\0"+
    "\1\35\2\0\12\35\1\120\3\35\1\0\31\35\1\0"+
    "\1\35\2\0\16\35\1\0\14\35\1\366\14\35\1\0"+
    "\1\35\2\0\16\35\1\0\10\35\1\367\20\35\1\0"+
    "\1\35\2\0\16\35\1\0\1\120\30\35\1\0\1\35"+
    "\2\0\16\35\1\0\2\35\1\120\26\35\1\0\1\35"+
    "\2\0\16\35\1\0\14\35\1\370\14\35\1\0\1\35"+
    "\2\0\16\35\1\0\10\35\1\371\20\35\1\0\1\35"+
    "\2\0\16\35\1\0\6\35\1\120\22\35\1\0\1\35"+
    "\2\0\16\35\1\0\3\35\1\120\23\35\1\7\5\0"+
    "\1\7\3\0\11\7\2\0\14\7\1\372\13\7\5\0"+
    "\1\7\3\0\11\61\2\0\30\7\5\0\1\7\3\0"+
    "\3\61\6\7\2\0\30\7\5\0\1\7\3\0\11\7"+
    "\2\0\22\7\1\373\5\7\5\0\1\7\3\0\11\7"+
    "\2\0\15\7\1\374\12\7\5\0\1\7\3\0\11\7"+
    "\2\0\1\375\27\7\5\0\1\7\3\0\11\7\2\0"+
    "\4\7\1\72\23\7\5\0\1\7\3\0\11\7\2\0"+
    "\21\7\1\376\5\7\2\35\1\0\1\35\2\0\16\35"+
    "\1\0\22\35\1\377\6\35\1\0\1\35\2\0\16\35"+
    "\1\0\15\35\1\u0100\13\35\1\0\1\35\2\0\16\35"+
    "\1\0\1\u0101\30\35\1\0\1\35\2\0\16\35\1\0"+
    "\4\35\1\124\24\35\1\0\1\35\2\0\16\35\1\0"+
    "\21\35\1\u0102\5\35\1\7\5\0\1\7\3\0\11\7"+
    "\2\0\2\7\1\u0103\25\7\5\0\1\7\3\0\11\7"+
    "\2\0\14\7\1\61\13\7\5\0\1\7\3\0\11\7"+
    "\2\0\12\7\1\61\15\7\5\0\1\7\3\0\11\7"+
    "\2\0\26\7\1\61\2\35\1\0\1\35\2\0\16\35"+
    "\1\0\2\35\1\u0104\26\35\1\0\1\35\2\0\16\35"+
    "\1\0\14\35\1\120\14\35\1\0\1\35\2\0\16\35"+
    "\1\0\12\35\1\120\16\35\1\0\1\35\2\0\16\35"+
    "\1\0\26\35\1\120\1\7\5\0\1\7\3\0\11\7"+
    "\2\0\21\7\1\u0105\5\7\2\35\1\0\1\35\2\0"+
    "\16\35\1\0\21\35\1\u0106\5\35\1\7\5\0\1\7"+
    "\3\0\11\7\2\0\15\7\1\72\11\7\2\35\1\0"+
    "\1\35\2\0\16\35\1\0\15\35\1\124\11\35";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\23\1\1\11\16\1\1\0\1\1\1\11\70\1\2\0"+
    "\56\1\1\0\156\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    public static ArrayList<Token> tokens = new ArrayList<>();  
    public static ArrayList<Token> errores = new ArrayList<>();  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   for(Token t: tokens){
    t.print();
  }

  System.out.println("\nErrores\n");
  for(Token t: errores){
    t.print();
  }
  return 0;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <"+ yytext()+">");
            }
            // fall through
          case 13: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 14: break;
          case 3:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 15: break;
          case 4:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Identificador"));
            }
            // fall through
          case 16: break;
          case 5:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador suma"));
            }
            // fall through
          case 17: break;
          case 6:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Literal numerico"));
            }
            // fall through
          case 18: break;
          case 7:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador igual"));
            }
            // fall through
          case 19: break;
          case 8:
            { string.append( yytext() );
            }
            // fall through
          case 20: break;
          case 9:
            { yybegin(YYINITIAL);
                                    tokens.add(new Token(string.toString(), yyline, yycolumn, "Literal string"));
            }
            // fall through
          case 21: break;
          case 10:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Operador igual igual"));
            }
            // fall through
          case 22: break;
          case 11:
            { tokens.add(new Token(yytext().trim(), yyline, yycolumn, "Parabra reservada"));
            }
            // fall through
          case 23: break;
          case 12:
            { tokens.add(new Token(yytext(), yyline, yycolumn, "Palabra reservada"));
            }
            // fall through
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
